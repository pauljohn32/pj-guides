;;; crmda-org.el --- self-defined functions for handling org files at CRMDA
;; Author: Longcan Huang
;; Date: July 11, 2018
;;
;;; Commentary:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; known bugs:
;; 1. If the html shows funny characters inside the code blocks, it's probably
;; due to fill-column-indicator.  What I did to fix this is insert the following
;; lines after the line (funcall lang-mode) in the ox-html.el file.
;; (when (require 'fill-column-indicator nil 'noerror)
;;       (fci-mode -1))
;; The solution was found on reddit.
;; This bug won't bug you if you use the shell script to perform the same actions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Code:
(require 'org)
(if (>= (string-to-number (org-version)) 8.3)
    (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (shell . t)
        )
      )
  (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (sh . t)
      )
    )
  )

(setq org-confirm-babel-evaluate 'nil)
(setq org-export-babel-evaluate 'nil)
(defun auto-insert-output-section ()
  (interactive)
  (goto-char (point-max))
  (org-meta-return)
  (insert "Output\n")
  (if (>= (string-to-number (org-version)) 8.3)
      (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
    (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
    )
  (insert "\tmplus ")
  (insert (file-name-base buffer-file-name))
  (insert ".inp")
  (insert "\n")
  (insert "\#+END_SRC")
  )

(defun con/auto-insert-output-section ()
  (interactive)
  (goto-char (point-min))
  (if (re-search-forward "* Output\n" nil t)
      (message "There already exists an output section! Please double check the file.")
    (auto-insert-output-section)
    )
  )


(defun insert-output-section (orgfile)
  (interactive)
  (with-temp-buffer
    (insert "\n")
    (org-meta-return)
    (insert "Output\n")
    (if (>= (string-to-number (org-version)) 8.3)
        (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
      (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
    )
    (insert "\tmplus ")
    (insert (file-name-base orgfile))
    (insert ".inp")
    (insert "\n")
    (insert "\#+END_SRC")
    (write-region (point-min)
                  (point-max)
                  orgfile
                  t)
     )
  )

(defun rename-output-section ()
  (interactive)
  (goto-char (point-min))
  (if (search-forward-regexp "^* Output\n" nil t)
      (replace-match "* Run the Model\n" t nil)
    (message "There is no section named `Output'!")
    )
  )

(defun crmda/auto-insert-output-section ()
  (interactive)
  (goto-char (point-min))
  (if (re-search-forward "^* Run the Model\n" nil t)
      (message "There already exists a section named `Run the Model'! Please double check the file.")
    (goto-char (point-max))
    (org-meta-return)
    (insert "Run the Model\n")
    (if (>= (string-to-number (org-version)) 8.3)
        (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
      (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
      )
    (insert "\tmplus ")
    (insert (file-name-base buffer-file-name))
    (insert ".inp")
    (insert "\n")
    (insert "\#+END_SRC")
    )
  )

(defun crmda/insert-output-section (orgfile)
  (interactive)
  (with-temp-buffer
    (insert "\n")
    (org-meta-return)
    (insert "Run the Model\n")
    (if (>= (string-to-number (org-version)) 8.3)
        (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
      (insert "\#+BEGIN_SRC sh :results output org :exports both\n")
    )
    (insert "\tmplus ")
    (insert (file-name-base orgfile))
    (insert ".inp")
    (insert "\n")
    (insert "\#+END_SRC")
    (write-region (point-min)
                  (point-max)
                  orgfile
                  t)
     )
  )


(defun execute-shell-mplus-block (orgfile)
  (interactive)
  (find-file (expand-file-name orgfile))
  (goto-char (point-min))
  ;; (re-search-forward "[\t]+mplus[ a-z0-9A-Z-]+\.inp")
  (if (not (re-search-forward "^#\\+BEGIN_SRC[ \t]+sh[ a-z]:results"
                              nil
                              t
                              ))
      (message "No Mplus source code block was found!")
    (progn
      (goto-char (point-min))
      (re-search-forward "^#\\+BEGIN_SRC[ \t]+sh[ a-z]:results")
      (org-babel-execute-src-block)
      )
    )
  (save-buffer)
  )


(defun auto-execute-shell-mplus-block ()
  (interactive)
  (goto-char (point-min))
  ;; (re-search-forward "[\t]+mplus[ a-z0-9A-Z-]+\.inp")
  (if (not (re-search-forward "^#\\+BEGIN_SRC[ \t]+sh[ a-z]:results"
                              nil
                              t
                              ))
      (message "No Mplus source code block was found!")
    (progn
      (goto-char (point-min))
      (re-search-forward "^#\\+BEGIN_SRC[ \t]+sh[ a-z]:results")
      (org-babel-execute-src-block)
      )
    )
  (save-buffer)
  )

(defun auto-insert-results-section ()
  (interactive)
  (goto-char (point-max))
  (org-meta-return)
  (insert "Review the Results\n")
  (insert "Click \[\[file:")
  (insert (file-name-base buffer-file-name))
  (insert ".out\]\[")
  (insert (file-name-base buffer-file-name))
  (insert ".out\]\]")
  (insert " to see the output.")
  )

(defun crmda/auto-insert-results-section ()
  (interactive)
  (goto-char (point-min))
  (if (re-search-forward "^* Run the Model\n" nil t)
      (message "There already exists a section named `Review the Results'! Please double check the file.")
    (goto-char (point-max))
    (org-meta-return)
    (insert "Review the Results\n")
    (insert "Click \[\[file:")
    (insert (file-name-base buffer-file-name))
    (insert ".out\]\[")
    (insert (file-name-base buffer-file-name))
    (insert ".out\]\]")
    (insert " to see the output.")
    )
  )

(defun insert-results-section (orgfile)
  (interactive)
  (with-temp-buffer
    (insert "\n\n")
    (org-meta-return)
    (insert "Review the Results\n")
    (insert "Click \[\[file:")
    (insert (file-name-base orgfile))
    (insert ".out\]\[")
    (insert (file-name-base orgfile))
    (insert ".out\]\]")
    (insert " to see the output.")
    (write-region (point-min)
                  (point-max)
                  orgfile
                  t)
    )
)

(defun auto-insert-title-header ()
  (interactive)
  (goto-line 3)
  (goto-char (point-min))
  (unless (looking-at "^#\\+TITLE:[ \t]+")
    (insert "#+TITLE: ")
  )
  )

(defun get-file-keyword (KEYWORD)
  (interactive)
  (let ((case-fold-search t)
        (re (format "^#\\+%s:[ \t]+\\([^\t\n]+\\)" KEYWORD)))
    (if (not (save-excursion
               (or (re-search-forward re nil t)
                   (re-search-backward re nil t))))
        nil
        ;; (error (format "No line containing #+%s: value found" KEYWORD))
    )
    (match-string 1)))

(defun get-file-keyword-default (KEYWORD DEFAULT)
  (interactive)
  (let ((case-fold-search t)
        (re (format "^#\\+%s:[ \t]+\\([^\t\n]+\\)" KEYWORD)))
    (if (not (save-excursion
               (or (re-search-forward re nil t)
                   (re-search-backward re nil t))))
        nil
        ;; (error (format "No line containing #+%s: value found" KEYWORD))
    )
    (if (not (match-string 1))
        DEFAULT
      (match-string 1)
      )
    )
  )

(setq org-html-postamble-format
      '(
        ("en" "<p class=\"postamble\">Last Updated %C. Created by %c</p>")
        )
      )

(defun auto-insert-crmda-template (dir)
  (interactive "DEnter the directory where the setup file is saved: ")
  (auto-insert-title-header)
  (let ((rname (file-relative-name dir)))
  (goto-char (point-min))
  (insert "\#+SETUPFILE: ")
  (insert rname)
  (insert "level-1")
  (insert "\n")
  (insert "\#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"")
  (insert rname)
  (insert "crmda.css\"/>")
  (insert "\n")
  (insert "\#+HTML_HEAD_EXTRA: <link rel=\"stylesheet\" type=\"text/css\" href=\"")
  (insert rname)
  (insert "crmda_org.css\"/>")
  (insert "\n")
  (re-search-forward "^#\\+TITLE:[ A-z()]+")
  (insert "\n")
  (insert "\#+AUTHOR: Ben Kite\n")
  (insert "\#+EMAIL: \n")
  (insert "\#+INSTITUTE: \n")
  (insert "\#+SUBTITLE: \n")
  (insert "\#+ABSTRACT: \n")
  (insert "\#+KEYWORDS: \n")
  (insert "\#+INCLUDE: ")
  (insert rname)
  (insert "heading\n")
  )
  )

(defun insert-crmda-template (dir)
  (interactive)
  (auto-insert-title-header)
  (let (
        (rname (file-relative-name dir))
        )
  (goto-char (point-min))
  (insert "\#+SETUPFILE: ")
  (insert rname)
  (insert "level-1")
  (insert "\n")
  (insert "\#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"")
  (insert rname)
  (insert "crmda.css\"/>")
  (insert "\n")
  (insert "\#+HTML_HEAD_EXTRA: <link rel=\"stylesheet\" type=\"text/css\" href=\"")
  (insert rname)
  (insert "crmda_org.css\"/>")
  (insert "\n")
  (re-search-forward "^#\\+TITLE:[ A-z()]+")
  (insert "\n")
  (insert "\#+AUTHOR: Ben Kite\n")
  (insert "\#+EMAIL: \n")
  (insert "\#+INSTITUTE: \n")
  (insert "\#+SUBTITLE: \n")
  (insert "\#+ABSTRACT: \n")
  (insert "\#+KEYWORDS: \n")
  (insert "\#+INCLUDE: ")
  (insert rname)
  (insert "heading\n")
  )
  )

(defun crmda/insert-crmda-template (dir)
  (interactive)
  (goto-char (point-min))
  (if (re-search-forward "^#\\+SETUPFILE:" nil t)
      (message "The crmda template has already existed.")
    (auto-insert-title-header)
    (let (
          (rname (file-relative-name dir))
          )
      (goto-char (point-min))
      (insert "\#+SETUPFILE: ")
      (insert rname)
      (insert "level-1")
      (insert "\n")
      (insert "\#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"")
      (insert rname)
      (insert "crmda.css\"/>")
      (insert "\n")
      (insert "\#+HTML_HEAD_EXTRA: <link rel=\"stylesheet\" type=\"text/css\" href=\"")
      (insert rname)
      (insert "crmda_org.css\"/>")
      (insert "\n")
      (re-search-forward "^#\\+TITLE:[ A-z()]+")
      (insert "\n")
      (insert "\#+AUTHOR: Ben Kite\n")
      (insert "\#+EMAIL: \n")
      (insert "\#+INSTITUTE: \n")
      (insert "\#+SUBTITLE: \n")
      (insert "\#+ABSTRACT: \n")
      (insert "\#+KEYWORDS: \n")
      (insert "\#+INCLUDE: ")
      (insert rname)
      (insert "heading\n")
      )
    )
  )

(defun auto-crmda (dir)
  (interactive "D")
  (insert-crmda-template dir)
  (org-babel-tangle)
  (con/auto-insert-output-section)
  (auto-execute-shell-mplus-block)
  (auto-insert-results-section)
  (org-html-export-to-html)
  )

(defun crmda/org-md-export-to-markdown ()
  (interactive)
  ;; (let (
  ;;       (title-temp (get-file-keyword "TITLE"))
  ;;       )
  (org-md-export-to-markdown)
  (find-file (expand-file-name (concat (file-name-base buffer-file-name) ".md")))
  (goto-char (point-min))
    ;; (insert "# ")
    ;; (insert title-temp)
    ;; (insert "\n")
    ;; (delete-region (point) (progn (forward-line 6)
    ;;                               (forward-char -1)
    ;;                               (point)))
  (re-search-forward "<img[ a-z=\":/.]+logoleft.png\">")
  (forward-line -1)
  (forward-char 1)
  (insert "<!---")
  (insert "\n")
  (re-search-forward "<img[ a-z=\":/.]+logoleft.png\">")
  (forward-char 1)
  (insert "--->")
  (insert "\n")
  (re-search-forward "<img[ a-z=\":/.]+logo-vert.png\">")
  (forward-line -1)
  (forward-char 1)
  (insert "<!---")
  (insert "\n")
  (re-search-forward "<img[ a-z=\":/.]+logo-vert.png\">")
  (forward-char 1)
  (insert "--->")
  (insert "\n")
  (save-buffer)
  (kill-buffer)
  ;; )
)

(provide 'crmda-org)
;;; crmda-org.el ends here
