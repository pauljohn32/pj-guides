#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{array}
\usepackage{longtable}
\usepackage{graphicx}
\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}

%%\input{theme/guidePreambleSweavel.tex} 
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%% end of paste

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}
%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}
\logo{\includegraphics[width=5mm]{theme/logomini}}
\end_preamble
\options aspectratio=1609
\use_default_options false
\begin_modules
logicalmkup
sweave
natbibapa
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style 
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch semboot
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\branch cfalvm
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%following is LyX shortcut 
\backslash
vb for bold upright math for matrices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% tmpout directory must exist first
\end_layout

\begin_layout Plain Layout

<<tmpout, echo=FALSE, include=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

tdir <- "tmpout"
\end_layout

\begin_layout Plain Layout

if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t,split=T,ae=F,height=4.5,width=7}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<excludemeRoptions, include=F, results=hide>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=100, prompt = " ", continue = "  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE)
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly = TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(4.1, 4.1, 1.5, 2.1)
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

if(!file.exists("theme")) file.symlink("../../../../template/theme", "theme")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
Bayesian Regression 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
bayes
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Johnson
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Center for Research Methods and Data Analysis 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
CRMDA
\end_layout

\end_inset


\end_layout

\begin_layout Date
2018
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Where to Start
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I'm Totally Enthusiastic!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I swallowed the Bayes pill.
 I want to be like that!
\end_layout

\begin_layout Itemize
software frameworks
\end_layout

\begin_deeper
\begin_layout Itemize
BUGS
\end_layout

\begin_layout Itemize
JAGS
\end_layout

\begin_layout Itemize
Stan
\end_layout

\end_deeper
\begin_layout Itemize
I'm an R 
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"

\end_inset

 user, what to do?
\end_layout

\begin_deeper
\begin_layout Itemize
The R Bayesian Task View: 
\begin_inset CommandInset href
LatexCommand href
name "R Bayesian"
target "https://cran.r-project.org/view=Bayesian"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Understand your model}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Necessary to understand which unknown parameters you are estimating
\end_layout

\begin_layout Itemize
Necessary to understand jargon about prior beliefs for parameters
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I understand regression, sorta}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=\beta_{0}+\beta_{1}x1_{i}+\beta_{2}x2_{i}+\ldots+\varepsilon_{i},\,\,for\,i\in1,\ldots N
\]

\end_inset


\end_layout

\begin_layout Standard
The usual assumption is that 
\begin_inset Formula $\varepsilon_{i}$
\end_inset

 is drawn from 
\begin_inset Formula $N(0,\sigma_{\varepsilon}^{2})$
\end_inset


\end_layout

\begin_layout Itemize
The parameters to estimate are 
\begin_inset Formula $\beta_{0}$
\end_inset

, 
\begin_inset Formula $\beta_{1}$
\end_inset

, 
\begin_inset Formula $\beta_{2}$
\end_inset

, 
\begin_inset Formula $\ldots$
\end_inset

, and 
\begin_inset Formula $\sigma_{\varepsilon}$
\end_inset


\end_layout

\begin_layout Itemize
Data will be 
\begin_inset Formula $y$
\end_inset

, 
\begin_inset Formula $x1$
\end_inset

, 
\begin_inset Formula $x2$
\end_inset

, etc
\end_layout

\begin_layout Itemize
Now, state your prior beliefs about the 
\begin_inset Formula $\beta$
\end_inset

's and 
\begin_inset Formula $\sigma_{\varepsilon}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Do you like vague priors?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use the prior information to make priors that are 
\begin_inset Quotes eld
\end_inset

in the general vicinity
\begin_inset Quotes erd
\end_inset

 of current beliefs, but leave a reasonable variation
\end_layout

\begin_layout Itemize
If you really have no idea at all about most likely value, choose a prior
 distribution that is wide and relatively flat.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Betas: choose normal centered on 0 with a ridiculously huge standard deviation,
 say 
\begin_inset Formula $N(0,\,1000^{2})$
\end_inset

, or adopt Student's t prior with small degrees of freedom.
\end_layout

\begin_layout Itemize
Sigma: less clear what we ought to do.
 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $\tau=\frac{1}{\sigma_{\varepsilon}^{2}}$
\end_inset

 is called precision
\end_layout

\begin_layout Itemize
A common prior for precision has been 
\begin_inset Formula $Gamma(0.1,0.1)$
\end_inset

 which has mean 1 and variance 10.
 
\end_layout

\begin_layout Itemize
Gelman suggest prior for 
\begin_inset Formula $\sigma_{\varepsilon}$
\end_inset

 should be simple 
\begin_inset Formula $Uniform(0.1,some\,big\,number)$
\end_inset

.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
First, an example
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Ordinary Least Squares Regression}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Some data Zack Roman obtained
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<data100>>=
\end_layout

\begin_layout Plain Layout

ddir <- "data"
\end_layout

\begin_layout Plain Layout

fn <- "OLS_data.csv"
\end_layout

\begin_layout Plain Layout

dat <- read.csv(file.path(ddir, fn))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Make text variable into R factor
\end_layout

\begin_layout Plain Layout

dat$x3f <- factor(dat$x3, levels = c(0, 1, 2), 
\end_layout

\begin_layout Plain Layout

               labels = c("lo", "med", "hi"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Routsize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<data200>>=
\end_layout

\begin_layout Plain Layout

head(dat, 10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Ordinary Least Squares Regression}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We are going to estimate a regression with an interaction between two predictors
, x1 and x2, and a categorical variable x3.
 
\end_layout

\begin_layout Itemize
Putting aside x3 for the moment, our theory is that there is some nonlinearity
 in the relationship.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Linear model :
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=\beta_{0}+\beta_{1}x1_{i}+\beta_{2}x2_{i}+\varepsilon_{i}
\]

\end_inset


\end_layout

\begin_layout Standard
seems not right
\end_layout

\end_deeper
\begin_layout Itemize
The effect of 
\begin_inset Formula $x1$
\end_inset

 depends on 
\begin_inset Formula $x2$
\end_inset

, and vice versa
\end_layout

\begin_layout Itemize
Needs some 
\begin_inset Quotes eld
\end_inset

wiggly
\begin_inset Quotes erd
\end_inset

 curvatures, some wavy function like
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=\beta_{0}+f(x1_{i},x2_{i})+\varepsilon_{i}
\]

\end_inset


\end_layout

\begin_layout Itemize
Models for that are out of our reach right now, we are 
\begin_inset Quotes eld
\end_inset

stuck
\begin_inset Quotes erd
\end_inset

 with a traditional OLS calculation
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The simplest nonlinear formula is standard 
\begin_inset Quotes eld
\end_inset

interaction
\begin_inset Quotes erd
\end_inset

 model.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=\beta_{0}+\beta_{1}x1_{i}+\beta_{2}x2_{i}+\beta_{3}x1_{i}\cdot x2_{i}+\varepsilon_{i}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Why 
\begin_inset Formula $x1_{i}\cdot x2_{i}$
\end_inset

? This is an effort to include curvature, a nonlinearity in the predictive
 relationship.
\end_layout

\begin_layout Itemize
Could say effect of x2 depends on x1.
 Here, it is re-written so x2's slope includes x1,
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
y_{i}=\beta_{0}+\beta_{1}x1_{i}+(\beta_{2}+\beta_{3}x1_{i})\cdot x2_{i}+\varepsilon_{i}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The OLS estimate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm10>>=
\end_layout

\begin_layout Plain Layout

m0 <- lm(y ~ x1 * x2, data = dat) 
\end_layout

\begin_layout Plain Layout

summary(m0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize that, 1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm20, fig=T>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

ps20 <- plotSlopes(m0, plotx = "x2", modx = "x1", modxVals = "std.dev.", interval
 = "confidence")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize that, 2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm30, fig=T>>=
\end_layout

\begin_layout Plain Layout

ps30 <- plotPlane(m0, plotx1 = "x1", plotx2 = "x2", lcol = gray(.7), theta
 = 270, phi = 25)
\end_layout

\begin_layout Plain Layout

addLines(from = ps20, to = ps30, col = ps20$col)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize that, 3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm40, fig=T>>=
\end_layout

\begin_layout Plain Layout

ps40 <- testSlopes(ps20)
\end_layout

\begin_layout Plain Layout

plot(ps40)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize that, 4}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Marginal predictions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Routsize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<lm200>>=
\end_layout

\begin_layout Plain Layout

predictOMatic(m0, interval = "confidence")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Marginal plot from other point of view}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm300, fig=T>>=
\end_layout

\begin_layout Plain Layout

ps70 <- plotSlopes(m0, plotx = "x1", modx = "x2", modxVals = "std.dev.", interval
 = "confidence")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Testslopes on that}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm400, fig=T>>=
\end_layout

\begin_layout Plain Layout

ps80 <- testSlopes(ps70)
\end_layout

\begin_layout Plain Layout

plot(ps80)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Final model also has x3
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Add in x3f}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm600>>=
\end_layout

\begin_layout Plain Layout

m0 <- lm(y ~ x1 * x2 + x3f, data = dat) 
\end_layout

\begin_layout Plain Layout

summary(m0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Because 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
x3f
\end_layout

\end_inset

 is a categorical variable with 3 levels, the standard coding creates 2
 dummy variables, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
x3fmed
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
x3fhi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<lm610>>=
\end_layout

\begin_layout Plain Layout

confint(m0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Canned Bayesian Software
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Easy Routes for Standard Models}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
For 
\begin_inset Quotes eld
\end_inset

garden variety
\begin_inset Quotes erd
\end_inset

 statistical models, there are 
\emph on
more-or-less automatic 
\emph default
ways to estimate with Bayes
\end_layout

\begin_layout Itemize
Mplus, Stata, SPSS, etc offer Bayesian variants of some models.
\end_layout

\begin_layout Itemize
The only problem is that they make value judgments for you on the priors
 and the chain calculations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{MCMCpack}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The first-and-foremost among R packages for canned Bayesian models is 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
MCMCpack
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "martin2011"

\end_inset


\end_layout

\begin_layout Itemize
In MCMCpack, use the function called 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
MCMCregress()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mcmcpack200>>=
\end_layout

\begin_layout Plain Layout

library(MCMCpack)
\end_layout

\begin_layout Plain Layout

mcmcpack0 <- MCMCregress(y ~ x1 * x2 + x3f, b0 = 0, B0 = 0.1, sigma.mu = 1,
 sigma.var = 10, data = dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Priors
\end_layout

\begin_deeper
\begin_layout Itemize
betas are 
\begin_inset Quotes eld
\end_inset

flat
\begin_inset Quotes erd
\end_inset

 (improper uniform) if we use B0 = 0, here I set precision at 0.1 for all
 betas (variance = 10).
\end_layout

\begin_layout Itemize
error variance is assumed to be inverse Gamma distribution with parameters
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
c0
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
d0
\end_layout

\end_inset

, which can also be specified by providing parameters 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
sigma.mu
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
sigma.var
\end_layout

\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mcmcack300>>=
\end_layout

\begin_layout Plain Layout

summary(mcmcpack0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

if(interactive()) plot(mcmcpack0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Specialty Packages}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

MNP
\begin_inset Quotes erd
\end_inset

 (Imai, 2005, 2017) is MCMC multinomial probit, using all homemade C++ code
 libraries.
 Great learning opportunity
\end_layout

\begin_deeper
\begin_layout Standard
Imai and van Dyk (2005).
 “MNP: R Package for Fitting the Multinomial Probit Model.” Journal of Statistica
l Software, Vol.
 14, No.
 3 (May), pp.
 1-32.
 <doi:10.18637/jss.v014.i03>.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Hierarchical Models}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
MCMCpack
\end_layout

\end_inset

 offers many variants of hierarchical models
\end_layout

\begin_layout Itemize
A similar competing set of hierarchical (and other) Bayesian models was
 implemented in the R package 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
bayesm
\end_layout

\end_inset

 (Rossi, 2017).
\end_layout

\begin_layout Itemize
A state-of-the-art, flexible Bayes modeling is R package 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
MCMCglmm
\end_layout

\end_inset

.
 This includes 2 excellent vignettes, including course notes.
\end_layout

\begin_deeper
\begin_layout Standard
Jarrod D Hadfield (2010).
 MCMC Methods for Multi-Response Generalized Linear Mixed Models: The MCMCglmm
 R Package.
 Journal of Statistical Software, 33(2), 1-22.
 URL http://www.jstatsoft.org/v33/i02/.
\end_layout

\end_deeper
\begin_layout Itemize
Although Stan is a general purpose, syntax-driven project, the Stan team
 has decided to package up 
\begin_inset Quotes eld
\end_inset

idiot proof
\begin_inset Quotes erd
\end_inset

 examples of many typical models in a package called 
\begin_inset Quotes eld
\end_inset

rstanarm
\begin_inset Quotes erd
\end_inset

: lots of stats models! Similar in spirit to MCMCpack.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Similar R package 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
brms
\end_layout

\end_inset

 allows users to write R commands and a Stan code model 
\begin_inset Quotes eld
\end_inset

pops out
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Concluding comment}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Should you use the pre-made Bayesian estimator?
\end_layout

\begin_deeper
\begin_layout Itemize
yes, IF its priors are understandable to you and you can write what you
 want
\end_layout

\begin_layout Itemize
no, IF you want to run a customized model that is not included in a pre-wrapped
 function
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Programming Libraries
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What is a library?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
library = collection of routines.
 Compiled languages like C, Fortran.
 High performance.
 Reusable
\end_layout

\begin_layout Itemize
Challenge 1: develop high quality numeric code that has a workable interface
 for programmers
\end_layout

\begin_layout Itemize
Challenge 2: get the programmers to write more libraries and R packages
 so that non-programmers can use the libraries as well.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Period of Transition}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Many pioneering authors write their own Fortran/C++ algorithms, but we see
 less of that today
\end_layout

\begin_layout Itemize
Many would choose a library/toolkit and focus on that/
\end_layout

\begin_layout Itemize
Those people starting today should concentrate on learning JAGS and Stan.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
BUGS History
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{BUGS=Bayesian Updating with Gibbs Sampling}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The BUGS project was a block-buster (summarized 
\begin_inset CommandInset citation
LatexCommand citealp
key "lunn_bugs_2013"

\end_inset

)
\end_layout

\begin_layout Itemize
Created a path-breaking, freely available tools (BUGS, WinBUGS, OpenBUGS).
 Set the paradigm.
\end_layout

\begin_layout Itemize
HOWTO: user creates a model text file, specifies settings, launches MCMC
 simulation
\end_layout

\begin_layout Itemize
Nice training notes online:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "The OpenBUGS site"
target "http://openbugs.net"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "WinBUGSTraining_smcs.pdf"
target "https://uclouvain.be/cps/ucl/doc/stat/documents/WinBUGSTraining_smcs.pdf"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Example model with 1 predictor regression}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $y_{i}=b0+b1\cdot x_{i}+\varepsilon_{i}$
\end_inset

, 
\begin_inset Formula $\varepsilon\sim N(0,sigma^{2})$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

model{
\end_layout

\begin_layout Plain Layout

  ## likelihood for each case
\end_layout

\begin_layout Plain Layout

  for (i in 1:n){
\end_layout

\begin_layout Plain Layout

    y[i] ~ dnorm(mu[i], tau)
\end_layout

\begin_layout Plain Layout

    mu[i] <- b0 + b1*x[i]
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  # Priors
\end_layout

\begin_layout Plain Layout

  b0 ~ dnorm(0, 0.001) # 0.001 is precision
\end_layout

\begin_layout Plain Layout

  b1 ~ dnorm(0, 0.001)
\end_layout

\begin_layout Plain Layout

  # precision of error term is tau
\end_layout

\begin_layout Plain Layout

  tau ~ dgamma(0.01, 0.01)
\end_layout

\begin_layout Plain Layout

  sigma <- 1/sqrt(tau)
\end_layout

\begin_layout Plain Layout

  ## alternatively
\end_layout

\begin_layout Plain Layout

  ## sigma ~ dunif(0.001, 100)
\end_layout

\begin_layout Plain Layout

  ## tau <- 1/(sigma*sigma)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Other components needed to run}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
model control information
\end_layout

\begin_deeper
\begin_layout Itemize
how many chains, iterations for each one
\end_layout

\begin_layout Itemize
how long is the 
\begin_inset Quotes eld
\end_inset

burn in
\begin_inset Quotes erd
\end_inset

 period
\end_layout

\begin_layout Itemize
thinning
\end_layout

\end_deeper
\begin_layout Itemize
initial values for parameters in each of the 
\begin_inset Quotes eld
\end_inset

chains
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
requests for diagnostic information
\end_layout

\begin_deeper
\begin_layout Itemize
name the parameters to be saved and tracked
\end_layout

\end_deeper
\begin_layout Itemize
SUMMARY: lots of details to correct
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{WinBUGS}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
To facilitate user experience, WinBUGS added a graphical interface
\end_layout

\begin_layout Itemize
Model text file still needed, GUI can drive and monitor MCMC
\end_layout

\begin_layout Itemize
Wildly successful
\end_layout

\begin_layout Itemize
OpenBUGS is last iteration of BUGS, it is an open-sourced version of WinBUGS
\end_layout

\begin_layout Itemize
Project now frozen, only making new releases to fix truly cataclysmic bugs,
 no new features.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Then R came along}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Many R users wanted easy way to interact with OpenBUGS engine.
\end_layout

\begin_layout Itemize
Packages developed to interface R with OpenBUGS.
 Can still be used today.
 
\end_layout

\begin_layout Itemize
Because R has tools for data management, it is to send data and init info,
 along with a request
\end_layout

\begin_layout Itemize
R2OpenBUGS now works fine!
\end_layout

\begin_layout Itemize
BRugs (live interactive connector R OpenBUGS) also mostly works fine
\end_layout

\begin_layout Itemize
In the writeups folder for this session, I'm leaving an example of a model
 that can be run with R's lme4, OpenBUGS, and Stan for comparison.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
JAGS
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{JAGS = Just Another Gibbs Sampler}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The original BUGS project was not open source.
 It was free to use, but internal algorithm code was not.
 
\end_layout

\begin_deeper
\begin_layout Itemize
What they had was written in a now-extinct variant of 
\begin_inset Quotes eld
\end_inset

Object Pascal
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
A competing implementation in C++ was developed by Martyn Plummer called
 JAGS.
\end_layout

\begin_layout Itemize
A JAGS model file uses most of syntax used by BUGS
\end_layout

\begin_layout Itemize
R connector package 
\begin_inset Quotes eld
\end_inset

rjags
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "plummer_jags_2010,plummerrjags"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Choose JAGS}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you are using Gibbs Sampling to write your own model, I recommend JAGS
 over OpenBUGS.
 C++ faster, will be supported longer
\end_layout

\begin_layout Itemize
If a parameter is discrete (latent trait model), the JAGS platform is preferred
 (even over Stan)
\end_layout

\begin_layout Itemize
The R package 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
blavaan
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is a user-friendly SEM package that is similar in nature to MCMCpack.
 
\end_layout

\begin_deeper
\begin_layout Itemize
blaavan writes a JAGS syntax file and then runs it via rjags.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Stan
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Stan is latest}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Research team headed by Andrew Gelman, Columbia.
\end_layout

\begin_layout Itemize
Stan proposes an updated version of the Metropolis algorithm, known as the
 Hamiltonian No U-Turn Sampler (NUTS) that seems to run faster and explore
 the parameter space more efficiently.
\end_layout

\begin_layout Itemize
Stan team has implemented many examples, including the examples that were
 provided with BUGS.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Stan for the regression model}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Look in the stan folder distributed with these notes.
\end_layout

\begin_deeper
\begin_layout Itemize
elementary stan 
\begin_inset Quotes eld
\end_inset

OLS_reg0.stan
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
still elementary but more flexible 
\begin_inset Quotes eld
\end_inset

OLS_reg.stan
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{OLS
\backslash
_reg.stan}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "stan/OLS_reg.stan"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Run through stan with this R stanza}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rstan200>>=
\end_layout

\begin_layout Plain Layout

library(rstan)
\end_layout

\begin_layout Plain Layout

set.seed(234234)
\end_layout

\begin_layout Plain Layout

## Manufacture data structures
\end_layout

\begin_layout Plain Layout

X <- model.matrix(~ x1 * x2 + x3f, dat)
\end_layout

\begin_layout Plain Layout

y <- dat$y 
\end_layout

\begin_layout Plain Layout

head(X)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rstan201, eval=F>>=
\end_layout

\begin_layout Plain Layout

svn <- "OLS_reg.stan"
\end_layout

\begin_layout Plain Layout

rt1 <- stanc(file = file.path(sdir, sfn))
\end_layout

\begin_layout Plain Layout

sm1 <- stan_model(stanc_ret = rt1, verbose = FALSE)
\end_layout

\begin_layout Plain Layout

stanm0 <- sampling(sm1, data = list(N = nrow(dat), K = ncol(X), 
\end_layout

\begin_layout Plain Layout

    y = y, X = X), pars = c("beta", "sigma"),
\end_layout

\begin_layout Plain Layout

    chains = 4, iter = 2000, warmup = 1000)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
You'd need Stan to run that, of course.
\end_layout

\begin_layout Itemize
It takes a little while (20-30 seconds), so we saved a copy of the output
 object.
 Load it like so
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rstan300>>=
\end_layout

\begin_layout Plain Layout

wdir = "workingdata"
\end_layout

\begin_layout Plain Layout

soutfn <- "stanm0.rds"
\end_layout

\begin_layout Plain Layout

stanm0 <- readRDS(file.path(wdir, soutfn))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{summary}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
summary.
 Note it uses parameter names
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Routsize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

summary(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can re-insert variable column names}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Routsize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<stan400>>=
\end_layout

\begin_layout Plain Layout

names(stanm0)[1:ncol(X)]  <- colnames(X)
\end_layout

\begin_layout Plain Layout

stanm0
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Somewhat unfortunately, the plotting functions for stan objects are tied
 into the rstan package, so it is not possible to explore the package very
 well without installing rstan.
 
\end_layout

\begin_deeper
\begin_layout Itemize
That's different from MCMCpack, which outputs an R-standard 
\begin_inset Quotes eld
\end_inset

coda
\begin_inset Quotes erd
\end_inset

 object, which we can explore even if MCMCpack is not installed.
\end_layout

\end_deeper
\begin_layout Itemize
If you do have rstan, you will see they are consolidating their plotting
 support with functions named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
stan_xxx
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 where xxx might be one of (
\begin_inset Quotes eld
\end_inset

plot
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

trace
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

dens
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

hist
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

diag
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

rhat
\begin_inset Quotes erd
\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan690,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_plot(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700a0,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_trace(stanm0, pars = names(stanm0)[1:4])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700a1,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_trace(stanm0, pars = names(stanm0)[5:7])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700b1,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_hist(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700b2,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_hist(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700b,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_dens(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700e,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_diag(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700f,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_rhat(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700g,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_mcse(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan700h,fig=T>>=
\end_layout

\begin_layout Plain Layout

stan_ac(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Potpourri Plotting Possibilities}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan710,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

pairs(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pairs()
\end_layout

\end_inset

 is a standard R function that creates a scatterplot matrix
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-stan710}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=12cm]{tmpout/t-stan710}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Did you wonder$
\backslash
ldots$}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
What is inside 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
stanm0
\end_layout

\end_inset

?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<stan800>>=
\end_layout

\begin_layout Plain Layout

library(methods)
\end_layout

\begin_layout Plain Layout

slotNames(stanm0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Routsize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<stan810>>=
\end_layout

\begin_layout Plain Layout

stanm0@inits
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
What's the Point?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{We get caught up in details}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We already have regression tools that are widely used.
 
\end_layout

\begin_layout Itemize
Get same results as Bayes method.
\end_layout

\begin_layout Itemize
What's the point again?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Practical Answer 1}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We don't have estimators for a lot of models we might dream up
\end_layout

\begin_layout Itemize
We have estimators for normally distributed things, and subject to some
 restrictions, related distributions
\end_layout

\begin_layout Itemize
The mosaic of distributions is immense
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/Leemis-McQueston-2008.pdf
	width 10cm
	BoundingBox 0bp 60bp 594bp 740bp

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Practical Answer 2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
All ML estimators have the same weakness/frustration: 
\end_layout

\begin_deeper
\begin_layout Quote
We Don't Know How Accurate The Estimates Are.
\end_layout

\end_deeper
\begin_layout Itemize
We have 
\begin_inset Quotes eld
\end_inset

asymptotic
\begin_inset Quotes erd
\end_inset

 theory and hypothesis tests (likelihood ratio, t-ratio) based tests that
 are all conducted 
\begin_inset Quotes eld
\end_inset

as if
\begin_inset Quotes erd
\end_inset

 the sample size is infinite
\end_layout

\begin_layout Itemize
Categorical outcomes (logistic regression) ML parameter estimates are biased
 and the 
\begin_inset Quotes eld
\end_inset

asymptotic
\begin_inset Quotes erd
\end_inset

 standard errors are not accurate in small sample.
\end_layout

\begin_deeper
\begin_layout Itemize
Primary impetus behind Bayesian interest in item response theory 
\begin_inset CommandInset citation
LatexCommand citep
key "albert_bayesian_1992,albert_bayesian_1993"

\end_inset

.
 Note the dates on those famous publications.
\end_layout

\end_deeper
\begin_layout Itemize
Could bootstrap to get standard errors, but bootstrap is justified as an
 approximation to Bayesian posterior analysis.
 Why bother with that?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Practical Answer 3}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
With exotic predictive models, we can't make any progress with Maximum Likelihoo
d because there are too many parameters, too much nonlinearity.
\end_layout

\begin_layout Itemize
In Item Response Theory, we might estimate 1000s of parameters, ML simply
 does not work.
\end_layout

\begin_layout Itemize
Use Bayesian MCMC as a way to obtain ML estimates.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{References}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../../sem,../../bayes"
options "apalike2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Session}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sess10>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<excludemeopts20, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

options(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
