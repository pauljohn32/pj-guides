#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{array}
\usepackage{longtable}
\usepackage{graphicx}
%\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}

%%\input{theme/guidePreambleSweavel.tex} 
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%% end of paste

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}
%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}
\logo{\includegraphics[width=5mm]{theme/logomini}}
\end_preamble
\options aspectratio=1609
\use_default_options false
\begin_modules
logicalmkup
sweave
natbibapa
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style \use_bibtopic false
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch semboot
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\branch cfalvm
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%following is LyX shortcut 
\backslash
vb for bold upright math for matrices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% tmpout directory must exist first
\end_layout

\begin_layout Plain Layout

<<tmpout, echo=FALSE, include=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

tdir <- "tmpout"
\end_layout

\begin_layout Plain Layout

if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t, split=T, ae=F, height=4.5, width=7}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, include=F, results=hide>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=100, prompt = " ", continue = "  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE)
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly = TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(4.1, 4.1, 1.5, 2.1)
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

if(!file.exists("theme")) file.symlink("../../../../template/theme", "theme")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
Linear Regression 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
lm
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

 and Terrence Jorgensen
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Johnson and Jorgensen
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Department of Political Science
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

Center for Research Methods and Data Analysis, University of Kansas
\begin_inset Argument 1
status open

\begin_layout Plain Layout
K.U.
\end_layout

\end_inset


\end_layout

\begin_layout Date
2018
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Package Check!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Check your packages}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Recall that the R 
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"
literal "true"

\end_inset

 packages 
\begin_inset Quotes eld
\end_inset

stats
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

graphics
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

datasets
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

base
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

utils
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

grDevices
\begin_inset Quotes erd
\end_inset

 are loaded by default.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Check your packages}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We'll use some addons today
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

If you don't already have these R packages, install them on your computer
\end_layout

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

install.packages(c("car", "lmtest", "rockchalk"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Don't forget to check documentation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

You can browse a list of all functions in a particular package (e.g., rockchalk)
\end_layout

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

help(package = rockchalk)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

or look up a help page for a specific function
\end_layout

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

?plotSlopes
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Check the Data
\end_layout

\begin_layout Subsection
read.table plus
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Got Data?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
item The example data is saved in "data/affect.dat"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
item Unusually, this data does not have column names in row 1.
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

dat <- read.table("data/affect.dat", header = FALSE)
\end_layout

\begin_layout Plain Layout

colnames(dat) <- c("Agency1", "Agency2", "Agency3", 
\end_layout

\begin_layout Plain Layout

            "Intrin1", "Intrin2", "Intrin3", 
\end_layout

\begin_layout Plain Layout

            "Extrin1", "Extrin2", "Extrin3", 
\end_layout

\begin_layout Plain Layout

            "PosAFF1", "PosAFF2", "PosAFF3",
\end_layout

\begin_layout Plain Layout

            "NegAFF1", "NegAFF2", "NegAFF3", 
\end_layout

\begin_layout Plain Layout

            "Sex", "Ethnic2", "Ethnic3", "Ethnic4")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
item View first few rows of data
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
SweaveSize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

options("width" = 70)
\end_layout

\begin_layout Plain Layout

head(dat)
\end_layout

\begin_layout Plain Layout

options("width" = 80)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Recodes
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{recodes}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create scales by calculating means of the indicator variables
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
SweaveSize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

dat$agency <- rowMeans(dat[ , c("Agency1","Agency2","Agency3")], na.rm =
 TRUE)
\end_layout

\begin_layout Plain Layout

dat$intMotiv <- rowMeans(dat[ , c("Intrin1","Intrin2","Intrin3")], na.rm
 = TRUE)
\end_layout

\begin_layout Plain Layout

dat$extMotiv <- rowMeans(dat[ , c("Extrin1","Extrin2","Extrin3")], na.rm
 = TRUE)
\end_layout

\begin_layout Plain Layout

dat$posAffect <- rowMeans(dat[ , c("PosAFF1","PosAFF2","PosAFF3")], na.rm
 = TRUE)
\end_layout

\begin_layout Plain Layout

dat$negAffect <- rowMeans(dat[ , c("NegAFF1","NegAFF2","NegAFF3")], na.rm
 = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Recode dummy variables
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

table(dat$Sex)
\end_layout

\begin_layout Plain Layout

dat$gender <- factor(dat$Sex, levels = c(1,2), labels = c("male", "female"))
\end_layout

\begin_layout Plain Layout

dat$ethnicity <- as.factor(ifelse(dat$Ethnic2, "Black",
\end_layout

\begin_layout Plain Layout

                           ifelse(dat$Ethnic3, "Hispanic",
\end_layout

\begin_layout Plain Layout

                           ifelse(dat$Ethnic4, "Asian", "White"))))
\end_layout

\begin_layout Plain Layout

dat$race <- rockchalk::combineLevels(dat$ethnicity,  levs = c("Black", "Hispanic
", "Asian"), newLabel = "Nonwhite")
\end_layout

\begin_layout Plain Layout

options("width" = 60)
\end_layout

\begin_layout Plain Layout

head(dat)
\end_layout

\begin_layout Plain Layout

options("width" = 80)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Save a copy of that in the workingdata folder
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

saveRDS(dat, file = "workingdata/affect.rds")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
One-Predictor Linear Regression
\end_layout

\begin_layout Subsection
The lm() function and R formula
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R formula}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Almost all model fitting functions in R use the Wilkinson and Rogers notation
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ predictor_variable
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Can omit the estimation of the intercept
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Old fashioned way
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ -1 + predictor_variable
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The old fashioned way confused school children, hence the new fashioned
 way
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ 0 + predictor_variable
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
There are special symbols in R formula notation, 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

:
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

^
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

|
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The lm() function}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Suppose we want to explain Positive Affect with sense of Agency
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1 <- lm(posAffect ~ agency, data = dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Returns 
\begin_inset Quotes eld
\end_inset

silently
\begin_inset Quotes erd
\end_inset

 unless there is an error
\end_layout

\begin_layout Itemize
Print method for lm objects offers minimal information
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
There is quite a bit of structure in there, however.
 Run 
\begin_inset Quotes eld
\end_inset

str()
\begin_inset Quotes erd
\end_inset

 you will see.
 I'll run the briefer 
\begin_inset Quotes eld
\end_inset

attributes
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

attributes(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Access Points
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Direct Retrieval versus Accessor functions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The lm object 
\begin_inset Quotes eld
\end_inset

reg.mod.1
\begin_inset Quotes erd
\end_inset

 is of class 
\begin_inset Quotes eld
\end_inset

lm
\begin_inset Quotes erd
\end_inset

, S3 object.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

class(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you ran 
\begin_inset Quotes eld
\end_inset

str(reg.mod.1)
\begin_inset Quotes erd
\end_inset

, a big structure inside there would be apparent.
 
\end_layout

\begin_layout Itemize
I'll just ask for names
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

names(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Everybody Loves 
\backslash
$}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
S3 list objects allow a shortcut access with the dollar sign
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
data.frame access like dat$x1
\end_layout

\end_deeper
\begin_layout Itemize
Notice that inside the fitted model object there is an element named 
\begin_inset Quotes eld
\end_inset

df.residual
\begin_inset Quotes erd
\end_inset

.
 Get that:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1$df.residual
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the dollar sign is a shortcut notation, we could go the long form
 as well
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1[["df.residual"]]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Any of the elements in reg.mod.1's internal structure can be retrieved in
 that way.
\end_layout

\begin_layout Itemize
If this were an S4 class object, then we would use the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 sign rather than the 
\begin_inset Quotes eld
\end_inset

$
\begin_inset Quotes erd
\end_inset

 sign as a shortcut.
\end_layout

\begin_layout Itemize
The R Core team does NOT encourage us to pull pieces out in that way.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
They reserve the right to rename those internal bits.
\end_layout

\end_deeper
\begin_layout Itemize
Instead, it is recommended to use 
\begin_inset Quotes eld
\end_inset


\series bold
accessor
\series default

\begin_inset Quotes erd
\end_inset

 functions that R provides
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Coefficients, retrieved both ways}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Point estimates of parameters (regression coefficients)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The accessor function 
\begin_inset Quotes eld
\end_inset

coef()
\begin_inset Quotes erd
\end_inset

 (short for coefficients)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

coef(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Use the dollar sign access
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1$coefficients
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
The predicted value vector
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The accessor function 
\begin_inset Quotes eld
\end_inset

fitted()
\begin_inset Quotes erd
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

head(fitted(reg.mod.1))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The dollar sign avenue (note element name 
\begin_inset Quotes eld
\end_inset

fitted.values
\begin_inset Quotes erd
\end_inset

 is different than accessor function name 
\begin_inset Quotes eld
\end_inset

fitted()
\begin_inset Quotes erd
\end_inset

)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

head(reg.mod.1$fitted.values)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Itemize
The residual vector
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The accessor function 
\begin_inset Quotes eld
\end_inset

resid()
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

head(resid(reg.mod.1), 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The dollar sign avenue (note element name is different than accessor function)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

head(reg.mod.1$residuals, 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Some functions offer much more elaborate information}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Every useful object in R is supposed to have a summary() method!
\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
summary()
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 function is as close as we get to a 
\begin_inset Quotes eld
\end_inset

big standard output
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

summary(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Confidence intervals for regression coefficients
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

confint(reg.mod.1, level = .99)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
About Formulas
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Math functions in Formulas}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If we wanted to predict with the logarithm of a variable, 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
We could create a new variable by recoding, Or
\end_layout

\begin_layout Enumerate
use the symbol for the logarithm in the formula
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ log(predictor)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any of the mathematical transformations in R could be used in place of log.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ sqrt(predictor)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
I don't usually write math transformations into formulas, it complicates
 plotting and table-making duties later on.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Special Symbols in Formulas}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Multiple regression: 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

 for more predictors
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ predictor1 + predictor2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Interaction: 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ predictor1 * predictor2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Means you want a regression to estimate 3 coefficients, 
\begin_inset Formula $\beta_{1}predictor1+\beta_{2}predictor2+\beta_{3}predictor1\times predictor2$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Be cautious with 
\backslash
textasciicircum{}}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
You may think to yourself, 
\begin_inset Quotes eld
\end_inset

I'll add a squared term
\begin_inset Quotes erd
\end_inset

:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ predictor + predictor^2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
However, there is a gotcha 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

^
\begin_inset Quotes erd
\end_inset

 has a special meaning in the formula notation.
 
\end_layout

\begin_layout Enumerate
If we are trying to make a predictive equation like
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
dependent\_variable=\beta_{0}+\beta_{1}predictor+\beta_{2}predictor{}^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
Wrap the math inside the capital 
\series bold
I()
\series default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dependent_variable ~ predictor 
\end_layout

\begin_layout Plain Layout

          + I(predictor^2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
But don't do that, better ways exist (orthogonal polynomials).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Diagnostics
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{plot diagnostics}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
lm
\end_layout

\end_inset

 class has a plot method (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
plot.lm
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

plot(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
defaults to offer 4 graphs (can be adjusted, see ?
\begin_inset Flex Code
status open

\begin_layout Plain Layout
plot.lm
\end_layout

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<plotlm10, fig=T,include=F,height=6,width=9>>=
\end_layout

\begin_layout Plain Layout

par(mfrow = c(2,2))
\end_layout

\begin_layout Plain Layout

plot(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-plotlm10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plot diagnostics
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
1.
 residuals are (not) related to fitted values
\end_layout

\begin_layout Standard
2.
 residuals are (not) approximately normally distributed
\end_layout

\begin_layout Standard
3.
 residuals are (not) homoscedastic
\end_layout

\begin_layout Standard
4.
 highly influential (leverage) observations do/not exist (Cook's Distance)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Influence Diagnostics}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The influence.measures() function collects a great deal of information and
 displays information for each row in the data for the fitted model:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

inf1 <- influence.measures(reg.mod.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Output is immense, does not fit within these notes
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

inf1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
generates such a massive outflow that the presentation software fails.
\end_layout

\begin_layout Itemize
A tidy summary function show the problematic cases
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sumry10, eval=F, echo=T>>=
\end_layout

\begin_layout Plain Layout

summary(inf1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sumry20, echo=F>>=
\end_layout

\begin_layout Plain Layout

summary(inf1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Thumbnail sketch}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In case you wonder what those things are, I wrote out a longer lecture about
 it 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pj.freefaculty.org/guides/stat/Regression/RegressionDiagnostics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

inf1sum <- summary(inf1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
SweaveSize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

round(inf1sum[1, ], 3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Thumbnail sketch is as follows
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
dfb 
\begin_inset Quotes eld
\end_inset

df beta
\begin_inset Quotes erd
\end_inset

 (one for each coefficient) shows how the coefficient estimate would change
 if that row were dropped
\end_layout

\begin_layout Description
dffit change in predicted value if that row were dropped
\end_layout

\begin_layout Description
cook.d A summary of how far the vector of parameter estimates 
\begin_inset Formula $(\hat{\beta}_{0},\hat{\beta}_{1})$
\end_inset

 would change if that row were dropped.
\end_layout

\begin_layout Description
hat The 
\begin_inset Quotes eld
\end_inset

Hat matrix
\begin_inset Quotes erd
\end_inset

 value for the row.
 If this value is large, it means the case is influential in changing the
 overall regression line
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Predicted Value Framework
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The predict function accepts a "newdata" argument}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
predict(reg.mod.1)
\end_layout

\end_inset

 is the same result as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
fitted(reg.mod.1)
\end_layout

\end_inset

: the predicted values of the observed cases.
 
\end_layout

\begin_layout Itemize
Often, we want predicted values for particular, substantively interesting
 values of the predictors.
 
\end_layout

\begin_layout Itemize
Obtain predicted values for a new data set:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

predict(reg.mod.1, newdata = some_data_frame_we_make_up)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
And if we want confidence intervals, we add
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

predict(reg.mod.1, newdata = some_data_frame_we_make_up, interval = "confidence")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This makes it possible to calculate 
\begin_inset Quotes eld
\end_inset

marginal effects
\begin_inset Quotes erd
\end_inset

, the change in the outcome due to any given change in a predictor.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{rockchalk::newdata}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The newdata object MUST include
\end_layout

\begin_deeper
\begin_layout Itemize
all predictors, with exactly same names as used in the formula, and
\end_layout

\begin_layout Itemize
values of factors within the newdata object must match the data used to
 fit the model
\end_layout

\end_deeper
\begin_layout Itemize
In rockchalk, I needed this often and wrote a 
\begin_inset Quotes eld
\end_inset

newdata
\begin_inset Quotes erd
\end_inset

 function.
 
\end_layout

\begin_layout Itemize
For example, I notice the variable 
\begin_inset Quotes eld
\end_inset

agency
\begin_inset Quotes erd
\end_inset

 varies between 1 and 4.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

nd <- newdata(reg.mod.1, predVals = c("agency"), n = 5)
\end_layout

\begin_layout Plain Layout

nd
\end_layout

\begin_layout Plain Layout

## n = 5 is 5 evenly spaced quartile values
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Then we use that with the predict function
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1.pred <- predict(reg.mod.1, newdata = nd)
\end_layout

\begin_layout Plain Layout

reg.mod.1.pred
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Stash Predictions into the newdata frame}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Usually, you want to save the fitted values
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

nd$reg.mod.1.pred <- predict(reg.mod.1, newdata = nd)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Because I became tired of that, in rockchalk I wrote 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
predictOMatic()
\end_layout

\end_inset

.
 It creates the new data and also saves the predictions:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1.pm <- predictOMatic(reg.mod.1, predVals = c("agency"), n = 5)
\end_layout

\begin_layout Plain Layout

reg.mod.1.pm
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A more-or-less 
\begin_inset Quotes eld
\end_inset

automatic
\begin_inset Quotes erd
\end_inset

 graphing routine, 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
plotSlopes
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, will do all of this and draw a plot.
 Before I show that, I need to show about confidence intervals for predictions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Confidence Interval on Predicted Values}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The R 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
predict()
\end_layout

\end_inset

 function has a confidence interval argument.
 It defaults to none, but can be either 
\begin_inset Quotes eld
\end_inset

confidence
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

prediction
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
The returned data structure is a matrix with 3 columns
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1.pred2 <- predict(reg.mod.1, newdata = nd, interval = "confidence")
\end_layout

\begin_layout Plain Layout

reg.mod.1.pred2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
For the 5 example values of agency, we have a value
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

 the line, and 
\end_layout

\begin_layout Enumerate
95% range below (
\begin_inset Quotes eld
\end_inset

lwr
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Enumerate
95% range above (
\begin_inset Quotes eld
\end_inset

upr
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain,containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The CI lines should be a "smooth hourglass"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps60,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(posAffect ~ agency, data = dat, cex = 0.6, col = "gray60")
\end_layout

\begin_layout Plain Layout

lines(reg.mod.1.pred2[ , "fit"] ~ nd$agency, lty = 1)
\end_layout

\begin_layout Plain Layout

lines(reg.mod.1.pred2[ , "lwr"] ~ nd$agency, lty = 3, lwd = 2, col = "blue")
\end_layout

\begin_layout Plain Layout

lines(reg.mod.1.pred2[ , "upr"] ~ nd$agency, lty = 3, lwd = 2, col = "blue")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
input{tmpout/t-ps50.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{tmpout/t-ps60}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Those CI lines are 
\begin_inset Quotes eld
\end_inset

connect-the-dots
\begin_inset Quotes erd
\end_inset

 curves.
 In this case, they don't look so bad
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{plotSlopes with no confidence interval}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps70,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plotSlopes(reg.mod.1, plotx = "agency")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-ps70.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/t-ps70}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{predictOMatic understands the interval argument}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.1.pm <- predictOMatic(reg.mod.1, predVals = c("agency"), n = 5, interval
 = "confidence")
\end_layout

\begin_layout Plain Layout

reg.mod.1.pm
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps50,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plotSlopes(reg.mod.1, plotx = "agency", n = 5, interval = "confidence")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-ps50.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/t-ps50}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
plotSlopes
\end_layout

\end_inset

 creates an output object that has the newdata in it:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps55,eval=F>>=
\end_layout

\begin_layout Plain Layout

reg.mod.ps <- plotSlopes(reg.mod.1, plotx = "agency", n = 5, interval = "confidence"
)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
To obtain smooth curve, I need to calculate predictions for more values
 of 
\begin_inset Formula $X$
\end_inset

.
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
plotSlopes
\end_layout

\end_inset

 calculates predicted values for, n = 40, values of agency
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ps56, include=F>>=
\end_layout

\begin_layout Plain Layout

reg.mod.ps <- plotSlopes(reg.mod.1, plotx = "agency", n = 5, interval = "confidence"
)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.ps$newdata
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Categorical Predictors
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R factors are recoded into "dummy variables" in regression models}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
gender is a dichotomous variable, coded 
\begin_inset Quotes eld
\end_inset

male
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

female
\begin_inset Quotes erd
\end_inset

.
 Check the levels:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gend10>>=
\end_layout

\begin_layout Plain Layout

levels(dat$gender)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Itemize
Include gender as a predictor
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gend20>>=
\end_layout

\begin_layout Plain Layout

reg.mod.2 <- lm(posAffect ~ gender, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
One gender, in this case 
\begin_inset Quotes eld
\end_inset

males
\begin_inset Quotes erd
\end_inset

, is treated as a baseline group.
 There are 2 categories, we can only estimate 2 coefficients.
 The default model include an intercept, then only 1 coefficient is left
 over for one of the groups.
\end_layout

\begin_layout Itemize
In this case, the predicted values would be
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
males: 3.0227
\end_layout

\begin_layout Itemize
females: 3.0227 + 0.08717
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Itemize
There are 2 alternatives to this coding scheme
\end_layout

\begin_layout Enumerate
Get rid of the intercept, in which case we get one estimate for males, one
 for females
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gend21>>=
\end_layout

\begin_layout Plain Layout

reg.mod.2b <- lm(posAffect ~ 0 + gender, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.2b)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The disadvantage of this coding is that we cannot directly say whether the
 2 values are statistically significantly different from one another.
\end_layout

\end_deeper
\begin_layout Enumerate
Reverse the levels on the gender variable
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gend22>>=
\end_layout

\begin_layout Plain Layout

dat$gender2 <- factor(dat$gender, levels = c("female", "male"))
\end_layout

\begin_layout Plain Layout

reg.mod.2c <- lm(posAffect ~ gender2, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.2c)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Test Homogeneity of Variances}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use the Levene test, which is in John Fox's car package.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gend23>>=
\end_layout

\begin_layout Plain Layout

library(car)
\end_layout

\begin_layout Plain Layout

leveneTest(reg.mod.2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This suggests we were not wrong to assume the error variances for males
 and females are the same.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A multi-category factor}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eth10>>=
\end_layout

\begin_layout Plain Layout

levels(dat$ethnicity)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eth20>>=
\end_layout

\begin_layout Plain Layout

reg.mod.3 <- lm(posAffect ~ ethnicity, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bug-Shooting
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Finding out what's going wrong}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Sometimes you'll have confusing output that you can't understand
\end_layout

\begin_layout Itemize
I often snoop on data as R sees it 
\begin_inset Quotes eld
\end_inset

inside
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
lm()
\end_layout

\end_inset

:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
model.frame: a data.frame with output and predictors that R creates when you
 run lm.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<bug10>>=
\end_layout

\begin_layout Plain Layout

rm1.mf <- model.frame(reg.mod.1)
\end_layout

\begin_layout Plain Layout

head(rm1.mf)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Suppose the regression fails, so there is no object from which to obtain
 a frame.
 No problem! Give the formula to model.frame.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<bug20>>=
\end_layout

\begin_layout Plain Layout

rm1.mf <- model.frame(posAffect ~ log(agency), data = dat)
\end_layout

\begin_layout Plain Layout

head(rm1.mf)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
model.matrix shows the 
\begin_inset Quotes eld
\end_inset

design matrix
\begin_inset Quotes erd
\end_inset

, the numeric columns used in estimation
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<bug30>>=
\end_layout

\begin_layout Plain Layout

rm1.dm <- model.matrix(reg.mod.1)
\end_layout

\begin_layout Plain Layout

head(rm1.dm)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
This is especially revealing if there is a factor as a predictor
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<bug40>>=
\end_layout

\begin_layout Plain Layout

rm2.dm <- model.matrix(posAffect ~ ethnicity, data = dat)
\end_layout

\begin_layout Plain Layout

head(rm2.dm)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Add More Predictors
\end_layout

\begin_layout Subsection
Formulas
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Addition sign "+"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Can insert math transformations 
\begin_inset Quotes eld
\end_inset

on the fly
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dep_var ~ log(predictor1) + sqrt(predictor2) + predictor3 + predictor4
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
but this makes creating a newdata object somewhat more complicated
\end_layout

\begin_layout Itemize
However, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rockchalk::newdata()
\end_layout

\end_inset

 and predictOMatic can work together to avoid problems for us!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Multiplication sign "*" is not exactly like multiplication}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A multiplicative interaction between two continuous predictors can be entered
 like so
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dep_var ~ predictor1 * predictor2 + predictor3
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
It adds predictor1 and predictor2 as 
\begin_inset Quotes eld
\end_inset

additive
\begin_inset Quotes erd
\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

main
\begin_inset Quotes erd
\end_inset

) effects, plus their product.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

dep_var ~ predictor1 + predictor2 + predictor1:predicor2 + predictor3
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
COLON! The symbol 
\begin_inset Quotes eld
\end_inset

predictor1:predictor2
\begin_inset Quotes erd
\end_inset

 represents 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $predictor1\times predictor2$
\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{With categorical predictors, "*" does something else}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Because factor variables are broken into dummy variables, an interactive
 term like
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

posAffect ~ gender * agency 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
will have the effect of estimating a different slope and a different intercept
 for each of the sexes.
 Will illustrate in next section.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Moderator = categorical interaction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Our first guess might be "everything is additive"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts10, include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod10>>=
\end_layout

\begin_layout Plain Layout

reg.mod.5 <- lm(posAffect ~ agency + gender, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.5)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts.mod10, include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod11, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

plotSlopes(reg.mod.5, plotx = "agency", modx = "gender", col = c("gray60",
 "black"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{tmpout/t-mod11}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This asserts 
\begin_inset Quotes eld
\end_inset

parallel lines
\begin_inset Quotes erd
\end_inset

 for males and females
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Agency effect depends on gender?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One might imagine that rather than an additive effect of gender, as in 
\begin_inset Formula 
\[
posAffect_{i}=\beta_{0}+\beta_{1}agency_{i}+\beta_{2}female_{i}
\]

\end_inset


\end_layout

\begin_layout Standard
it is more likely that the effect of agency differs between males and females
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
posAffect_{i}=\beta_{0}+\beta_{1}agency_{i}+\beta_{2}female_{i}+\beta_{3}agency_{i}\times female
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts10, include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod20>>=
\end_layout

\begin_layout Plain Layout

reg.mod.6 <- lm(posAffect ~ agency*gender, data = dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts.mod20, include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results are
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts10, include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod21>>=
\end_layout

\begin_layout Plain Layout

summary(reg.mod.6)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opt.mod21, include=F, echo=F, results=hide>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod30, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

ps30 <- plotSlopes(reg.mod.6, plotx = "agency", modx = "gender", col = c("gray40",
 "black"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize the interaction}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{tmpout/t-mod30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod31,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

ps31 <- plotSlopes(reg.mod.6, plotx = "agency", modx = "gender", col = c("blue",
 "black"), interval = "confidence")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=9cm]{tmpout/t-mod31}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Panel Graphics
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{How to best plot that?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
My tendency has been to draw several groups on one plot.
 
\end_layout

\begin_layout Itemize
Others prefer 
\begin_inset Quotes eld
\end_inset

trellis
\begin_inset Quotes erd
\end_inset

 graphics, which make smaller pictures, one for each group
\end_layout

\begin_layout Itemize
In the base of R, the lattice package is provided for this purpose
\end_layout

\begin_layout Itemize
Hadley Wickham's ggplot2 package is a little bit easier to use, so we will
 test that.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{ggplot thumbnail sketch}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
ggplot is similar in many ways to concept of R base graphics,
\end_layout

\begin_layout Itemize
We can
\end_layout

\begin_deeper
\begin_layout Itemize
draw a 
\begin_inset Quotes eld
\end_inset

blank
\begin_inset Quotes erd
\end_inset

 figure
\end_layout

\begin_layout Itemize
add pieces to it
\end_layout

\end_deeper
\begin_layout Itemize
However, 
\end_layout

\begin_deeper
\begin_layout Itemize
it uses an entirely different vocabulary, such as 
\begin_inset Quotes eld
\end_inset

geom
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

aes
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
additional graph commands do not just 
\begin_inset Quotes eld
\end_inset

draw
\begin_inset Quotes erd
\end_inset

 pieces can fundamentally alter the display.
\end_layout

\begin_layout Itemize
variable names need not be quoted (I find this confusing)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{ggplot thumbnail sketch}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The plot is initiated by a call to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ggplot()
\end_layout

\end_inset

, which must specify an 
\begin_inset Quotes eld
\end_inset

aesthetic
\begin_inset Quotes erd
\end_inset

, the fundamental nature of the plot
\end_layout

\begin_deeper
\begin_layout Itemize
An interesting difference with base graphics is that we think of 
\begin_inset Quotes eld
\end_inset

adding
\begin_inset Quotes erd
\end_inset

 graph elements
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

p1 <- ggplot(data.frame, aes(...))
\end_layout

\begin_layout Plain Layout

p1 <- p1 + new features here
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
The last 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
p1
\end_layout

\end_inset

 causes the result to be drawn in a graphic window.
\end_layout

\begin_layout Itemize
People often write a string of added-together features, but I usually test
 the new features one at a time.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

p1 <- ggplot(data.frame, aes(...)) 
\end_layout

\begin_layout Plain Layout

         + new feature here 
\end_layout

\begin_layout Plain Layout

         + more features 
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Sometimes the ordering of new features will make a little difference in
 the final display.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{ggplot blank page}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg10, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

p1 <- ggplot(dat, aes(x = agency, y = posAffect))
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=9cm]{tmpout/t-gg10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg10.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{geom
\backslash
_point is for points in a scatter}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg20, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

p1 <- p1 + geom_point(shape = 1, alpha = 0.5)
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-gg20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg20.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{facet
\backslash
_grid() divides plot into sections}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg30, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

p1 <- p1 + geom_point(shape = 1, alpha = 0.5)
\end_layout

\begin_layout Plain Layout

p1 <- p1 + facet_grid(.
 ~ gender)
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-gg30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg30.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{geom
\backslash
_line will get line data from plotSlopes object}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg40, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

ps31$newdata$posAffect <- ps31$newdata$fit
\end_layout

\begin_layout Plain Layout

p1 <- p1 + geom_line(data = ps31$newdata, color = "blue")
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-gg40}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg40.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{geom
\backslash
_ribbon() can draw the confidence intervals}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg70, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

p1 <- p1 + geom_ribbon(data = ps31$newdata, 
\end_layout

\begin_layout Plain Layout

            aes(ymin = lwr, ymax = upr), 
\end_layout

\begin_layout Plain Layout

			fill = "pink", alpha = 0.5)
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-gg70}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg70.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I don't want gray boxes in background!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg50, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

p1 <- p1 + theme_bw()
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-gg50}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg50.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{More beautful group labels}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg60, fig=T, height=4, width=8, include=F>>=
\end_layout

\begin_layout Plain Layout

p1 <- p1 + theme(strip.background = element_rect(color="darkgoldenrod4",
 fill="lightgoldenrod"))
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=11cm]{tmpout/t-gg60}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg60.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset Note Note
status open

\begin_layout Subsection*
Variance Homogeneity
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Homogeneous Variances}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This model allows slopes and intercepts to vary among genders, but it assumes
 the error variances are the same between the two groups.
\end_layout

\begin_layout Itemize
I did not find a pre-packaged heteroskedasticity test function in an R package,
 so I made a quick improvised test in this way.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod32>>=
\end_layout

\begin_layout Plain Layout

library(nlme)
\end_layout

\begin_layout Plain Layout

homog <- lmList(posAffect ~ agency | gender, data = dat)
\end_layout

\begin_layout Plain Layout

summary(homog)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
lmList fits separate models for the gender groups, but the default 
\begin_inset Quotes eld
\end_inset

pools
\begin_inset Quotes erd
\end_inset

 the data for an error variance estimate
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod33>>=
\end_layout

\begin_layout Plain Layout

hetero <- lmList(posAffect ~ agency | gender, data = dat, pool = FALSE)
\end_layout

\begin_layout Plain Layout

summary(hetero)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
lmtest
\end_layout

\end_inset

 package, there is a general purpose function for asymptotic likelihood
 ratio tests
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod34>>=
\end_layout

\begin_layout Plain Layout

library(lmtest)
\end_layout

\begin_layout Plain Layout

lrtest(hetero, homog)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Seems to say that the models are not equivalent (surprising because the
 homogeneous variance test was not failed earlier)
\end_layout

\begin_layout Itemize
Thus we need to use either
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

robust
\begin_inset Quotes erd
\end_inset

 standard errors for hypo testing (use car package 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
hccm()
\end_layout

\end_inset

 function or the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
sandwich
\end_layout

\end_inset

 package)
\end_layout

\begin_layout Itemize
A weighted least squares estimate or
\end_layout

\begin_layout Itemize
Structural Equation Model Maximum Likelihood
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multi-Category factor
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Include ethnicity}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Previous seems to indicate there is not a 
\begin_inset Quotes eld
\end_inset

statistically significant
\begin_inset Quotes erd
\end_inset

 difference between males and females, so instead we consider ethnicity
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod70>>=
\end_layout

\begin_layout Plain Layout

reg.mod.7 <- lm(posAffect ~ agency*ethnicity + gender, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.7)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Again, this example is a little disappointing
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod71,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plotSlopes(reg.mod.7, plotx = "agency", modx = "ethnicity", ylim = c(0.9,5.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{tmpout/t-mod71}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{ggplot trellis plot for quantile-based groups}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gg110, fig=T, height=6, width=6, include=F>>=
\end_layout

\begin_layout Plain Layout

## Data must be subdivided by groups
\end_layout

\begin_layout Plain Layout

ps71 <- plotSlopes(reg.mod.7, plotx = "agency", modx = "ethnicity", interval
 = "confidence")
\end_layout

\begin_layout Plain Layout

ps71$newdata$posAffect <- ps71$newdata$fit
\end_layout

\begin_layout Plain Layout

p1 <- ggplot(dat, aes(x = agency, y = posAffect)) + geom_point(shape = 1,
 alpha = 0.5) + 
\end_layout

\begin_layout Plain Layout

facet_wrap( ~ ethnicity, ncol = 2) + geom_line(data = ps71$newdata, color
 = "blue") +
\end_layout

\begin_layout Plain Layout

geom_ribbon(data = ps71$newdata, aes(ymin = lwr, ymax = upr), fill = "pink",
 alpha = 0.5) +
\end_layout

\begin_layout Plain Layout

theme_bw() + 
\end_layout

\begin_layout Plain Layout

theme(strip.background = element_rect(color="darkgoldenrod4", fill="lightgoldenro
d"))
\end_layout

\begin_layout Plain Layout

p1
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{tmpout/t-gg110}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-gg110.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Numerical Interaction
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Additive Model}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.10 <- lm(posAffect ~ agency + intMotiv + extMotiv, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Explore interactions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Based on a comprehensive literature review and exhaustive theoretical analysis,
 the PI proposes an interaction between agency and extMotiv
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

reg.mod.11 <- lm(posAffect ~ intMotiv + agency*extMotiv, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.11)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Itemize
Visualize that by choosing center points of the 4 quantiles of extMotiv
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod80,fig=T,include=F, height = 5, width=7>>=
\end_layout

\begin_layout Plain Layout

ps80 <- plotSlopes(reg.mod.11, plotx = "agency", modx = "extMotiv", modxVals
 = c(1.14, 1.4, 1.75, 3.6))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-mod80.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/t-mod80}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Follow-Up 1: The J-N Analysis}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
When you looked at this
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=5cm]{tmpout/t-mod80}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
did you wonder the following:
\end_layout

\begin_layout Enumerate
It looks like the black line's slope is not different from 0, but the blue
 line slope certainly is.
 
\end_layout

\begin_layout Enumerate
That means the 
\begin_inset Quotes eld
\end_inset

statistical significance of agency depends on the value of extMotiv.
\begin_inset Quotes erd
\end_inset

 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Instead of asking 
\begin_inset Quotes eld
\end_inset

is agency significant?
\begin_inset Quotes erd
\end_inset

, an interaction modeler should as 
\begin_inset Quotes eld
\end_inset

are there values of extMotiv for which agency might be significant?
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
That is known as a Jersey-Neyman (J-N) hypothesis analysis.
 
\end_layout

\begin_layout Standard
In rockchalk, find the function 
\begin_inset Quotes eld
\end_inset

testSlopes
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod81>>=
\end_layout

\begin_layout Plain Layout

ps80ts <- testSlopes(ps80)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod82,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(ps80ts)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{tmpout/t-mod82}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Followup 2: Nested Model Hypo Test}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A competing research team insists that we need to check interactions with
 intMotiv as well.
 This includes all interaction terms
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod83>>=
\end_layout

\begin_layout Plain Layout

reg.mod.12 <- lm(posAffect ~ agency * intMotiv * extMotiv, data = dat)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.12)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The research question is this: Is the model with more predictors better?
 
\end_layout

\begin_layout Itemize
These are NESTED models (the smaller one is a simplification of the larger
 one).
 
\end_layout

\begin_layout Itemize
A classical approach to test that is an F test, which examines the change
 in the sum-of-squares between the two models.
 The R team has bundled together a number of tests of that sort in the anova()
 function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod84>>=
\end_layout

\begin_layout Plain Layout

anova(reg.mod.10, reg.mod.11, reg.mod.12,  test = "F")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The comparison of models 1 and 2 is statistically significant, meaning we
 should keep the additional coefficients in the model
\end_layout

\begin_layout Itemize
The comparison of models 2 and 3 is not.
 So the enemy research team was wrong.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Centering and Standardizing}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We notice that many in psychology enjoy 
\begin_inset Quotes eld
\end_inset

standardized regression
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

mean-centered
\begin_inset Quotes erd
\end_inset

 regressions.
\end_layout

\begin_layout Itemize
Can do 
\begin_inset Quotes eld
\end_inset

manually
\begin_inset Quotes erd
\end_inset

, but I do that so often while teaching I created shortcuts.
 
\end_layout

\begin_layout Itemize
Do you want a model in which all numeric variables are centered at their
 means? The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
meanCenter
\end_layout

\end_inset

 function defaults to only change variables involved in interactions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod85>>=
\end_layout

\begin_layout Plain Layout

## The mean-centered model sets the predictors at (x - xmean)
\end_layout

\begin_layout Plain Layout

reg.mod.14 <- meanCenter(reg.mod.11)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.14)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Change centerOnlyInteractors = FALSE 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod85b>>=
\end_layout

\begin_layout Plain Layout

reg.mod.14b <- meanCenter(reg.mod.11, centerOnlyInteractors = FALSE)
\end_layout

\begin_layout Plain Layout

summary(reg.mod.14b)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The coefficients hop about because of the transformation, but don't let
 anybody fool you.
 The mean-centered regression is absolutely identical to the un-centered
 one.
 Note the predicted values are identical
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mod86,include=F,fig=T>>=
\end_layout

\begin_layout Plain Layout

plot(fitted(reg.mod.14), fitted(reg.mod.11), xlab = "Uncentered predictors",
 ylab = "Mean-Centered predictors", main = "Predicted Values")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{tmpout/t-mod86}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-mod86}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The results have 
\begin_inset Quotes eld
\end_inset

seemed
\begin_inset Quotes erd
\end_inset

 different to some authors.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Subsection
Diagnostic Plots
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R's plot function}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Lets focus on reg.mod.11, which said
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
SweaveSize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(list("model 11" = reg.mod.11), tight = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks,plain]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<diag100, fig=T,include=F,height=6,width=9>>=
\end_layout

\begin_layout Plain Layout

par(mfrow = c(2,2))
\end_layout

\begin_layout Plain Layout

plot(reg.mod.11)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{tmpout/t-diag100}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can make our own plots to explore}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Residuals were plotted by fitted values, but not by predictors.
 Doing so might reveal whether curvilinear effects are missing from the
 model.
\end_layout

\begin_layout Itemize
These plots demonstrate a 
\begin_inset Quotes eld
\end_inset

loess
\begin_inset Quotes erd
\end_inset

 (locally weighted error-sum-of-squares minimizing) smoother
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<loess10,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(reg.mod.11$residuals ~ reg.mod.11$model$agency, xlab = "agency", ylab =
 "residuals")
\end_layout

\begin_layout Plain Layout

lines(lowess(reg.mod.11$residuals ~ reg.mod.11$model$agency))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

<<loess11,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(reg.mod.11$residuals ~ reg.mod.11$model$intMotiv, xlab = "agency", ylab
 = "residuals")
\end_layout

\begin_layout Plain Layout

lines(lowess(reg.mod.11$residuals ~ reg.mod.11$model$intMotiv))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

<<loess12,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(reg.mod.11$residuals ~ reg.mod.11$model$extMotiv, xlab = "agency", ylab
 = "residuals")
\end_layout

\begin_layout Plain Layout

lines(lowess(reg.mod.11$residuals ~ reg.mod.11$model$extMotiv))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-loess10.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{tmpout/t-loess10}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-loess11.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{tmpout/t-loess11}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-loess12.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{tmpout/t-loess12}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Modern Applied Statistics }
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The famous book by Wm.
 Venables and Brian Ripley, 
\emph on
Modern Applied Statistics with S
\emph default
, advances the theme that statistical analysis has entered a new phase character
ized the idea that
\end_layout

\begin_deeper
\begin_layout Itemize
We 
\begin_inset Quotes eld
\end_inset

interact
\begin_inset Quotes erd
\end_inset

 with estimated objects (rather than just printing output about them)
\end_layout

\end_deeper
\begin_layout Itemize
These notes focus on linear regression modeling
\end_layout

\begin_layout Itemize
SPSS & SAS users should notice the difference, because R makes it possible
 to 
\begin_inset Quotes eld
\end_inset

see inside
\begin_inset Quotes erd
\end_inset

 output objects and interrogate them in various ways
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Other regression functions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
R base also includes 
\end_layout

\begin_deeper
\begin_layout Itemize
glm: generalized linear models (logit, probit, poisson, gamma)
\end_layout

\end_deeper
\begin_layout Itemize
Recommended packages include additional regression functions
\end_layout

\begin_deeper
\begin_layout Itemize
MASS: negative binomial, Box-Cox transformation
\end_layout

\begin_layout Itemize
mgcv: generalized additive models (smoothing functions for 
\begin_inset Quotes eld
\end_inset

wiggly
\begin_inset Quotes erd
\end_inset

 model fits)
\end_layout

\begin_layout Itemize
rpart: partitioned regression trees
\end_layout

\end_deeper
\begin_layout Itemize
Other contributed packages add many models, many of which are written in
 a similar style.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{References}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../../R"
options "apalike2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Session}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sess10>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts20, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

options(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
