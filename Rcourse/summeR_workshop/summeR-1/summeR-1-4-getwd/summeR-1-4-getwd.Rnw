%% LyX 2.3.2 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[10pt,english,aspectratio=1609]{beamer}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}
\setlength{\parskip}{\smallskipamount}
\setlength{\parindent}{0pt}
\usepackage{url}
\usepackage{graphicx}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
% this default might be overridden by plain title style
\newcommand\makebeamertitle{\frame{\maketitle}}%
% (ERT) argument for the TOC
\AtBeginDocument{%
  \let\origtableofcontents=\tableofcontents
  \def\tableofcontents{\@ifnextchar[{\origtableofcontents}{\gobbletableofcontents}}
  \def\gobbletableofcontents#1{\origtableofcontents}
}
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@
\usepackage[natbibapa]{apacite}
\providecommand*{\code}[1]{\texttt{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{array}
\usepackage{longtable}
\usepackage{graphicx}
\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}

%%\input{theme/guidePreambleSweavel.tex} 
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%% end of paste

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}
%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}
\logo{\includegraphics[width=5mm]{theme/logomini}}

\makeatother

\usepackage{babel}
\usepackage{listings}
\renewcommand{\lstlistingname}{\inputencoding{latin9}Listing}

\begin{document}
%following is LyX shortcut \vb for bold upright math for matrices

\global\long\def\vb#1{\bm{\mathrm{#1}}}%

% tmpout directory must exist first
<<tmpout, echo=FALSE, include=FALSE, results=hide>>=
tdir <- "tmpout"
if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
@
% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/p, split=T, ae=F, height=4.5, width=7}

<<Roptions, include=F, results=hide>>=
opts.orig <- options()
options(width=100, prompt = " ", continue = "  ")
options(useFancyQuotes = FALSE)
set.seed(12345)
par.orig <- par(no.readonly = TRUE) 
pjmar <- c(4.1, 4.1, 1.5, 2.1)
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
pdf.options(onefile=F,family="Times",pointsize=12)
if(!file.exists("theme")) file.symlink("../../../../template/theme", "theme")
@
\title[getwd]{getwd: Where Am I? }
\author{Paul E. Johnson\inst{1} \and \inst{2}}
\institute[K.U.]{\inst{1}Department of Political Science\and \inst{2}Center for
Research Methods and Data Analysis, University of Kansas}
\date{2018}

\makebeamertitle

\AtBeginSection[]{
  \frame<beamer>{ 
    \frametitle{Outline}
    \tableofcontents[currentsection] 
  }
}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Outline}

\tableofcontents{}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Introduction}
\begin{itemize}
\item This part is about your operating system and how to understand the
way R \citep{RCore} interacts with it.
\item Vital Terms: 

\begin{enumerate}
\item path 
\item current working directory
\end{enumerate}
\item Paths may be either relative or absolute
\begin{itemize}
\item absolute path begins with highest OS level, such as ``C:/'' in Windows
\item relative begins with current working directory as starting point,
move ``down'' or ``up'' from there. 
\end{itemize}
\item Key R functions that are emphasized

\begin{itemize}
\item \code{getwd()}
\item \code{setwd()}
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{When R starts, Where are you?}
\begin{columns}[t]


\column{4cm}
\begin{itemize}
\item When you start R, ``where are you''?
\item This example: I started R in my Linux home directory, \url{/home/pauljohn}
\item getwd() $\Longleftrightarrow$ get Working Directory (WD)!
\end{itemize}

\column{8cm}

\includegraphics[width=8cm]{importfigs/terminal-01}
\end{columns}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Where Am I}
\begin{itemize}
\item Sorry: this is one of the worst problems of modern GUI. Users are
encouraged to give up control of their files.
\item Launch R from the 
\begin{itemize}
\item Windows R icon, or 
\item in the Mac Finder
\end{itemize}
\item Ask R what it thinks is your current working directory: 

<<>>=
getwd()
@
\item \textbf{Working Directory}: default directory where files are found
or written
\item If R thinks you are working with files in one place, but you may wish
it were working with files in another place, then necessary to reset
with \code{setwd()}

<<eval=F>>=
setwd("...some...folder...you...specify...correctly")
@
\item Some GUIs will have a pull down menu to change the working directory.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{You Choose: Relative or Absolute Paths}
\begin{itemize}
\item The output from getwd() is an absolute PATH. 
\item The FULL PATH would be (long, boring, typo-prone) like

Mac: ``/user/your-name/Documents/psych790/exercise-1/R''

Windows: ``C:/users/your-name-here/Documents/psych790/exercise-1/R''
\item We can use RELATIVE PATHs to make things a little easier

Relative path: If you don't specify an absolute, full path, R uses
the relative directory address to look for files and folders.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Why I prefer Relative Paths}
\begin{itemize}
\item If a student's R program begins with a path-setter, like
\end{itemize}
<<eval=F>>=
setwd("C:/users/pauljohn/Documents/schoolwork/stats/exercise1")
@

I cannot run that code ``as is''. However, if the student sends
me the ``exercise1'' project folder, and uses relative paths inside
the R code, then I can run it without editing.
\begin{itemize}
\item YES, I mean forward slashes, even in Windows.
\end{itemize}
\end{frame}
\begin{frame}[allowframebreaks]{Windows Slashes}

\begin{itemize}
\item R (and programming in general) uses back slash is an ``escape symbol'',

\begin{itemize}
\item ``\textbackslash n'' a New Line in a text string
\item ``\textbackslash t'' a TAB inserted
\end{itemize}
\item To avoid confusion, PATHS in Windows can be written with forward slashes.
\item Repeat, even in Windows, 

\begin{itemize}
\item \textbf{we do not type ``backslashes''. }
\end{itemize}
\item If you run ``getwd()'', and R says this:

\begin{quote}
``C:\textbackslash user\textbackslash your-name-here\textbackslash Documents''
\end{quote}
Use all of your \emph{mental super powers} to see that as 
\begin{quote}
``C:/user/your-name-here/Documents''
\end{quote}
\end{itemize}
\begin{quote}
Because if you want to specify a path in windows, you need to use
the forward slashes.
\end{quote}
%
\end{frame}
\begin{frame}[plain]{My Proposal}
\begin{itemize}
\item Keep a project folder
\item Subdirectories ``R'', ``data'', ``output'', ``workingdata''
\item Open an R script folder in the R folder.
\begin{itemize}
\item Imagine a happy future in which R automatically knows your working
directory!
\item Use a file manager to launch Emacs, Notepad++, or RStudio on your
R file and you will be in that happy place!
\end{itemize}
\item When you need to share your ``project'' to somebody else, Zip together
the whole folder, including the directory name, and send it. They
will be able to run without changing anything.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim,allowframebreaks]
\frametitle{Relative file paths}
\begin{columns}[t]


\column{6cm}

Suppose your directories are like so

\inputencoding{latin9}\begin{lstlisting}[tabsize=2]
school
	pols706
		project1
			R
			data
			output
\end{lstlisting}
\inputencoding{utf8}

\column{6cm}
\begin{itemize}
\item Write an R file in the R directory.
\item Start R with that working directory, then...
\item Use relative paths like ``../data'' or ``../output'' in R programs.
\end{itemize}
%
Oh my gosh. Two dots and a slash?

\end{columns}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{}

{\Large{}\code{{\Large{}../}} means go up one level}{\Large\par}
\begin{itemize}
\item Read data from \code{\textquotedbl ../data/whatever.xlsx\textquotedbl}
\item Write graphs to output, \code{\textquotedbl ../output/whatever.pdf\textquotedbl}. 
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim,allowframebreaks]
\frametitle{initProject() in kutils}
\begin{itemize}
\item Open R and set the working directory in a project folder. Run setwd
if you need to
\item I choose a directory named ``/tmp/proj'' for demonstration

<<eval=F>>=
library(kutils)
initProject()
@
\begin{Soutput}
> initProject()
Creating: data
Creating: workingdata
Creating: output
Creating: tmp
Creating: lit
Creating: writeup
Creating: R
Initialized empty shared Git repository in /tmp/proj/.git/
[master (root-commit) 7ef920d] Initialized project in /tmp/proj
 2 files changed, 5 insertions(+)  create mode 100644 ChangeLog
 create mode 100644 README.md
Please consider creating a remote repository to which this repo should be linked
[1] "/tmp/proj"
\end{Soutput} 
\item After that, the project should be laid out with several folders.
\item Close, R, and use the file manager to navigate into the project's
R folder
\item Open ``template.R'' with your editor
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Recall PDF example from a previous lecture?}

Put these lines into your R script

<<p5, echo=T, include=F, results=hide>>=
x <- rgamma(100, 1.5, 2.2)
y <- rnorm(100) + 0.2 * x
pdf("output/scatter1.pdf", height=6, width=6, paper="special")
plot(y ~ x, main="Scatterplot or Bust!")
dev.off() #turns off pdf output device
@

\def\Sweavesize{\scriptsize}
\input{tmpout/p-p5.tex}

That creates a pdf and writes it in the output. 

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Where is the big payoff here?}
\begin{itemize}
\item Easy re-production of graphs when the data changes slightly
\item Ability to mass-produce graphs. I've produced thousands of graph files,
which I could later snoop through to find something interesting.
\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks]
\frametitle{References}

\bibliographystyle{apalike2}
\bibliography{../../R}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Session}

<<sess10>>=
sessionInfo()
@

<<opts20, include=F>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
options(par.orig)
@

\end{frame}
\end{document}
