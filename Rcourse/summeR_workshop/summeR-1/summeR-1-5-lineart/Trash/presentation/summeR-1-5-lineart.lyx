#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{array}
\usepackage{longtable}
\usepackage{graphicx}
\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}

%%\input{theme/guidePreambleSweavel.tex} 
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%% end of paste

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}
%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}
\logo{\includegraphics[width=5mm]{theme/logomini}}
\end_preamble
\options aspectratio=1609
\use_default_options false
\begin_modules
logicalmkup
sweave
natbibapa
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style 
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch semboot
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\branch cfalvm
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%following is LyX shortcut 
\backslash
vb for bold upright math for matrices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% tmpout directory must exist first
\end_layout

\begin_layout Plain Layout

<<tmpout, echo=FALSE, include=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

tdir <- "tmpout"
\end_layout

\begin_layout Plain Layout

if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/p, split=T, ae=F, height=4.5, width=7}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, include=F, results=hide>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=100, prompt = " ", continue = "  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE)
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly = TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(4.1, 4.1, 1.5, 2.1)
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

if(!file.exists("theme")) file.symlink("../../../../template/theme", "theme")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
Line R-rt 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
lineart
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Johnson
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Center for Research Methods and Data Analysis 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
CRMDA
\end_layout

\end_inset


\end_layout

\begin_layout Date
2018
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
line art
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{graphics!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In papers and reports, we often need technical illustrations
\end_layout

\begin_layout Itemize
Publishers refer to illustrations of this sort as 
\begin_inset Quotes eld
\end_inset

line art
\begin_inset Quotes erd
\end_inset

, it must be supplied by authors in high-resolution graphics files (pdf,
 svg, tiff, etc)
\end_layout

\begin_layout Itemize
One can draw sketches by hand, of course, but almost nobody can make a publishab
le drawing by hand anymore
\end_layout

\begin_layout Itemize
R
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"

\end_inset

 offers a suite of functions that can be used to create artwork.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{"output/reciprocal-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{"output/cartesian-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{"output/calculus-log-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{"output/calculus-max-min-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{"importfigs/Normal-2009"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{"output/lineart-intervention-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/lineart-steps-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/lineart-steps-2"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/limits-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex4-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex3-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex1-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex1-2"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex1-3"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex1-4"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex2-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex2-2"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex2-3"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/convex2-4"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/integral2-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/integral3-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/integral4-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/integral5-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/integral6-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{From a Logistic Regression Lecture}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-2"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-3"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-4"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-5"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-6"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"output/logit-7"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Source Code Available}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The R files I used to produce these graphs are in the R folder distributed
 with this project
\end_layout

\begin_layout Itemize
The output files (displayed above) are in the output folder
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Create a Blank Sheet of Paper
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Get a separate 
\begin_inset Quotes eld
\end_inset

device
\begin_inset Quotes erd
\end_inset

 display window
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
dev.new()
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If in RStudio, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
dev.new()
\end_layout

\end_inset

 is blocked, must run
\end_layout

\begin_deeper
\begin_layout Itemize
MS windows: windows()
\end_layout

\begin_layout Itemize
Mac: quartz()
\end_layout

\begin_layout Itemize
Linux: X11()
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Create a drawing region inside there.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
I choose to have x scale go from -5 to +5 and y from -10 to 20
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<empty1,fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

plot(x = c(-5, 5), y = c(-10, 20))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{"tmpout/p-empty1.tex"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"tmpout/p-empty1"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Oops, I forgot to hide border, axes, labels, and points}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<empty2,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(x = c(-5, 5), y = c(-10, 20), type = "n", axes = FALSE, xlab = "",
 ylab = "")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{"tmpout/p-empty2.tex"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Result: blank sheet of paper}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{"tmpout/p-empty2"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Draw inside the Plot Area}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<margins1,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(2, 2, 2, 2))
\end_layout

\begin_layout Plain Layout

plot(c(-5, 5), y = c(-10, 20), type="n", xlab="X", ylab="Y")
\end_layout

\begin_layout Plain Layout

text(0 ,5, labels = "Plot Area", col = "red", cex = 3)
\end_layout

\begin_layout Plain Layout

box("plot", col="red")
\end_layout

\begin_layout Plain Layout

mtext("Figure", side = 1, line=3, adj=1.0, cex=3,   col="blue")
\end_layout

\begin_layout Plain Layout

Margins <- par("mar")
\end_layout

\begin_layout Plain Layout

Margins <- paste("mar = c(", paste0(Margins, collapse = ","), ")", sep="")
\end_layout

\begin_layout Plain Layout

mtext(Margins, side = 3, line = 2, adj = 0.0, cex = 1.5, col = "blue")
\end_layout

\begin_layout Plain Layout

box("figure",lty="dashed", col="blue")
\end_layout

\begin_layout Plain Layout

box("inner", lty="dotted", col="green")
\end_layout

\begin_layout Plain Layout

mtext("Outer Margin Area",
\end_layout

\begin_layout Plain Layout

     side = 1, line=0.4, adj=1.0, cex=1.5, col="green", outer=TRUE)
\end_layout

\begin_layout Plain Layout

box("outer", lty="solid", col="green")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OuterMargins <- par("oma")
\end_layout

\begin_layout Plain Layout

OuterMargins <-
\end_layout

\begin_layout Plain Layout

       paste("oma = c(", paste(OuterMargins, collapse=","), ")", sep="")
\end_layout

\begin_layout Plain Layout

mtext(OuterMargins,
\end_layout

\begin_layout Plain Layout

        side = 3, line=0.4, adj=0.0, cex=1.5, col="green", outer=TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{"tmpout/p-margins1"}
\end_layout

\end_inset


\end_layout

\begin_layout Column
4cm
\end_layout

\begin_layout Standard
Defaults
\end_layout

\begin_layout Itemize
margins asymmetric (measure: lines of text) 
\end_layout

\begin_layout Itemize
most commands we use write only in the Plot Area
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Here is the plan of attack}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Demonstrate various drawing functions in R.
 For each we need to
\end_layout

\begin_layout Enumerate
Run blank sheet creator
\end_layout

\begin_layout Enumerate
Draw on the sheet
\end_layout

\begin_layout Enumerate
Save or Throw away that sheet.
 
\end_layout

\begin_layout Enumerate
Start over.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
(There is no eraser!)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Inside the Plot Region
\end_layout

\begin_layout Subsection
points
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<fig=T,echo=T, height=2.5, width=4>>=
\end_layout

\begin_layout Plain Layout

plot(x = c(-5, 5), y = c(-10, 20), 
\end_layout

\begin_layout Plain Layout

    type = "n", xlab = "", ylab = "")
\end_layout

\begin_layout Plain Layout

points(x = c(-2, 1, 3), y = c(9, 7, 2))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create x and y vectors separately
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<points20,fig=T,include=F,echo=T,height=4,width=6>>=
\end_layout

\begin_layout Plain Layout

plot(x = c(-5, 5), y = c(-10, 20), type = "n", xlab = "", ylab = "")
\end_layout

\begin_layout Plain Layout

x <- c(-2, 1, 3)
\end_layout

\begin_layout Plain Layout

y <- c(9, 7, 2)
\end_layout

\begin_layout Plain Layout

points(x = x, y = y)
\end_layout

\begin_layout Plain Layout

## Same result as
\end_layout

\begin_layout Plain Layout

## points(x, y)
\end_layout

\begin_layout Plain Layout

## because of R positional matches
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-points20.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-points20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
bdraw() is a little function, it re-draws the graph area for me (same as
 typing plot command)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<points30,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw <- function() {
\end_layout

\begin_layout Plain Layout

    plot(x = c(-5, 5), y = c(-10, 20), 
\end_layout

\begin_layout Plain Layout

        type = "n", xlab = "", ylab = "")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x = x, y = y)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-points30.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-points30}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<points40,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x = x, y = y, col = "red")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-points40.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-points40}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<points50,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x = x, y = y, col = c("green", "blue", "red"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-points50.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-points50}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<points60,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x = x, y = y, col = gray.colors(3))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-points60.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-points60}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{RTFM}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
?points.
 See arguments
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
pch: plot symbol
\end_layout

\begin_layout Itemize
lwd: thickness of line in drawing
\end_layout

\begin_layout Itemize
cex: character expansion: 1 is default
\end_layout

\begin_layout Itemize
bg: background color for outline symbols
\end_layout

\end_deeper
\begin_layout Itemize
Run example(points)
\end_layout

\begin_layout Itemize
?points.formula
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
allows syntax like points(y ~ x, data = dat)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Try some practices}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<points70,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(x = c(-5, 5), y = c(-10, 20), type = "n", xlab = "", ylab = "")
\end_layout

\begin_layout Plain Layout

x <- c(-2, 1, 3)
\end_layout

\begin_layout Plain Layout

y <- c(9, 7, 2)
\end_layout

\begin_layout Plain Layout

points(x = x, y = y, cex = c(1, 2, 3), col = c("orange", "red", "deeppink"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-points70.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-points70}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The plot function shortcut $
\backslash
ldots$}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I want you to understand you can draw points on top of any plot.
\end_layout

\begin_layout Itemize
But if you only want points, there is a shortcut
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<fig=T,echo=T>>=
\end_layout

\begin_layout Plain Layout

plot(y ~ x, axes = FALSE, xlab = "", ylab = "")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Points worth mentioning}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
points() are drawn centered on the coordinates in x and y
\end_layout

\begin_layout Itemize
for larger symbols, adjust cex
\end_layout

\begin_layout Itemize
for darker lines in outlines of symbols, adjust lwd
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
arrows
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Arrows.
 Learn by doing!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<arrows10,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

arrows(x0 = -1, y0 = -1, x1 = 2, y1 = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-arrows10.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-arrows10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Arrows.
 Smaller fins}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<arrows20,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

arrows(x0 = -1, y0 = -1, x1 = 2, y1 = 4, length = 0.1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-arrows20.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-arrows20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Code 1 2 3}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<arrows40,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

# code 3 is both ways
\end_layout

\begin_layout Plain Layout

arrows(x0 = -1, y0 = -1, x1 = 2, y1 = 4, length = 0.1, code = 3)
\end_layout

\begin_layout Plain Layout

# code 2 points forwards
\end_layout

\begin_layout Plain Layout

arrows(x0 = -4, y0 = -4, x1 = -2, y1 = 4, length = 0.3, code = 2)
\end_layout

\begin_layout Plain Layout

# code 1 is backwards
\end_layout

\begin_layout Plain Layout

arrows(x0 = 4.5, y0 = -8, x1 = -3, y1 = 18, length = 0.15, code = 1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-arrows40.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-arrows40}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Use one arrows() command}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I tried to show off, but discovered something that looks rather like a weakness
 in arrows(), possibly even a bug.
\end_layout

\begin_layout Itemize
My idea was to stack together the input data
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<arrows50,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

x0 <- c(-1, -4, 4.5)
\end_layout

\begin_layout Plain Layout

y0 <- c(-1, -4, -8)
\end_layout

\begin_layout Plain Layout

x1 <- c(2, -2, -3)
\end_layout

\begin_layout Plain Layout

y1 <- c(4, 4, 18)
\end_layout

\begin_layout Plain Layout

mylengths <- c(0.2, 0.3, 0.15)
\end_layout

\begin_layout Plain Layout

mycodes <- c(3, 2, 1)
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

arrows(x0 = x0, y0 = y0, x1 = x1, y1 = y1, length = mylengths, code = mycodes)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-arrows50.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
only the first elements in mylengths and mycodes obeyed.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-arrows50}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
text
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Text is like points, except $
\backslash
ldots$}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
text needs labels, one for each location
\end_layout

\begin_layout Itemize
positioning text can be tricky because sometimes we want text above, below,
 or on side of a point.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<text10,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

x <- c(-1, 2, 1, 3); y <- c(8, -3, 6, 1)
\end_layout

\begin_layout Plain Layout

labels <- c("Stallone", "Schwartzenegger", "Redford", "Hoffman")
\end_layout

\begin_layout Plain Layout

mycolors <- rainbow(4)
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x, y)
\end_layout

\begin_layout Plain Layout

text(x = x, y = y, labels = labels, col = mycolors, cex = c(1.2, 1.7, 1.3,
 1))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-text10.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-text10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Text labels overlap points, if you are not careful}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<text30,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x, y)
\end_layout

\begin_layout Plain Layout

text(x = x, y = y, labels = labels, col = mycolors, cex = c(1.2, 1.7, 1.3,
 1), pos = 3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Default text() has pos = 1.
\end_layout

\begin_layout Standard
pos = 3 moves text above the point
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-text30.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-text30}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{offset needed to write "under" the points}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<text40,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

points(x, y)
\end_layout

\begin_layout Plain Layout

text(x = x, y = y, labels = labels, col = mycolors, cex = c(1.2, 1.7, 1.3,
 1), pos = 1, offset = 0.7)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-text40.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-text40}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
offset units are 
\begin_inset Quotes eld
\end_inset

character widths
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
lines, curves
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{offset needed to write "under" the points}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
lines()
\end_layout

\end_inset

: will 
\begin_inset Quotes eld
\end_inset

connect the dots
\begin_inset Quotes erd
\end_inset

 and do so with some smoothing for pleasant curve
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
segments()
\end_layout

\end_inset

: straight line connect the dots, no smoothing
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
abline()
\end_layout

\end_inset

: a 
\begin_inset Quotes eld
\end_inset

shortcut
\begin_inset Quotes erd
\end_inset

 function to draw some commonly used straight lines
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
curve()
\end_layout

\end_inset

: a 
\begin_inset Quotes eld
\end_inset

shortcut
\begin_inset Quotes erd
\end_inset

 function for drawing curves for functions of x.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Plotting Functions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In statistics, we often find transformations like 
\begin_inset Formula $\mathrm{exp}(x)$
\end_inset

 or 
\begin_inset Formula $\mathrm{log}(x)$
\end_inset


\end_layout

\begin_layout Itemize
A good way to learn about them is to plot them with R's curve function
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
curve()
\end_layout

\end_inset

 creates its own graphic device, so we don't need to run plot first.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<curve10,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

curve(exp(x), from = -2, to = 5, xlab = "Don't set x max too large", main
 = "The exponential function")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-curve10.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-curve10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Natural Logarithm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<curve20,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

curve(log(x), from = 0.00001, to = 10, xlab = "Note minimum x is 0.00001.
 Guess why?", main = "log is the natural log in R")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-curve20.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-curve20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can "Overlay" curves}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The first curve we draw sets the scale.
 
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xlim
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ylim
\end_layout

\end_inset

: arguments so that the scale is big enough to show the interesting parts
 of both curves.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<curve30,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

curve(log(x), from = 0.00001, to = 10, xlab = "The domain is now -5, 5",
 main = "Compare exp and log", xlim = c(-5, 5), ylim = c(-12, 20))
\end_layout

\begin_layout Plain Layout

curve(exp(x), from = -5, to = 5, add = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-curve30.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-curve30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Insert light reference lines with abline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<curve31,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

curve(log(x), from = 0.00001, to = 10, xlab = "The domain is now -5, 5",
 main = "Compare exp and log", xlim = c(-5, 5), ylim = c(-12, 20))
\end_layout

\begin_layout Plain Layout

curve(exp(x), from = -5, to = 5, add = TRUE)
\end_layout

\begin_layout Plain Layout

abline(v = 0, col = "gray80")
\end_layout

\begin_layout Plain Layout

abline(h = 0, col = "gray80")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-curve31.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-curve31}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What is the Natural Logarithm?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<curve40,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

curve(log(x), from = 0.00001, to = 5, xlab = "x", main = "Natural and base
 10 log")
\end_layout

\begin_layout Plain Layout

curve(log(x, 10), from = 0.00001, to = 5, add = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-curve40.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-curve40}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I cannot tell those apart!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<curve50,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

curve(log(x), from = 0.00001, to = 5, xlab = "x", main = "Natural and base
 10 log")
\end_layout

\begin_layout Plain Layout

curve(log(x, 10), from = 0.00001, to = 5, add = TRUE, lty = 2, col = "blue")
\end_layout

\begin_layout Plain Layout

text(4, -1, "Dotted is base 10 log")
\end_layout

\begin_layout Plain Layout

text(0, 1, "Solid line is natural log", pos = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-curve50.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-curve50}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{My favorite use of lines(): draw probability density functions}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pdf05,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

x <- seq(-3, 3, length.out = 200)
\end_layout

\begin_layout Plain Layout

xprob <- dnorm(x, m = 0, s = 1)
\end_layout

\begin_layout Plain Layout

plot(xprob ~ x, type = "n", xlab = "Domain of x", ylab = "Probability Density",
 main = "Normal")
\end_layout

\begin_layout Plain Layout

lines(xprob ~ x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-pdf05.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-pdf05}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
dnorm is R's function to calculate probability density of the normal
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{plot type = "l" is a shortcut for that}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pdf10,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(xprob ~ x, type = "l", xlab = "Domain of x", ylab = "Probability Density",
 main = "Normal")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-pdf10.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-pdf10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Compare densities of 2 different distributions}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pdf20,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(xprob ~ x, type = "l", xlab = "Domain of x", ylab = "Probability Density",
 main = "Normal")
\end_layout

\begin_layout Plain Layout

x2prob <- dlogis(x, location = 0, scale = 1)
\end_layout

\begin_layout Plain Layout

lines(x2prob ~ x, lty = 3, col = "blue")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-pdf20.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-pdf20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Insert a legend}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pdf30,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

plot(xprob ~ x, type = "l", xlab = "Domain of x", ylab = "Probability Density",
 main = "Normal")
\end_layout

\begin_layout Plain Layout

x2prob <- dlogis(x, location = 0, scale = 1)
\end_layout

\begin_layout Plain Layout

lines(x2prob ~ x, lty = 3, col = "blue")
\end_layout

\begin_layout Plain Layout

legend("topleft", legend = c("Normal", "Logistic"), lty = c(1, 3), col =
 c("black", "blue"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I've found that getting a legend 
\begin_inset Quotes eld
\end_inset

just right
\begin_inset Quotes erd
\end_inset

 can be very frustrating.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-pdf30.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-pdf30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
polygon
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{color in shapes}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you can supply the points, R can draw a smooth, 
\begin_inset Quotes eld
\end_inset

connect-the-dots
\begin_inset Quotes erd
\end_inset

 curve, and decorate the insides.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<poly10,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

x <- c(-3, -1.5, -1.8, 0, 2, -3)
\end_layout

\begin_layout Plain Layout

y <- c(2,   10,    0.5, -8, 5, 2)
\end_layout

\begin_layout Plain Layout

polygon(x, y)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-poly10.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-poly10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Whoops! I forgot that Splash of Color!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you can supply the points, R can draw a smooth, 
\begin_inset Quotes eld
\end_inset

connect-the-dots
\begin_inset Quotes erd
\end_inset

 curve, and decorate the insides.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<poly20,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

polygon(x, y, col = "pink", border = "red")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-poly20.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-poly20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Play with polygons}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
density: Instead of coloring background, can draw lines on it.
\end_layout

\begin_layout Itemize
angle: direction of lines inside polygon
\end_layout

\begin_layout Itemize
If you can supply the points, R can draw a smooth, 
\begin_inset Quotes eld
\end_inset

connect-the-dots
\begin_inset Quotes erd
\end_inset

 curve, and decorate the insides.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<poly30,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

polygon(x, y, col = "red", border = "black", density = 10, angle = 0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-poly30.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-poly30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
rectangles
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The rect() function is almost identical to polygon}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
rect wants 4 arguments, the corner coordinates
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<rect10,fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

bdraw()
\end_layout

\begin_layout Plain Layout

rect(xleft = -2, ybottom = -6, xright = 3, ytop = 7, col = "blue", border
 = "black", density = 10, angle = 45)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-rect10.tex}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{tmpout/p-rect10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
plotmath
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Sometimes a well placed $
\backslash
sigma$ or $
\backslash
psi$ pushes your plot over the top}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I don't want to spend a lot of time on this, because it is almost mind-numbingly
 complicated in some ways, but let's just run an example.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pm10, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

plot(1:10, 1:10, type="n")
\end_layout

\begin_layout Plain Layout

text(4, 5, expression(paste(alpha  ," is alpha")))
\end_layout

\begin_layout Plain Layout

text(7, 3, expression(paste(beta * alpha, " is beta * alpha")))
\end_layout

\begin_layout Plain Layout

text(3, 6, expression(paste(frac(beta, alpha), " is frac(beta,alpha)")))
\end_layout

\begin_layout Plain Layout

text(2,9, expression(paste(hat(y)[i] == hat(beta)[0]+hat(beta)[1]*x[1])))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/p-pm10.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I also like $
\backslash
beta$, $
\backslash
alpha$ and $
\backslash
Sigma$}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=9cm]{tmpout/p-pm10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout

  
\backslash
frametitle{A Few plotmath Tips}
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

    
\backslash
item Two Equal Signs (== gives back =)
\end_layout

\begin_layout Plain Layout

    
\backslash
item Use hard brackets [] for subscripts, 
\backslash
textasciicircum~ for superscripts
\end_layout

\begin_layout Plain Layout

    
\backslash
item Want * to show? Type 
\backslash
%*
\backslash
%
\end_layout

\begin_layout Plain Layout

    
\backslash
item Want centered $
\backslash
cdot$ for multiplication? Type  cdot
\end_layout

\begin_layout Plain Layout

    
\backslash
item Want $(x-1,y_1)$? Type group("(", list(x[1], y[1]), ")")
\end_layout

\begin_layout Plain Layout

  
\backslash
end{itemize}
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Are you looking for skills to practice?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What To Practice Today?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Maybe this will get you started
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T,eval=F>>=
\end_layout

\begin_layout Plain Layout

plot(1:10, 1:10, type = "n")
\end_layout

\begin_layout Plain Layout

abline(h = 2:9, v = c(3, 5, 7), col = "gray80")
\end_layout

\begin_layout Plain Layout

arrows(x0 = 2, y0 = 3, x1 = 9, y1 = 2, length = 0.1)
\end_layout

\begin_layout Plain Layout

text(3, 7, "Kansas in Summer is like Paris", pos = 4)
\end_layout

\begin_layout Plain Layout

text(3.2, 6.6, "if Paris were hot and humid", pos = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Sketch a technical illustration on paper
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Figure out how to draw it by starting with a blank device and adding lines,
 rectangles, etc.
\end_layout

\end_deeper
\begin_layout Itemize
Step through the code that generates the graphs in section 1 of this presentatio
n.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Leave SAVEME <- FALSE if you want on-screen graphics.
\end_layout

\end_deeper
\begin_layout Itemize
If you have R for Windows or Macintosh, lets find the keystrokes to 
\begin_inset Quotes eld
\end_inset

step next
\begin_inset Quotes erd
\end_inset

 through one of those examples.
\end_layout

\begin_layout Itemize
Test examples from my Website's WorkingExamples folder.
 
\begin_inset CommandInset href
LatexCommand href
name "distributions-normalAndTCompared.R"
target "http://pj.freefaculty.org/R/WorkingExamples/distributions-normalAndTCompared.R"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "distributions-GammaVersusNormal-1.R"
target "http://pj.freefaculty.org/R/WorkingExamples/distributions-GammaVersusNormal-1.R"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{References}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../../R"
options "apalike2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Session}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sess10>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts20, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

options(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
