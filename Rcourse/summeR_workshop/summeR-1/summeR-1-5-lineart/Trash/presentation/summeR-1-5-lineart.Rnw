%% LyX 2.2.2 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[11pt,english]{beamer}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}
\usepackage[active]{srcltx}
\usepackage{babel}
\ifx\hypersetup\undefined
  \AtBeginDocument{%
    \hypersetup{unicode=true}
  }
\else
  \hypersetup{unicode=true}
\fi
\usepackage{breakurl}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
 % this default might be overridden by plain title style
 \newcommand\makebeamertitle{\frame{\maketitle}}%
 % (ERT) argument for the TOC
 \AtBeginDocument{%
   \let\origtableofcontents=\tableofcontents
   \def\tableofcontents{\@ifnextchar[{\origtableofcontents}{\gobbletableofcontents}}
   \def\gobbletableofcontents#1{\origtableofcontents}
 }
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@
\newcommand{\code}[1]{\texttt{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{dcolumn}
\usepackage{booktabs}

\usepackage{Sweavel}


% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


%\setbeamercovered{transparent}
% or whatever (possibly just delete it)

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\footnotesize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}

\usepackage{graphicx}
\usepackage{listings}
\lstset{tabsize=2, breaklines=true,style=Rstyle}
\usetheme{Antibes}

%%only for presentation
\mode<presentation>
\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}


\expandafter\def\expandafter\insertshorttitle\expandafter{%
 \insertshorttitle\hfill\insertframenumber\,/\,\inserttotalframenumber}

\makeatother

\begin{document}
<<echo=F>>=
dir.create("plots", showWarnings=F)
@

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=plots/p,split=F,ae=F,height=4,width=6}

<<Roptions, echo=F>>=
options(device = pdf)
options(width=160, prompt="> ", continue="  ")
options(useFancyQuotes = FALSE) 
#set.seed(12345)
op <- par() 
pjmar <- c(5.1, 5.1, 1.5, 2.1) 
#pjmar <- par("mar")
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12)))
pdf.options(onefile=F,family="Times",pointsize=12)
@

%\beamerdefaultoverlayspecification{<+->}

\AtBeginSection[]{
  \frame<beamer>{ 
    \frametitle{Outline}   
    \tableofcontents[currentsection,currentsubsection] 
  }
}

\title{lineaRt}

\author{Paul E. Johnson\inst{1} \and \inst{2}}

\institute[K.U.]{\inst{1}Department of Political Science\and \inst{2}Center for
Research Methods and Data Analysis, University of Kansas}

\date[2017]{\today}
\makebeamertitle

\section{line art}

\begin{frame}
\frametitle{graphics!}
\begin{itemize}
\item In papers and reports, we often need technical illustrations
\item Publishers refer to illustrations of this sort as ``line art'',
it must be supplied by authors in high-resolution graphics files (pdf,
svg, tiff, etc)
\item One can draw sketches by hand, of course, but almost nobody can make
a publishable drawing by hand anymore
\item R offers a suite of functions that can be used to create artwork.
\end{itemize}
\end{frame}

\section{Examples}

\begin{frame}
\frametitle{}

\includegraphics[width=7cm]{"../output/reciprocal-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=7cm]{"../output/cartesian-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=7cm]{"../output/calculus-log-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=7cm]{"../output/calculus-max-min-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=7cm]{"importfigs/Normal-2009"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=8cm]{"../output/lineart-intervention-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/lineart-steps-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/lineart-steps-2"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/limits-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex4-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex3-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex1-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex1-2"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex1-3"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex1-4"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex2-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex2-2"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex2-3"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/convex2-4"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/integral2-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/integral3-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/integral4-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/integral5-1"}

\end{frame}

\begin{frame}
\frametitle{}

\includegraphics[width=10cm]{"../output/integral6-1"}

\end{frame}

\begin{frame}[plain]
\frametitle{From a Logistic Regression Lecture}

\includegraphics[width=10cm]{"../output/logit-1"}

\end{frame}

\begin{frame}[plain]
\frametitle{}

\includegraphics[width=10cm]{"../output/logit-2"}

\end{frame}

\begin{frame}[plain]
\frametitle{}

\includegraphics[width=10cm]{"../output/logit-3"}

\end{frame}

\begin{frame}[plain]
\frametitle{}

\includegraphics[width=10cm]{"../output/logit-4"}

\end{frame}

\begin{frame}[plain]
\frametitle{}

\includegraphics[width=10cm]{"../output/logit-5"}

\end{frame}

\begin{frame}[plain]
\frametitle{}

\includegraphics[width=10cm]{"../output/logit-6"}

\end{frame}

\begin{frame}[plain]
\frametitle{}

\includegraphics[width=10cm]{"../output/logit-7"}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Source Code Available}
\begin{itemize}
\item The R files I used to produce these graphs are in the R folder distributed
with this project
\item The output files (displayed above) are in the output folder
\end{itemize}
\end{frame}

\section{Create a Blank Sheet of Paper}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{}
\begin{itemize}
\item Get a separate ``device'' display window

\begin{itemize}
\item \code{dev.new()}
\item If in RStudio, \code{dev.new()} is blocked, must run
\begin{itemize}
\item MS windows: windows()
\item Mac: quartz()
\item Linux: X11()
\end{itemize}
\end{itemize}
\item Create a drawing region inside there. 

\begin{itemize}
\item I choose to have x scale go from -5 to +5 and y from -10 to 20
\end{itemize}
\end{itemize}
<<empty1,fig=T, include=F>>=
plot(x = c(-5, 5), y = c(-10, 20))
@

\input{"plots/p-empty1.tex"}

\includegraphics[width=10cm]{"plots/p-empty1"}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Oops, I forgot to hide border, axes, labels, and points}

<<empty2,fig=T,include=F>>=
plot(x = c(-5, 5), y = c(-10, 20), type = "n", axes = FALSE, xlab = "", ylab = "")
@

\input{"plots/p-empty2.tex"}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Result: blank sheet of paper}

\includegraphics[width=10cm]{"plots/p-empty2"}

\end{frame}

\begin{frame}[containsverbatim,allowframebreaks]
\frametitle{Draw inside the Plot Area}

<<margins1,fig=T,include=F>>=
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(2, 2, 2, 2))
plot(c(-5, 5), y = c(-10, 20), type="n", xlab="X", ylab="Y")
text(0 ,5, labels = "Plot Area", col = "red", cex = 3)
box("plot", col="red")
mtext("Figure", side = 1, line=3, adj=1.0, cex=3,   col="blue")
Margins <- par("mar")
Margins <- paste("mar = c(", paste0(Margins, collapse = ","), ")", sep="")
mtext(Margins, side = 3, line = 2, adj = 0.0, cex = 1.5, col = "blue")
box("figure",lty="dashed", col="blue")
box("inner", lty="dotted", col="green")
mtext("Outer Margin Area",
     side = 1, line=0.4, adj=1.0, cex=1.5, col="green", outer=TRUE)
box("outer", lty="solid", col="green")

OuterMargins <- par("oma")
OuterMargins <-
       paste("oma = c(", paste(OuterMargins, collapse=","), ")", sep="")
mtext(OuterMargins,
        side = 3, line=0.4, adj=0.0, cex=1.5, col="green", outer=TRUE)
@
\begin{columns}[t]


\column{8cm}

\includegraphics[width=8cm]{"plots/p-margins1"}

\column{4cm}

Defaults
\begin{itemize}
\item margins asymmetric (measure: lines of text) 
\item most commands we use write only in the Plot Area
\end{itemize}
\end{columns}

\end{frame}

\begin{frame}
\frametitle{Here is the plan of attack}

Demonstrate various drawing functions in R. For each we need to
\begin{enumerate}
\item Run blank sheet creator
\item Draw on the sheet
\item Save or Throw away that sheet. 
\item Start over.

(There is no eraser!)
\end{enumerate}
\end{frame}

\section{Inside the Plot Region}

\subsection{points}

\begin{frame}[containsverbatim, allowframebreaks]

<<fig=T,echo=T, height=2.5, width=4>>=
plot(x = c(-5, 5), y = c(-10, 20), 
    type = "n", xlab = "", ylab = "")
points(x = c(-2, 1, 3), y = c(9, 7, 2))
@

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]

Create x and y vectors separately

<<points20,fig=T,include=F,echo=T,height=4,width=6>>=
plot(x = c(-5, 5), y = c(-10, 20), type = "n", xlab = "", ylab = "")
x <- c(-2, 1, 3)
y <- c(9, 7, 2)
points(x = x, y = y)
## Same result as
## points(x, y)
## because of R positional matches
@

\input{plots/p-points20.tex}
\includegraphics[width=8cm]{plots/p-points20}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]

bdraw() is a little function, it re-draws the graph area for me (same
as typing plot command)

<<points30,fig=T,echo=T,include=F>>=
bdraw <- function() {
    plot(x = c(-5, 5), y = c(-10, 20), 
        type = "n", xlab = "", ylab = "")
}
bdraw()
points(x = x, y = y)
@

\input{plots/p-points30.tex}
\includegraphics[width=8cm]{plots/p-points30}\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]

<<points40,fig=T,echo=T,include=F>>=
bdraw()
points(x = x, y = y, col = "red")
@

\input{plots/p-points40.tex}
\includegraphics[width=8cm]{plots/p-points40}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]

<<points50,fig=T,echo=T,include=F>>=
bdraw()
points(x = x, y = y, col = c("green", "blue", "red"))
@

\input{plots/p-points50.tex}
\includegraphics[width=8cm]{plots/p-points50}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]

<<points60,fig=T,echo=T,include=F>>=
bdraw()
points(x = x, y = y, col = gray.colors(3))
@

\input{plots/p-points60.tex}
\includegraphics[width=8cm]{plots/p-points60}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{RTFM}
\begin{itemize}
\item ?points. See arguments

\begin{itemize}
\item pch: plot symbol
\item lwd: thickness of line in drawing
\item cex: character expansion: 1 is default
\item bg: background color for outline symbols
\end{itemize}
\item Run example(points)
\item ?points.formula

\begin{itemize}
\item allows syntax like points(y \textasciitilde{} x, data = dat)
\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Try some practices}

<<points70,fig=T,echo=T,include=F>>=
plot(x = c(-5, 5), y = c(-10, 20), type = "n", xlab = "", ylab = "")
x <- c(-2, 1, 3)
y <- c(9, 7, 2)
points(x = x, y = y, cex = c(1, 2, 3), col = c("orange", "red", "deeppink"))
@

\input{plots/p-points70.tex}
\includegraphics[width=8cm]{plots/p-points70}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{The plot function shortcut $\ldots$}
\begin{itemize}
\item I want you to understand you can draw points on top of any plot.
\item But if you only want points, there is a shortcut
\end{itemize}
<<fig=T,echo=T>>=
plot(y ~ x, axes = FALSE, xlab = "", ylab = "")
@

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Points worth mentioning}
\begin{itemize}
\item points() are drawn centered on the coordinates in x and y
\item for larger symbols, adjust cex
\item for darker lines in outlines of symbols, adjust lwd
\end{itemize}
\end{frame}

\subsection{arrows}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Arrows. Learn by doing!}

<<arrows10,fig=T,echo=T,include=F>>=
bdraw()
arrows(x0 = -1, y0 = -1, x1 = 2, y1 = 4)
@

\input{plots/p-arrows10.tex}
\includegraphics[width=8cm]{plots/p-arrows10}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Arrows. Smaller fins}

<<arrows20,fig=T,echo=T,include=F>>=
bdraw()
arrows(x0 = -1, y0 = -1, x1 = 2, y1 = 4, length = 0.1)
@

\input{plots/p-arrows20.tex}
\includegraphics[width=8cm]{plots/p-arrows20}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Code 1 2 3}

<<arrows40,fig=T,echo=T,include=F>>=
bdraw()
# code 3 is both ways
arrows(x0 = -1, y0 = -1, x1 = 2, y1 = 4, length = 0.1, code = 3)
# code 2 points forwards
arrows(x0 = -4, y0 = -4, x1 = -2, y1 = 4, length = 0.3, code = 2)
# code 1 is backwards
arrows(x0 = 4.5, y0 = -8, x1 = -3, y1 = 18, length = 0.15, code = 1)
@

\input{plots/p-arrows40.tex}
\includegraphics[width=8cm]{plots/p-arrows40}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Use one arrows() command}
\begin{itemize}
\item I tried to show off, but discovered something that looks rather like
a weakness in arrows(), possibly even a bug.
\item My idea was to stack together the input data
\end{itemize}
<<arrows50,fig=T,echo=T,include=F>>=
x0 <- c(-1, -4, 4.5)
y0 <- c(-1, -4, -8)
x1 <- c(2, -2, -3)
y1 <- c(4, 4, 18)
mylengths <- c(0.2, 0.3, 0.15)
mycodes <- c(3, 2, 1)
bdraw()
arrows(x0 = x0, y0 = y0, x1 = x1, y1 = y1, length = mylengths, code = mycodes)
@

\input{plots/p-arrows50.tex}

only the first elements in mylengths and mycodes obeyed.

\includegraphics[width=8cm]{plots/p-arrows50}

\end{frame}

\subsection{text}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Text is like points, except $\ldots$}
\begin{itemize}
\item text needs labels, one for each location
\item positioning text can be tricky because sometimes we want text above,
below, or on side of a point.
\end{itemize}
<<text10,fig=T,echo=T,include=F>>=
x <- c(-1, 2, 1, 3); y <- c(8, -3, 6, 1)
labels <- c("Stallone", "Schwartzenegger", "Redford", "Hoffman")
mycolors <- rainbow(4)
bdraw()
points(x, y)
text(x = x, y = y, labels = labels, col = mycolors, cex = c(1.2, 1.7, 1.3, 1))
@

\input{plots/p-text10.tex}
\includegraphics[width=8cm]{plots/p-text10}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Text labels overlap points, if you are not careful}

<<text30,fig=T,echo=T,include=F>>=
bdraw()
points(x, y)
text(x = x, y = y, labels = labels, col = mycolors, cex = c(1.2, 1.7, 1.3, 1), pos = 3)
@

Default text() has pos = 1.

pos = 3 moves text above the point\input{plots/p-text30.tex}
\includegraphics[width=8cm]{plots/p-text30}\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{offset needed to write "under" the points}

<<text40,fig=T,echo=T,include=F>>=
bdraw()
points(x, y)
text(x = x, y = y, labels = labels, col = mycolors, cex = c(1.2, 1.7, 1.3, 1), pos = 1, offset = 0.7)
@

\input{plots/p-text40.tex}
\includegraphics[width=8cm]{plots/p-text40}

offset units are ``character widths''

\end{frame}

\subsection{lines, curves}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{offset needed to write "under" the points}
\begin{itemize}
\item \code{lines()}: will ``connect the dots'' and do so with some smoothing
for pleasant curve
\item \code{segments()}: straight line connect the dots, no smoothing
\item \code{abline()}: a ``shortcut'' function to draw some commonly
used straight lines
\item \code{curve()}: a ``shortcut'' function for drawing curves for
functions of x.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Plotting Functions}
\begin{itemize}
\item In statistics, we often find transformations like $\mathrm{exp}(x)$
or $\mathrm{log}(x)$
\item A good way to learn about them is to plot them with R's curve function
\item \code{curve()} creates its own graphic device, so we don't need to
run plot first.
\end{itemize}
<<curve10,fig=T,echo=T,include=F>>=
curve(exp(x), from = -2, to = 5, xlab = "Don't set x max too large", main = "The exponential function")
@

\input{plots/p-curve10.tex}
\includegraphics[width=8cm]{plots/p-curve10}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{The Natural Logarithm}

<<curve20,fig=T,echo=T,include=F>>=
curve(log(x), from = 0.00001, to = 10, xlab = "Note minimum x is 0.00001. Guess why?", main = "log is the natural log in R")
@

\input{plots/p-curve20.tex}
\includegraphics[width=8cm]{plots/p-curve20}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Can "Overlay" curves}
\begin{itemize}
\item The first curve we draw sets the scale. 
\item \code{xlim}, \code{ylim}: arguments so that the scale is big enough
to show the interesting parts of both curves.
\end{itemize}
<<curve30,fig=T,echo=T,include=F>>=
curve(log(x), from = 0.00001, to = 10, xlab = "The domain is now -5, 5", main = "Compare exp and log", xlim = c(-5, 5), ylim = c(-12, 20))
curve(exp(x), from = -5, to = 5, add = TRUE)
@

\input{plots/p-curve30.tex}
\includegraphics[width=8cm]{plots/p-curve30}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Insert light reference lines with abline}

<<curve31,fig=T,echo=T,include=F>>=
curve(log(x), from = 0.00001, to = 10, xlab = "The domain is now -5, 5", main = "Compare exp and log", xlim = c(-5, 5), ylim = c(-12, 20))
curve(exp(x), from = -5, to = 5, add = TRUE)
abline(v = 0, col = "gray80")
abline(h = 0, col = "gray80")
@

\input{plots/p-curve31.tex}
\includegraphics[width=8cm]{plots/p-curve31}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{What is the Natural Logarithm?}

<<curve40,fig=T,echo=T,include=F>>=
curve(log(x), from = 0.00001, to = 5, xlab = "x", main = "Natural and base 10 log")
curve(log(x, 10), from = 0.00001, to = 5, add = TRUE)
@

\input{plots/p-curve40.tex}
\includegraphics[width=8cm]{plots/p-curve40}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{I cannot tell those apart!}

<<curve50,fig=T,echo=T,include=F>>=
curve(log(x), from = 0.00001, to = 5, xlab = "x", main = "Natural and base 10 log")
curve(log(x, 10), from = 0.00001, to = 5, add = TRUE, lty = 2, col = "blue")
text(4, -1, "Dotted is base 10 log")
text(0, 1, "Solid line is natural log", pos = 4)
@

\input{plots/p-curve50.tex}
\includegraphics[width=8cm]{plots/p-curve50}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{My favorite use of lines(): draw probability density functions}

<<pdf05,fig=T,echo=T,include=F>>=
x <- seq(-3, 3, length.out = 200)
xprob <- dnorm(x, m = 0, s = 1)
plot(xprob ~ x, type = "n", xlab = "Domain of x", ylab = "Probability Density", main = "Normal")
lines(xprob ~ x)
@

\input{plots/p-pdf05.tex}
\includegraphics[width=8cm]{plots/p-pdf05}

dnorm is R's function to calculate probability density of the normal

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{plot type = "l" is a shortcut for that}

<<pdf10,fig=T,echo=T,include=F>>=
plot(xprob ~ x, type = "l", xlab = "Domain of x", ylab = "Probability Density", main = "Normal")
@

\input{plots/p-pdf10.tex}
\includegraphics[width=8cm]{plots/p-pdf10}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Compare densities of 2 different distributions}

<<pdf20,fig=T,echo=T,include=F>>=
plot(xprob ~ x, type = "l", xlab = "Domain of x", ylab = "Probability Density", main = "Normal")
x2prob <- dlogis(x, location = 0, scale = 1)
lines(x2prob ~ x, lty = 3, col = "blue")
@

\input{plots/p-pdf20.tex}
\includegraphics[width=8cm]{plots/p-pdf20}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Insert a legend}

<<pdf30,fig=T,echo=T,include=F>>=
plot(xprob ~ x, type = "l", xlab = "Domain of x", ylab = "Probability Density", main = "Normal")
x2prob <- dlogis(x, location = 0, scale = 1)
lines(x2prob ~ x, lty = 3, col = "blue")
legend("topleft", legend = c("Normal", "Logistic"), lty = c(1, 3), col = c("black", "blue"))
@

I've found that getting a legend ``just right'' can be very frustrating.

\input{plots/p-pdf30.tex}
\includegraphics[width=8cm]{plots/p-pdf30}

\end{frame}

\subsection{polygon}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{color in shapes}
\begin{itemize}
\item If you can supply the points, R can draw a smooth, ``connect-the-dots''
curve, and decorate the insides.
\end{itemize}
<<poly10,fig=T,include=F>>=
bdraw()
x <- c(-3, -1.5, -1.8, 0, 2, -3)
y <- c(2,   10,    0.5, -8, 5, 2)
polygon(x, y)
@

\input{plots/p-poly10.tex}
\includegraphics[width=8cm]{plots/p-poly10}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Whoops! I forgot that Splash of Color!}
\begin{itemize}
\item If you can supply the points, R can draw a smooth, ``connect-the-dots''
curve, and decorate the insides.
\end{itemize}
<<poly20,fig=T,include=F>>=
bdraw()
polygon(x, y, col = "pink", border = "red")
@

\input{plots/p-poly20.tex}
\includegraphics[width=8cm]{plots/p-poly20}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Play with polygons}
\begin{itemize}
\item density: Instead of coloring background, can draw lines on it.
\item angle: direction of lines inside polygon
\item If you can supply the points, R can draw a smooth, ``connect-the-dots''
curve, and decorate the insides.
\end{itemize}
<<poly30,fig=T,include=F>>=
bdraw()
polygon(x, y, col = "red", border = "black", density = 10, angle = 0)
@

\input{plots/p-poly30.tex}
\includegraphics[width=8cm]{plots/p-poly30}

\end{frame}

\subsection{rectangles}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{The rect() function is almost identical to polygon}
\begin{itemize}
\item rect wants 4 arguments, the corner coordinates
\end{itemize}
<<rect10,fig=T,include=F>>=
bdraw()
rect(xleft = -2, ybottom = -6, xright = 3, ytop = 7, col = "blue", border = "black", density = 10, angle = 45)
@

\input{plots/p-rect10.tex}
\includegraphics[width=8cm]{plots/p-rect10}

\end{frame}

\section{plotmath}

\begin{frame}[containsverbatim]
\frametitle{Sometimes a well placed $\sigma$ or $\psi$ pushes your plot over the top}
\begin{itemize}
\item I don't want to spend a lot of time on this, because it is almost
mind-numbingly complicated in some ways, but let's just run an example.
\end{itemize}
<<pm10, fig=T, echo=T, include=F>>=
plot(1:10, 1:10, type="n")
text(4, 5, expression(paste(alpha  ," is alpha")))
text(7, 3, expression(paste(beta * alpha, " is beta * alpha")))
text(3, 6, expression(paste(frac(beta, alpha), " is frac(beta,alpha)")))
text(2,9, expression(paste(hat(y)[i] == hat(beta)[0]+hat(beta)[1]*x[1])))
@

\input{plots/p-pm10.tex}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{I also like $\beta$, $\alpha$ and $\Sigma$}

\includegraphics[width=9cm]{plots/p-pm10}

\end{frame}

\begin{frame}[containsverbatim]
  \frametitle{A Few plotmath Tips}
  \begin{itemize}
    \item Two Equal Signs (== gives back =)
    \item Use hard brackets [] for subscripts, \textasciicircum~ for superscripts
    \item Want * to show? Type \%*\%
    \item Want centered $\cdot$ for multiplication? Type  cdot
    \item Want $(x-1,y_1)$? Type group("(", list(x[1], y[1]), ")")
  \end{itemize}
\end{frame}

\section{Are you looking for skills to practice?}

\begin{frame}[containsverbatim]
\frametitle{What To Practice Today?}
\begin{itemize}
\item Maybe this will get you started

<<echo=T,eval=F>>=
plot(1:10, 1:10, type = "n")
abline(h = 2:9, v = c(3, 5, 7), col = "gray80")
arrows(x0 = 2, y0 = 3, x1 = 9, y1 = 2, length = 0.1)
text(3, 7, "Kansas in Summer is like Paris", pos = 4)
text(3.2, 6.6, "if Paris were hot and humid", pos = 4)
@
\item Sketch a technical illustration on paper

\begin{itemize}
\item Figure out how to draw it by starting with a blank device and adding
lines, rectangles, etc.
\end{itemize}
\item Step through the code that generates the graphs in section 1 of this
presentation.

\begin{itemize}
\item Leave SAVEME <- FALSE if you want on-screen graphics.
\end{itemize}
\item If you have R for Windows or Macintosh, lets find the keystrokes to
``step next'' through one of those examples.
\item Test examples from my Website's WorkingExamples folder. \href{http://pj.freefaculty.org/R/WorkingExamples/distributions-normalAndTCompared.R}{distributions-normalAndTCompared.R}
and \href{http://pj.freefaculty.org/R/WorkingExamples/distributions-GammaVersusNormal-1.R}{distributions-GammaVersusNormal-1.R}. 
\end{itemize}
\end{frame}
\end{document}
