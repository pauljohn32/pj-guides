#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{array}
\usepackage{longtable}
\usepackage{graphicx}
%\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}

%%\input{theme/guidePreambleSweavel.tex} 
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%% end of paste

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}
%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}
\logo{\includegraphics[width=5mm]{theme/logomini}}
\end_preamble
\options aspectratio=1609
\use_default_options false
\begin_modules
logicalmkup
sweave
natbibapa
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style \use_bibtopic false
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch semboot
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\branch cfalvm
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%following is LyX shortcut 
\backslash
vb for bold upright math for matrices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% tmpout directory must exist first
\end_layout

\begin_layout Plain Layout

<<tmpout, echo=FALSE, include=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

tdir <- "tmpout"
\end_layout

\begin_layout Plain Layout

if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t,split=T,ae=F,height=4.5,width=7}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, include=F, results=hide>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=100, prompt = " ", continue = "  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE)
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly = TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(4.1, 4.1, 1.5, 2.1)
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

if(!file.exists("theme")) file.symlink("../../../../template/theme", "theme")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
Import Data 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
import
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset


\begin_inset Argument 1
status open

\begin_layout Plain Layout
Johnson
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Department of Political Science
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

Center for Research Methods and Data Analysis, University of Kansas
\begin_inset Argument 1
status open

\begin_layout Plain Layout
K.U.
\end_layout

\end_inset


\end_layout

\begin_layout Date
2018
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Data Import
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Data Input Formats}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Base R
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"
literal "true"

\end_inset

 includes importers for input data files that are saved in 2 formats
\end_layout

\begin_deeper
\begin_layout Enumerate
R Serialization Data structures (
\begin_inset Quotes eld
\end_inset

rds
\begin_inset Quotes erd
\end_inset

 files)
\end_layout

\begin_layout Enumerate
text files (
\begin_inset Quotes eld
\end_inset

csv
\begin_inset Quotes erd
\end_inset

 comma separated, but also 
\begin_inset Quotes eld
\end_inset

tab
\begin_inset Quotes erd
\end_inset

 or other separators).
\end_layout

\end_deeper
\begin_layout Itemize
R packages can be loaded to import files from 
\end_layout

\begin_deeper
\begin_layout Itemize
SPSS, Stata, SAS
\end_layout

\begin_layout Itemize
Excel
\end_layout

\begin_layout Itemize
SQL
\end_layout

\begin_layout Itemize
Others
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What is the difficult part?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Every program uses a specialized format
\end_layout

\begin_layout Itemize
Commercial software often does not publish guidelines (or follow their own
 published guidelines)
\end_layout

\begin_layout Itemize
There is tension within the R community on the question of how hard R programmer
s should work in order to cooperate with other storage formats.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Lets Jump Into it!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{In the R folder for this workshop}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A file named 
\begin_inset Quotes eld
\end_inset

import.R
\begin_inset Quotes erd
\end_inset

 is saved in the R directory.
\end_layout

\begin_layout Itemize
Open that file with Rstudio, Emacs, Notepad++, or R.app
\end_layout

\begin_layout Itemize
Make sure of the current working directory is correct and that the data
 is where we expect
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

getwd()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize} 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
I'm writing this presentation in the top level folder 
\begin_inset Quotes eld
\end_inset

summeR-2-2-import
\begin_inset Quotes erd
\end_inset

, but you should be running inside R because that's where import.R is located.
\end_layout

\begin_layout Itemize
From import.R, inside the R directory, the location of data is
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setddir, echo=F, results=hide, include=F>>=
\end_layout

\begin_layout Plain Layout

ddir <- "data"
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F,echo=T>>=
\end_layout

\begin_layout Plain Layout

ddir <- "../data"
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

list.files(ddir)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Quick test 1: RDS}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I saved a copy of a data frame named 
\begin_inset Quotes eld
\end_inset

swiss
\begin_inset Quotes erd
\end_inset

 in a file in the data folder.
 Lets load it.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

swiss <- readRDS( file.path(ddir, "swiss.rds") )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

head(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we will see, this is a 
\begin_inset Quotes eld
\end_inset

data frame
\begin_inset Quotes erd
\end_inset

, but RDS is a general purpose storage format (R Data Serialization) which
 can save one object of any type.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Quick test 2: a text file}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.table()
\end_layout

\end_inset

 can import text files (*.txt, *.csv).
\end_layout

\begin_layout Enumerate
Example usage
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fn <- file.path(ddir, "oregon.csv")
\end_layout

\begin_layout Plain Layout

ore1 <- read.table(fn, sep = ",", header = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Output named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
ore1
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (NB: use brief names for frequently used objects).
\end_layout

\begin_layout Standard

\series bold
KEY ARGUMENTS
\end_layout

\begin_layout Enumerate
the file name, an un-named first argument
\end_layout

\begin_layout Enumerate

\series bold
sep
\series default
: the separator's symbol
\end_layout

\begin_layout Enumerate

\series bold
header
\series default
: is the first row to be used as column names?
\end_layout

\end_deeper
\begin_layout Enumerate
See 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
?read.table
\end_layout

\end_inset

 for additional arguments, especially 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
stringsAsFactors
\end_layout

\end_inset

 (will discuss below)
\end_layout

\begin_layout Enumerate
The returned thing is a 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 object.
\end_layout

\begin_layout Enumerate
There are specialized 
\begin_inset Quotes eld
\end_inset

wrapper
\begin_inset Quotes erd
\end_inset

 versions of same, like 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.csv
\end_layout

\end_inset

, that have default settings which may help.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Data Frames
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Data Frame}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
R has many different kinds of data structures.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
matrix
\end_layout

\begin_layout Itemize
list
\end_layout

\begin_layout Itemize
vector
\end_layout

\begin_layout Itemize
data frame
\end_layout

\end_deeper
\begin_layout Itemize
For importing data, we often focus on data frames because that format is
 closest to format used by other programs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What is a Data Frame?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Definition: elements have same number of rows.
\end_layout

\begin_layout Itemize
Typically
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Columns are 
\begin_inset Quotes eld
\end_inset

Variables
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Rows are 
\begin_inset Quotes eld
\end_inset

Observations
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Example: The General Social Survey: 51020 rows 5137 columns}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="9">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
year
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\cdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Q5135
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1972
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1972
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3455
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1974
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NA
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3456
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1974
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NA
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\vdots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44555
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44556
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pj.freefaculty.org/guides/stat/DataSets/GSS-Overview/GSS-1.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R also has matrices}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A matrix is a 2 dimensional array.
 
\end_layout

\begin_layout Itemize
Lets create a matrix with the matrix() function
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<matx1>>=
\end_layout

\begin_layout Plain Layout

X <- matrix(1:24, nrow = 6, ncol = 4, dimnames = list(NULL, c("Den", "KC",
 "Oak", "SD")))
\end_layout

\begin_layout Plain Layout

X
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

cell
\begin_inset Quotes erd
\end_inset

 in that matrix can be extracted as
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<matx2>>=
\end_layout

\begin_layout Plain Layout

X[5, 2]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The 2nd row can be extracted as
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<matx3>>=
\end_layout

\begin_layout Plain Layout

X[2, ]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The 3rd column:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<matx4>>=
\end_layout

\begin_layout Plain Layout

X[ , 3]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
R includes a raft of specialized matrix algebra functions (a topic for summeR-4).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Compare/Contrast matrix 
\backslash
& data frame?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent

\series bold
Similarities
\end_layout

\begin_layout Itemize
Both allow row, column index access to values.
 It is unusual to do this with a data frame, but the values can be accessed
 by index number, just like matrices.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

swiss[3, ]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Both make it possible to name the columns (or rows) by characters, which
 can be used to retrieve that column.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

X[1:5 , "Oak"]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or a pair of columns
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

X[1:5 , c("Den", "SD")]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Both allow a special symbolic value 
\series bold
NA
\series default
 to represent a missing score
\end_layout

\begin_layout Standard

\series bold
Differences
\end_layout

\begin_layout Itemize
A matrix must be filled with values on one single type
\end_layout

\begin_deeper
\begin_layout Itemize
floating point numbers
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F,include=T>>=
\end_layout

\begin_layout Plain Layout

X <- matrix(rnorm(12), ncol = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
characters:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F,include=T>>=
\end_layout

\begin_layout Plain Layout

X <- matrix(sample(letters, 12, replace=TRUE), ncol = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
logical values:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F,include=T>>=
\end_layout

\begin_layout Plain Layout

X <- matrix(sample(c(TRUE,FALSE), 12, replace=TRUE), ncol = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
A data frame allows columns of different types
\end_layout

\begin_layout Itemize
Matrices are used for serious computations, generally faster than data frames
\end_layout

\begin_layout Itemize

\series bold
But
\series default
 the fundamental limitation of a matrix: values are only of one type.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Data frame advantages}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Data Frames are slower.
 Why bother?
\end_layout

\begin_layout Standard

\series bold
Answer: Convenience.

\series default
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Enumerate
Diverse column types (characters, integers, real numbers, factors, dates,
 etc.)
\end_layout

\begin_layout Enumerate
Shortcut 
\begin_inset Quotes eld
\end_inset

$
\begin_inset Quotes erd
\end_inset

 for access to individual columns
\end_layout

\begin_deeper
\begin_layout Enumerate
A column within a matrix (X) OR data frame (DF) can be accessed by name
 as
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

X[ , "column_name_here"]
\end_layout

\begin_layout Plain Layout

DF[ , "column_name_here"]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
But a data frame allows shorter syntax like this
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Schunk}
\end_layout

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

DF$column_name_here
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\begin_layout Plain Layout


\backslash
end{Schunk}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Data interchange.
 Excel, SPSS, Stata allow 
\begin_inset Quotes eld
\end_inset

data frame
\begin_inset Quotes erd
\end_inset

 style diversity.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{swiss, for example}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Make sure that thing is a data.frame
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

is.data.frame(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Its a small data frame
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

print(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Where to find out more?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Fall, 2016 I put together some new notes that are available in 
\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pj.freefaculty.org/guides/Rcourse/data_structures
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "vectors"
target "http://pj.freefaculty.org/guides/Rcourse/data_structures/data_structures-vectors.html"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "matrices"
target "http://pj.freefaculty.org/guides/Rcourse/data_structures/data_structures-matrices.html"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "data.frames"
target "http://pj.freefaculty.org/guides/Rcourse/data_structures/data_structures-data.frames.html"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "lists"
target "http://pj.freefaculty.org/guides/Rcourse/data_structures/data_structures-lists.html"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Functions to memorize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Functions to quickly overview the imported material.
\end_layout

\begin_layout Description
head() See the first few lines (Similar 
\series bold
tail()
\series default
)
\end_layout

\begin_layout Description
summary() A generic R function that 
\series bold
\emph on
usually
\emph default
 
\series default
tells you something informative.
\end_layout

\begin_layout Description
str() Structure summary 
\end_layout

\begin_layout Description
View() Graphic
\end_layout

\begin_layout Description
colnames() All df will have colnames, perhaps bland like 
\begin_inset Quotes eld
\end_inset

V1
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

V2
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Description
rownames() If creator does not assign rownames, R will use the integer row
 numbers in character format.
\end_layout

\begin_layout Description
dim() quick way to find out how many rows and columns there are
\end_layout

\begin_layout Description
attributes() R uses 
\begin_inset Quotes eld
\end_inset

attributes
\begin_inset Quotes erd
\end_inset

 in programming, sometimes this is vital in troubleshooting
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
head()
\end_layout

\end_inset

 shows the first 5 observations of each variable (could ask for more)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<swiss60,echo=T,eval=F>>=
\end_layout

\begin_layout Plain Layout

head(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

{
\backslash
def
\backslash
Sweavesize{
\backslash
tiny}
\end_layout

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

<<swiss60>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
str()
\end_layout

\end_inset

 is a structural overview
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Column 1 will be variable name
\end_layout

\begin_layout Standard
Column 2 is variable type
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This example has: some 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
integer
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 variables and some 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
numeric
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
No 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
factor
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
character
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
logical
\end_layout

\end_inset

, or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
date
\end_layout

\end_inset

 variables.
\end_layout

\end_deeper
\begin_layout Itemize
Add a logical (TRUE/FALSE) variable, then test 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
str
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

swiss$Edgt10 <- ifelse(swiss$Education > 10, TRUE, FALSE)
\end_layout

\begin_layout Plain Layout

str(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
If you are a graphic-sort-of-person, try View().
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T,eval=F>>=
\end_layout

\begin_layout Plain Layout

View(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/R-View-swiss.png
	width 6cm

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
summary()
\end_layout

\end_inset

.
 The builtin summary function for data frames
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
tiny} 
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

summary(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Other functions to try
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

rownames(swiss)
\end_layout

\begin_layout Plain Layout

colnames (swiss)
\end_layout

\begin_layout Plain Layout

attributes(swiss)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Various Column Access Methods}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Different ways to choose the fertility column
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

# The $ accessor
\end_layout

\begin_layout Plain Layout

f1 <- swiss$Fertility
\end_layout

\begin_layout Plain Layout

# matrix style, choose column 1
\end_layout

\begin_layout Plain Layout

f2 <- swiss[ , 1]
\end_layout

\begin_layout Plain Layout

# By column name (my favorite)
\end_layout

\begin_layout Plain Layout

f3 <- swiss[ , "Fertility"]
\end_layout

\begin_layout Plain Layout

all.equal(f1, f2, f3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The column number method is NOT widely used (danger of counting incorrectly).
\end_layout

\begin_layout Itemize
Sidenote: When you choose one column, the resulting selection is 
\begin_inset Quotes eld
\end_inset

demoted
\begin_inset Quotes erd
\end_inset

 from 
\begin_inset Quotes eld
\end_inset

data frame
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

vector
\begin_inset Quotes erd
\end_inset

.
 This is an important 
\begin_inset Quotes eld
\end_inset

feature
\begin_inset Quotes erd
\end_inset

 in R, also a source of my frequent frustration in writing R functions (see
 blog post 
\begin_inset Quotes eld
\end_inset

R's drop 'gotcha' and the diag 'curse'
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pj.freefaculty.org/blog/?p=274
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Choose several columns
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

# matrix style, cols 1, 3, 5
\end_layout

\begin_layout Plain Layout

f2 <- swiss[ , c(1, 3, 5)]
\end_layout

\begin_layout Plain Layout

# By column name (my favorite)
\end_layout

\begin_layout Plain Layout

f3 <- swiss[ , c("Fertility", "Examination", "Catholic")]
\end_layout

\begin_layout Plain Layout

all.equal(f2, f3)
\end_layout

\begin_layout Plain Layout

head(f2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The $ notation is not helpful when you need a few columns
\end_layout

\end_deeper
\begin_layout Itemize
In larger data sets, when it is tedious to type lots of names, we would
 use R character string functions to scan values of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
colnames(swiss)
\end_layout

\end_inset

.
 That's a bigger topic.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
I Love Oregon
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{See what we got from Oregon!}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
head(ore1, 8)
\end_layout

\end_inset

 shows the first 8 observations
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

head(ore1, 8)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
str
\end_layout

\end_inset

 is a structural overview
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

str(ore1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice there are different types of variables? 
\end_layout

\begin_layout Itemize
I'm not happy to see the station name was automatically converted to a factor
 variable.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
I wish I had run this instead, so they would just be character strings.
 Will explain later.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

ore1 <- read.table("data/oregon.csv", sep = ",", 
\end_layout

\begin_layout Plain Layout

            header = TRUE, stringsAsFactors = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain, allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{See what we got!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{enumi}{2}
\end_layout

\begin_layout Plain Layout


\backslash
item Run 
\backslash
code{View(ore1)}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/R-View.png
	width 6cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{See what we got!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{enumi}{3}
\end_layout

\begin_layout Plain Layout


\backslash
item summary()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
tiny} 
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

summary(ore1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item rockchalk::summarize() has nicer summary, I think
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
tiny} 
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

summarize(ore1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Details on read.table
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{First, check your input file}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Look inside the file to find out what is really in there
\end_layout

\begin_layout Itemize
Don't trust the extension (*.txt, *.csv, *.dat).
\end_layout

\begin_layout Itemize
File can be named anything, R only cares about content inside.
\end_layout

\begin_layout ColumnsTopAligned
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
Comma Separated variables with column header
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

name,id,test1,test2
\end_layout

\begin_layout Plain Layout

paul,001,188,99
\end_layout

\begin_layout Plain Layout

jane,002,9,33
\end_layout

\begin_layout Plain Layout

rick,003,101,13
\end_layout

\end_inset


\end_layout

\begin_layout Column
6cm
\end_layout

\begin_layout Standard
Space Separated variables with column header
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

name id test1 test2
\end_layout

\begin_layout Plain Layout

paul 001 188 99
\end_layout

\begin_layout Plain Layout

jane 002 9 33
\end_layout

\begin_layout Plain Layout

rick 003 101 13
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Vital to check for
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Presence of column names in row 1
\end_layout

\begin_layout Itemize
Column separator: Is it 
\begin_inset Quotes eld
\end_inset

tab
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

comma
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

space
\begin_inset Quotes erd
\end_inset

, or some exotic symbol like 
\begin_inset Quotes eld
\end_inset

|
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{read.table arguments}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Example
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T,eval=F,include=T>>=
\end_layout

\begin_layout Plain Layout

mydata <- read.table("../data/filename.csv", header = TRUE, sep = ",", stringsAsFact
ors = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
read Arguments in ?read.table
\end_layout

\begin_layout Enumerate
file (unnamed argument in my example).
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If I use 
\begin_inset Quotes eld
\end_inset

filename.csv
\begin_inset Quotes erd
\end_inset

, R looks in current working directory.
\end_layout

\begin_layout Enumerate
If the file is not found, a not-so-vague error message results
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},tabsize=3"
inline false
status open

\begin_layout Plain Layout

> read.table('blah.txt')
\end_layout

\begin_layout Plain Layout

Error in file(file, "rt") : cannot open the connection
\end_layout

\begin_layout Plain Layout

In addition: Warning message:
\end_layout

\begin_layout Plain Layout

In file(file, "rt") :
\end_layout

\begin_layout Plain Layout

  cannot open file 'blah.txt': No such file or directory
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If it's not there, you'll either have to move it in there, or you need to
 tell R where it is.
\end_layout

\end_deeper
\begin_layout Enumerate
header.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Column names in row 1.
 
\end_layout

\begin_layout Enumerate
R sanitizes variable names.
 Valid names must not 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
have spaces
\end_layout

\begin_layout Enumerate
begin with numbers
\end_layout

\begin_layout Enumerate
have characters except letters, numbers, or 
\begin_inset Quotes eld
\end_inset

_
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Wonder how R does that? See 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
?make.names
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
sep is the 
\begin_inset Quotes eld
\end_inset

separator
\begin_inset Quotes erd
\end_inset

.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The default separator in R is the blank space.
 
\end_layout

\begin_layout Enumerate
Here, I use comma, 
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
stringsAsFactors.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Factors are important in R stats and graphics, but inconvenient in recoding.
\end_layout

\begin_layout Enumerate
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.table
\end_layout

\end_inset

 function assumes that you want your character string variables to be converted
 into R factor variables.
 (A column of street addresses will get mangled).
\end_layout

\begin_layout Enumerate
Additional read.table argument 
\begin_inset Quotes eld
\end_inset

stringsAsFactors = FALSE
\begin_inset Quotes erd
\end_inset

 solves that.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Practice Here Before Proceeding
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Access Values in a Data Frame}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Make a little toy data frame
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

set.seed(234)
\end_layout

\begin_layout Plain Layout

fd <- data.frame(v3 = rnorm(5), 
\end_layout

\begin_layout Plain Layout

                 v4 = rnorm(5), 
\end_layout

\begin_layout Plain Layout

                 v5 = LETTERS[1:5], stringsAsFactors = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That creates named variables 
\begin_inset Quotes eld
\end_inset

v3
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

v4
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

v5
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

fd
\begin_inset Quotes erd
\end_inset

 stands for fun data.
 (
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
Subconscious message: statistics with R is fun
\end_layout

\end_inset

!)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

head(fd)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Different ways to choose the second column
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

fd[ , "v4"]
\end_layout

\begin_layout Plain Layout

fd$v4
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fd[ , 2]
\end_layout

\begin_layout Plain Layout

fd[ , c(FALSE, TRUE, FALSE)]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last one looks dumb now, but it turns out to be useful when choosing
 rows or columns algorithmically
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Col/Row names 
\backslash
& Numbers}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Access by column numbers succeeds
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fd[ , 2]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
But that's dangerous, name for column probably smarter
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fd[ , "v4"]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
That appears like a row, but it is really one column from the data.frame,
 pressed flat for printing.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Itemize
I like to leave an empty space before the comma, for readability.
\end_layout

\end_deeper
\begin_layout Itemize
Remember there's a difference between a row name 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 and a row number 1.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fd["1", "v4"]
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A quoted 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 is the character 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

rownames(fd)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Can use non-numeric row names:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

rownames(fd) <- c("Bill", "Joe", "Frosty", "Mickey", "Henry")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
After that, the rowname 
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

 no longer exists
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fd[1, ] # position 1
\end_layout

\begin_layout Plain Layout

fd["Bill", ] # rowname "Bill"
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
but you'll get a error from running: fd[
\begin_inset Quotes eld
\end_inset

1
\begin_inset Quotes erd
\end_inset

, ]
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create new data frames by Extracting Columns}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you choose 2 or more columns, the returned structure is a new data frame
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T, eval=T>>=
\end_layout

\begin_layout Plain Layout

fd13 <- fd[ , c("v3", "v5")] 
\end_layout

\begin_layout Plain Layout

str(fd13)
\end_layout

\begin_layout Plain Layout

head(fd13)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Default "demotion" of 1 column data.frames}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are some wrinkles when returned object structures are changed.
 There's one I call the 
\begin_inset Quotes eld
\end_inset

drop gotcha.
\begin_inset Quotes erd
\end_inset

 See my blog 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pj.freefaculty.org/blog/?p=274
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Did you notice that this is a vector, not a column?
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gotcha10>>=
\end_layout

\begin_layout Plain Layout

z <- fd[ , "v4"]
\end_layout

\begin_layout Plain Layout

str(z)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
I know of 2 ways to preventing 
\begin_inset Quotes eld
\end_inset

demotion
\begin_inset Quotes erd
\end_inset

 from one-column data frame to vector.
 
\end_layout

\begin_layout Enumerate
Here is the syntax I'm accustomed to using
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gotcha20>>=
\end_layout

\begin_layout Plain Layout

w1 <- fd[ , "v4", drop = FALSE]
\end_layout

\begin_layout Plain Layout

w1
\end_layout

\begin_layout Plain Layout

str(w1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you were thinking 
\begin_inset Quotes eld
\end_inset

[]
\begin_inset Quotes erd
\end_inset

 is matrix notation, you are shocked that a named argument 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
drop
\end_layout

\end_inset

 can be inserted after 2 coordinates.
 I still find that shocking, 
\emph on
after 20 years
\end_layout

\end_deeper
\begin_layout Enumerate
Until recently, I was uncomfortable with this simpler approach
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<gotcha10>>=
\end_layout

\begin_layout Plain Layout

w2 <- fd["v4"]
\end_layout

\begin_layout Plain Layout

w2
\end_layout

\begin_layout Plain Layout

str(w2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This treats the data.frame like an R list, which we have not discussed yet.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Deleting a column}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Get rid of a column, permanently
\end_layout

\begin_deeper
\begin_layout Itemize
Assign it as NULL
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fd13$v3 <- NULL
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Create a new data frame from fd by excluding the unwanted ones
\end_layout

\begin_deeper
\begin_layout Itemize
the minus sign of a column number is interpreted as 
\begin_inset Quotes eld
\end_inset

remove this one
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fdnew <- fd[ , -c(2)]
\end_layout

\begin_layout Plain Layout

head(fdnew)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This works, but is dangerous because it requires good counting.
 Usually I'd use some text string manipulation to indicate which columns
 need to be kept.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Variable Inspection 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What are we Looking For?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
NO!
\series default
 publication quality graphics
\end_layout

\begin_layout Itemize

\series bold
YES!
\series default
 quick look at each variable, find out what we have
\end_layout

\begin_layout Itemize
Check for
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Illegal scores, measurement noise
\end_layout

\begin_layout Itemize
Missings masquerading as 9999 (or such)
\end_layout

\begin_layout Itemize
Unexpected data distributions
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain,containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Check Histograms for numeric variables}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Can do this one variable at a time (tedious!)
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
hist()
\end_layout

\end_inset

 is the base distribution.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist1,fig=T,include=F, width=5, height=5>>=
\end_layout

\begin_layout Plain Layout

hist(ore1$tann, prob = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
input{tmpout/t-hist1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=6cm]{tmpout/t-hist1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can beautify labels if you want to show somebody else}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<hist2a, fig=T,include=F>>=
\end_layout

\begin_layout Plain Layout

hist(ore1$tann, prob = TRUE,  xlab = "Annual Temperatures in Oregon", ylab
 = "Density of Observed Temperatures", main = "Oregon: Where Good Professors
 Hope to Retire", ylim = c(0, 0.30))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{"tmpout/t-hist2a.tex"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=9cm]{tmpout/t-hist2a}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{kutils: peek()}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In the 2016 summer program, we wondered if we could make a quick, automatic,
 variable-by-variable data display.
 
\end_layout

\begin_layout Itemize
The result: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kutils::peek()
\end_layout

\end_inset

! Will scan, showing histograms for numeric variables and sideways barplots
 for discrete variables
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

peek(ore1)
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks,containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Scatterplot Matrix}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pairs()
\end_layout

\end_inset

 is handy with a small data set like this.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sc10,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

pairs(ore1[ , -1])
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{"tmpout/t-sc10.tex"}
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{tmpout/t-sc10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Column 1 was the station name, and I exclude that with the 
\begin_inset Quotes eld
\end_inset

-1
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Excel
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Excel data requires more work}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Excel import is not supported by R Core.
 
\end_layout

\begin_layout Itemize
Various packages have been offered by volunteers
\end_layout

\begin_deeper
\begin_layout Enumerate
Since 2016, our most dependable R package for this is 
\series bold
openxlsx.
 
\series default
Uses routines written in C++, requires Rcpp.
\end_layout

\begin_layout Enumerate
From 2000 until 2015, 
\series bold
gdata
\series default
 was my favorite.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Still needed for older xls files (openxlsx is only for xlsx)
\end_layout

\begin_layout Enumerate
On huge, simple Excel files, Perl-based routine 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
gdata
\end_layout

\end_inset

 is still faster
\end_layout

\end_deeper
\begin_layout Enumerate
Other Excel reading packages exist.
 Suggestion: avoid packages based on Java 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The openxlsx package}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Example
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<ex10,include=F,eval=T>>=
\end_layout

\begin_layout Plain Layout

library(openxlsx)
\end_layout

\begin_layout Plain Layout

fn <- file.path(ddir, "gradebook.xlsx")
\end_layout

\begin_layout Plain Layout

grades <- read.xlsx(fn, colNames = TRUE, check.names = TRUE)
\end_layout

\begin_layout Plain Layout

head(grades)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-ex10.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<ex20,echo=F>>=
\end_layout

\begin_layout Plain Layout

<<ex10>>
\end_layout

\begin_layout Plain Layout

@	
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<ex30>>=
\end_layout

\begin_layout Plain Layout

str(grades)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
CAUTION: read.xlsx has unusual argument names
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
colNames
\end_layout

\end_inset

: TRUE or FALSE for 1st row is a header
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
startRow
\end_layout

\end_inset

 = n.
 Row number where material to be imported begins.
\end_layout

\end_deeper
\end_deeper
\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Does not 
\begin_inset Quotes eld
\end_inset

check.names
\begin_inset Quotes erd
\end_inset

 by default
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Recall: R's 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.table()
\end_layout

\end_inset

 checked column names and converted them to legal variable names
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
open.xlsx()
\end_layout

\end_inset

 does not 
\begin_inset Quotes eld
\end_inset

check.names
\begin_inset Quotes erd
\end_inset

 by default.
\end_layout

\begin_layout Itemize
Allows column names that are 
\emph on
illegal
\end_layout

\begin_layout Itemize
Can Fix them yourself
\end_layout

\begin_deeper
\begin_layout Itemize
edit 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
colnames
\end_layout

\end_inset

 manually, or 
\end_layout

\begin_layout Itemize
run 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
make.names()
\end_layout

\end_inset

 on 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
colnames(your_data_frame) 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Newer 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
openxlsx
\end_layout

\end_inset

 introduced argument
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

check.names = TRUE
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Note: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.xlsx()
\end_layout

\end_inset

 does not automatically convert character variables to R factors.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Stata, SPSS
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R Foreign package}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The R standard distribution includes the foreign package.
 
\end_layout

\begin_layout Itemize
foreign includes 
\end_layout

\begin_deeper
\begin_layout Itemize
import for Stata through Stata version 12
\end_layout

\begin_layout Itemize
SPSS (with limitations)
\end_layout

\end_deeper
\begin_layout Itemize
Load the foreign package
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T,eval=F>>=
\end_layout

\begin_layout Plain Layout

library(foreign)
\end_layout

\begin_layout Plain Layout

## as always, review
\end_layout

\begin_layout Plain Layout

help(package = "foreign")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The only ones I've used are for SPSS, Stata, SAS
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.dta()
\end_layout

\end_inset

: For Stata through Stata Version 12.
 Does not require the user's system to have a copy of Stata
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.spss()
\end_layout

\end_inset

: Works fairly well with SPSS through version 20, but there are problems
 with foreign character sets that have existed for a long time.
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
read.xport()
\end_layout

\end_inset

: Requires the user's system to have a copy of SAS.
 It has worked for me since 2013, but the requirement to have SAS is a big
 hurdle.
 
\end_layout

\begin_layout Itemize
Recently, we had fantastic luck with the SAS file importer in package 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
SAScii
\end_layout

\end_inset

.
 Is able to read SAS code files and associated CSV data files.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Stata (through V12) Historically Most Workable}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Syntax is simple
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<toe1>>=
\end_layout

\begin_layout Plain Layout

library(foreign)
\end_layout

\begin_layout Plain Layout

toe1f <- read.dta("data/toenail.dta")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Stop there! practice your R data.frame exploration skills on toe1f!
\end_layout

\begin_layout Itemize
R will construe value labels as factor levels, unless you ask it not to
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

fn <- file.path(ddir, "toenail.dta")
\end_layout

\begin_layout Plain Layout

toe1n <- read.dta(fn, convert.factors = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Confusion between 
\begin_inset Quotes eld
\end_inset

values
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

labels
\begin_inset Quotes erd
\end_inset

 begins here.
\end_layout

\end_deeper
\begin_layout LyX-Code
Compare
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

table(toe1f$treatment, toe1n$treatment, exclude = NULL, dnn = list("factor",
 "numeric"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Generally, I DO want to import the labels.
 
\end_layout

\begin_layout Itemize
However, as above, I import 2 versions
\end_layout

\begin_layout Itemize
R can write Stata files for version 12 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

write.dta(dat, file = "whatever.dta")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
And SPSS can import those Stata files we write from R's write.dta() (same
 NOT true of dta-writers in user-contributed packages)
\end_layout

\begin_layout Itemize
Within Stata, use 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
saveold
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 for version 12 to maintain compatability.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Usually works to import SPSS data}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Syntax is slightly more complicated, because SPSS internal structure is
 slightly more complicated.
\end_layout

\begin_layout Itemize
Creates an R list, not a data frame.
 Which we can inspect and convert
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T,eval=F>>=
\end_layout

\begin_layout Plain Layout

dat <- read.spss("whatever.sav")
\end_layout

\begin_layout Plain Layout

dat <- as.data.frame(dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Ask R to try to create a data frame for you, skip the list entirely
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T,eval=F>>=
\end_layout

\begin_layout Plain Layout

dat <- read.spss("whatever.sav", to.data.frame = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Whenever you try to import an SPSS data set, you will generally see either
 errors or warnings.
 It is difficult to know for sure who to blame about this, but it is a fact
 of life.
 
\end_layout

\begin_layout Itemize
In 2014, we started to see errors because SPSS created text columns that
 were 256 characters wide, even if users just entered values like 
\begin_inset Quotes eld
\end_inset

Tim
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Jane
\begin_inset Quotes erd
\end_inset

.
 R seems to panic and it imports the character string, but then it creates
 a block of empty columns.
 
\end_layout

\begin_layout Itemize
Hmisc package function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
spss.get()
\end_layout

\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

wrapper
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
foreign:read.spss()
\end_layout

\end_inset

 which organizes the SPSS labels somewhat differently
\end_layout

\begin_layout Itemize
When in trouble, I try the SPSS importers offered by other packages
\end_layout

\begin_deeper
\begin_layout Enumerate
memisc
\end_layout

\begin_layout Enumerate
Haven
\end_layout

\end_deeper
\begin_layout Itemize
When those fail, I become desperate and get an SPSS user to open the file
 and look to see what's so funny about the data, and possibly write a new
 one or export to Stata format
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Variable Key
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The variable key is a way we created to manage projects}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
When the GRAs import data, they are generally inclined to start making a
 lot of changes.
 
\end_layout

\begin_layout Itemize
From a management point of view, we'd like the managers and principal investigat
ors to guide the GRA decisions.
\end_layout

\begin_layout Itemize
Worst case scenario: GRAs cobble together 1000s of lines of changes that
 we don't understand.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Example}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},tabsize=2"
inline false
status open

\begin_layout Plain Layout

library(car)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Read in data
\end_layout

\begin_layout Plain Layout

dat<-read.csv(file="fulldata.csv",header=T, na.string=c("-980","-981","-982","-983"
,"-984","-985",
\end_layout

\begin_layout Plain Layout

"-986","-987","-988","-989","-990","-991","-992","-993", "-994","-995","-996","-
997","-998","-999"))
\end_layout

\begin_layout Plain Layout

##family predictors
\end_layout

\begin_layout Plain Layout

dat$Rnp1G1e<-recode(dat$np1G1e, "0=2;1=1;2=0")
\end_layout

\begin_layout Plain Layout

dat$Rnp1G1h<-recode(dat$np1G1h, "0=2;1=1;2=0")
\end_layout

\begin_layout Plain Layout

dat$Rnp1G5a<-recode(dat$np1G5a, "4=1;3=2;2=3;1=4")
\end_layout

\begin_layout Plain Layout

dat$Rnp1F1d<-recode(dat$np1F1d, "1=6;2=5;3=4;4=3;5=2;6=1")
\end_layout

\begin_layout Plain Layout

##[SNIP 100s more lines like this]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I'd debate the 1) choice of new variable names, 2) the method of re-assigning
 values
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Example}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Note in following, if mnames and w6vars are not perfectly aligned, we have
 FATAL error
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},tabsize=2"
inline false
status open

\begin_layout Plain Layout

w6 <- read.table("w6.dat", header = TRUE)
\end_layout

\begin_layout Plain Layout

## Create variable names for merged dataset
\end_layout

\begin_layout Plain Layout

mnames <- c("distid", "wave", "region", "province", "district","sec1", "sec2",
 "sec3", "sec4", "sec5", "trn1", "trn2", "trn3", "trn4", "crp1", "crp2",
 "crp3", "crp4","crp5", "pgv1", "pgv2", "pgv3", "pgv4", "pgv5", "dgv1",
 "dgv2", "dgv3", "dgv4", "dgv5", "dgv6", "rec1", "rec2")
\end_layout

\begin_layout Plain Layout

## Wave 6 data management
\end_layout

\begin_layout Plain Layout

w6$wave <- 6
\end_layout

\begin_layout Plain Layout

w6$fill <- NA
\end_layout

\begin_layout Plain Layout

w6vars <- c("dist", "wave", "m4b", "m7", "m5", "q1", "q2", "q3", "q9", "q30",
 "q12", "q14", "q20", "q26", "q13", "q21", "q35e", "q36e","q63", "q35a","q41a",
 "q41b", "q41c", "q41d", "q36a", "q43a", "q43b", "q43c", "q43d", "q47c",
 "q10", "q73")
\end_layout

\begin_layout Plain Layout

w6 <- w6[ , w6vars]
\end_layout

\begin_layout Plain Layout

colnames(w6) <- mnames
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## ...SNIP..
 a few 100 lines
\end_layout

\begin_layout Plain Layout

## "sec1"
\end_layout

\begin_layout Plain Layout

mdata$sec1[mdata$sec1 == 100] <- 1
\end_layout

\begin_layout Plain Layout

mdata$sec1[mdata$sec1 == 101] <- 2
\end_layout

\begin_layout Plain Layout

mdata$sec1[mdata$sec1 == 102] <- 3
\end_layout

\begin_layout Plain Layout

mdata$sec1[mdata$sec1 > 3] <- NA
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## "sec2"
\end_layout

\begin_layout Plain Layout

mdata$sec2[mdata$sec2 == 100] <- 1
\end_layout

\begin_layout Plain Layout

mdata$sec2[mdata$sec2 == 101] <- 2
\end_layout

\begin_layout Plain Layout

mdata$sec2[mdata$sec2 == 102] <- 3
\end_layout

\begin_layout Plain Layout

mdata$sec2[mdata$sec2 > 3] <- NA
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## "trn1" Recoded
\end_layout

\begin_layout Plain Layout

mdata$trn1[mdata$trn1 == 100] <- 6
\end_layout

\begin_layout Plain Layout

mdata$trn1[mdata$trn1 == 101] <- 5
\end_layout

\begin_layout Plain Layout

mdata$trn1[mdata$trn1 == 102] <- 4
\end_layout

\begin_layout Plain Layout

mdata$trn1[mdata$trn1 == 103] <- 3
\end_layout

\begin_layout Plain Layout

mdata$trn1[mdata$trn1 == 104] <- 2
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The variable key is a way we created to manage projects}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The variable key is a display of the variables in a spreadsheet format which
 we use to figure out 
\begin_inset Quotes eld
\end_inset

what we have
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

what do we wish it would be
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
A vignette with the kutils package explains many of the details
\end_layout

\begin_layout Itemize
The wide key format.
 This creates a table we can revise
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

keyw <- keyTemplate(grades, file = "key-wide.csv")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

keyw <- read.csv("key-wide.csv", stringsAsFactors=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The column names in the key will be
\end_layout

\begin_deeper
\begin_layout Enumerate
name_old
\end_layout

\begin_layout Enumerate
name_new
\end_layout

\begin_layout Enumerate
class_old
\end_layout

\begin_layout Enumerate
class_new
\end_layout

\begin_layout Enumerate
value_old
\end_layout

\begin_layout Enumerate
value_new
\end_layout

\begin_layout Enumerate
missings
\end_layout

\begin_layout Enumerate
recodes
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Wide Variable key}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Not unexpectedly, the wide key is too long to display on a page
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout

<<echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

library(xtable)
\end_layout

\begin_layout Plain Layout

xt1 <- xtable(keyw)
\end_layout

\begin_layout Plain Layout

print(xt1, include.rownames=FALSE, size = "
\backslash

\backslash
tiny")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The Wide key has one variable per line
\end_layout

\begin_layout Itemize
If 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
length(value_old)
\end_layout

\end_inset

 becomes greater than a threshold, then no values are printed
\end_layout

\begin_layout Itemize
Challenge: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
value_old
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
value_new
\end_layout

\end_inset

 must match, one for one
\end_layout

\begin_layout Itemize
Want to delete a variable?
\end_layout

\begin_deeper
\begin_layout Itemize
Omit the row, or
\end_layout

\begin_layout Itemize
make empty the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
name_new
\end_layout

\end_inset

 value
\end_layout

\end_deeper
\begin_layout Itemize
Want a value to become missing? We suggest putting 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 in value_new
\end_layout

\begin_layout Itemize
How to use recodes and missings? You better read the manual
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Long Variable key}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The Long key has one value per line (hence, many more rows)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

keyl <- keyTemplate(grades, long=TRUE, file = "key-long.csv")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

keyl <- read.csv("key-long.csv", stringsAsFactors=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout

<<results=tex,echo=F>>=
\end_layout

\begin_layout Plain Layout

xt2 <- xtable(keyl)
\end_layout

\begin_layout Plain Layout

print(xt2, include.rownames=FALSE, size = "
\backslash

\backslash
footnotesize", 
\end_layout

\begin_layout Plain Layout

         tabular.environment="longtable")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Big Key Idea}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
PI, Manager, and GRA revise the key file (wide or long)
\end_layout

\begin_layout Itemize
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
keyImport()
\end_layout

\end_inset

 function: revised key file is read in
\end_layout

\begin_layout Itemize
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
keyApply()
\end_layout

\end_inset

 function: The data frame and the key are applied to create a new, recoded
 data frame.
\end_layout

\begin_layout Itemize
Some problems arise because various spreadsheet programs use different methods
 to 
\end_layout

\begin_deeper
\begin_layout Itemize
store character variables
\end_layout

\begin_layout Itemize
save CSV files.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Session Workspace
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Keep a clean work environment}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
R allows you to have many data frames open at once.
\end_layout

\begin_layout Itemize
It also allows you to have 
\begin_inset Quotes eld
\end_inset

free floating
\begin_inset Quotes erd
\end_inset

, disconnected vectors.
 
\end_layout

\begin_layout Itemize
Look at the headache I've got after this
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

V1 <- seq(1, 10, by = 0.01)
\end_layout

\begin_layout Plain Layout

V2 <- c(3)
\end_layout

\begin_layout Plain Layout

V3 <- c(1, 2, 3, 4, 5)
\end_layout

\begin_layout Plain Layout

head(fd)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
ls() lists objects
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

ls()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F,echo=F>>=
\end_layout

\begin_layout Plain Layout

options(options.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This displays the R 
\begin_inset Quotes eld
\end_inset

Global Environment
\begin_inset Quotes erd
\end_inset

: objects that can be accessed within smaller environments created by packages
 and functions.
\end_layout

\end_deeper
\begin_layout Itemize
Use rm to destroy an unwanted thing.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

rm(V1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
And if you want to remove several things at once:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

rm(list = c("V1", "V2"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Syntax here confuses me a bit, don't know why we say 
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
list =
\end_layout

\end_inset

 and then supply a vector of character strings.
\end_layout

\end_deeper
\begin_layout Itemize
The nuclear option: remove everything in the workspace
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

rm(list = ls())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Takes the output from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ls()
\end_layout

\end_inset

, and gives it as the list of things to be removed.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Practice
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{For practice, }
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We will have some data files...
\end_layout

\begin_layout Itemize
We can also try to import any text data files you happen to drag up.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{References}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "/home/pauljohn/GIT/CRMDA/workshops-lfs/software/R/R"
options "apalike2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Session}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sess10>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts20, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

options(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
