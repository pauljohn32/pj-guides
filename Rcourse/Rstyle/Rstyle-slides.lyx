#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}

\usepackage{Sweavel}


% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


%\setbeamercovered{transparent}
% or whatever (possibly just delete it)

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\scriptsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}

\usepackage{graphicx}
\usepackage{listings}
\lstset{tabsize=2, breaklines=true,style=Rstyle}
\usetheme{Antibes}
% or ...

%\setbeamercovered{transparent}
% or whatever (possibly just delete it)

%\mode<presentation>
%{
 % \usetheme{KU}
 % \usecolortheme{dolphin} %dark blues
%}


%%not for article, but for presentation
\mode<presentation>
%%\newcommand\makebeamertitle{\frame{\maketitle}}


%%only for presentation
\mode<presentation>
\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}


\expandafter\def\expandafter\insertshorttitle\expandafter{%
 \insertshorttitle\hfill\insertframenumber\,/\,\inserttotalframenumber}
\end_preamble
\use_default_options false
\begin_modules
sweave
logicalmkup
\end_modules
\maintain_unincluded_children false
\begin_local_layout
Format 7
InsetLayout CharStyle:Rinput
LyxType               charstyle
LabelString           Rinput
LatexType             command
LatexName             Rinput
Font
Family             Typewriter
EndFont
Preamble
\newcommand*{\Rinput}[1]{{\ttfamily #1}}
EndPreamble
End
InsetLayout CharStyle:Rfunction
LyxType               charstyle
LabelString           Rfunction
LatexType             command
LatexName             Rfunction
Font
Family             Typewriter
EndFont
Preamble
\newcommand*{\Rfunction}[1]{{\ttfamily #1}}
EndPreamble
End
InsetLayout CharStyle:Routput
LyxType               charstyle
LabelString           Routput
LatexType             command
LatexName             Routput
Font
Family             Typewriter
EndFont
Preamble
\newcommand*{\Routput}[1]{{\ttfamily #1}}
EndPreamble
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch effects
\selected 1
\filename_suffix 0
\color #ffffff
\end_branch
\branch termplot
\selected 1
\filename_suffix 0
\color #ffffff
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Branch R
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

dir.create("plots", showWarnings=F)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=plots/t,split=T,ae=F,height=4,width=6}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, echo=F>>=
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

#set.seed(12345)
\end_layout

\begin_layout Plain Layout

op <- par() 
\end_layout

\begin_layout Plain Layout

pjmar <- c(5.1, 5.1, 1.5, 2.1) 
\end_layout

\begin_layout Plain Layout

#pjmar <- par("mar")
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang canadian
\begin_inset Note Note
status open

\begin_layout Plain Layout

\lang canadian
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang canadian
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang canadian
\begin_inset Note Note
status open

\begin_layout Plain Layout

\lang canadian
Following is the macro for bold math.
 In math mode, creates a new macros 
\backslash
vb for upright bold in math mode
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Title
R Style 
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Descriptive
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Department of Political Science
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

Center for Research Methods and Data Analysis, University of Kansas
\begin_inset Argument 1
status open

\begin_layout Plain Layout
K.U.
\end_layout

\end_inset


\end_layout

\begin_layout Date
2015
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
2011
\end_layout

\end_inset


\end_layout

\begin_layout PlainFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Overview}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This presentation summarizes the vignette R Style that is distributed with
 the rockchalk package
\end_layout

\begin_layout Itemize
Primary emphasis: write code that sophisticated users will be able to read
\end_layout

\begin_layout Itemize
Suggestions:
\end_layout

\begin_deeper
\begin_layout Itemize
Write code in the same style used by R Core Team members as exemplified
 in the R source code
\end_layout

\begin_layout Itemize
Write code in the style that R uses to display itself
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Format Highlights
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{1.
 Indentation}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Use 4 spaces to indent sections
\end_layout

\begin_layout Itemize
A good editor will convert a TAB you type into 4 spaces
\end_layout

\begin_layout Itemize
If you use TAB symbols, set your editor to display them as 4 spaces
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{2.
 The assignment symbol "<-"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Not the equal sign
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3.
 Blank spaces}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a GNU coding standard.
 
\end_layout

\begin_layout Itemize
Around symbols! Spaces required on both sides of 
\end_layout

\begin_deeper
\begin_layout Itemize
math operators: 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

-
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

*
\begin_inset space ~
\end_inset

 /
\end_layout

\begin_layout Itemize
logical operators: =
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

==
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

|
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

||
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

&
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

&&
\end_layout

\begin_layout Itemize
R symbols <- %*% %o% %in%
\end_layout

\end_deeper
\begin_layout Itemize
One space before opening 
\begin_inset Quotes eld
\end_inset

(
\begin_inset Quotes eld
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

 in if and for statements
\end_layout

\begin_layout Itemize
One space after
\end_layout

\begin_deeper
\begin_layout Itemize
comma
\end_layout

\begin_layout Itemize
closing 
\begin_inset Quotes eld
\end_inset

)
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3.
 Blank spaces}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Unnecessary blank spaces are considered harmful, such as
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

( x <= y )
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Spaces between function name and parens
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

lm (y ~ x)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3.
 Blank spaces}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
There is a great deal of variety about equal signs in function calls.
\end_layout

\begin_layout Itemize
Once you get used to the GNU way of writing, this looks best
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

m1 <- lm(y ~ x, data = red, subset = x < 77, model = FALSE)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
but if you read much code, you find many authors 
\begin_inset Quotes eld
\end_inset

snug up
\begin_inset Quotes erd
\end_inset

 around the equal signs.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

m1 <- lm(y~x, data=red, subset=x < 77, model=FALSE)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The latter seems horrible to me now, but I can't deny 
\end_layout

\begin_deeper
\begin_layout Itemize
it is widely used by authors smarter than I, and
\end_layout

\begin_layout Itemize
publishers may insist on it to keep program code on the page.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{4.
 Squiggly braces}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
For loops, if statements, and the like generally have the opening squggly
 brace on the same line as the language construct
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (some statement) {
\end_layout

\begin_layout Plain Layout

    y <- 1
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the 
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes erd
\end_inset

 and "}
\begin_inset Quotes erd
\end_inset

 are not vertically aligned, as they would be in much C, C++ or Java code.
\end_layout

\begin_layout Standard
Main difficulty: indentation eats up 
\begin_inset Quotes eld
\end_inset

empty space
\begin_inset Quotes erd
\end_inset

 on left side of page.
 Some text editors do this
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

myFn <- function(x = 31, y = 44, z = NULL){
\end_layout

\begin_layout Plain Layout

                                              j <- 1
\end_layout

\begin_layout Plain Layout

                                              i <- 5
\end_layout

\begin_layout Plain Layout

                                              
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
To avoid that, you'll generally see functions in R Core code declared like
 so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

myGiantLongBoringFunctionName <- function(x = 31, y = 44, z = NULL)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    j <- 1
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Or Possibly
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

myGiantLongBoringFunctionName <- 
\end_layout

\begin_layout Plain Layout

function(x = 31, y = 44, z = NULL)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    j <- 1
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
These were used to work around indentation styles of various editors
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{5.
 Evolving Indentation Standards}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Emacs ESS now has a family of indentation styles, the default is their interpret
ation of the R standard.
\end_layout

\begin_deeper
\begin_layout Itemize
TAB key inserts 4 spaces
\end_layout

\end_deeper
\begin_layout Itemize
Consider plot.lm, which appears in R source code as:
\end_layout

\begin_layout Standard

\lang american
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plot.lm <-
\end_layout

\begin_layout Plain Layout

function (x, which = c(1L:3L,5L), ## was which = 1L:4L,
\end_layout

\begin_layout Plain Layout

    caption = list("Residuals vs Fitted", "Normal Q-Q",
\end_layout

\begin_layout Plain Layout

    "Scale-Location", "Cook's distance",
\end_layout

\begin_layout Plain Layout

    "Residuals vs Leverage",
\end_layout

\begin_layout Plain Layout

    expression("Cook's dist vs Leverage  " * h[ii] / (1 - h[ii]))),
\end_layout

\begin_layout Plain Layout

    panel = if(add.smooth) panel.smooth else points,
\end_layout

\begin_layout Plain Layout

    sub.caption = NULL, main = "",
\end_layout

\begin_layout Plain Layout

    ask = prod(par("mfcol")) < length(which) && dev.interactive(), ...,
\end_layout

\begin_layout Plain Layout

    id.n = 3, labels.id = names(residuals(x)), cex.id = 0.75,
\end_layout

\begin_layout Plain Layout

    qqline = TRUE, cook.levels = c(0.5, 1.0),
\end_layout

\begin_layout Plain Layout

    add.smooth = getOption("add.smooth"),
\end_layout

\begin_layout Plain Layout

    label.pos = c(4,2), cex.caption = 1)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\lang american
Emacs 24.4 with ESS 15.09 turns that into this:
\end_layout

\begin_layout Standard

\lang american
\begin_inset listings
lstparams "basicstyle={\tiny},tabsize=4"
inline false
status open

\begin_layout Plain Layout

plot.lm <-
\end_layout

\begin_layout Plain Layout

    function (x, which = c(1L:3L,5L), ## was which = 1L:4L,
\end_layout

\begin_layout Plain Layout

              caption = list("Residuals vs Fitted", "Normal Q-Q",
\end_layout

\begin_layout Plain Layout

                             "Scale-Location", "Cook's distance",
\end_layout

\begin_layout Plain Layout

                             "Residuals vs Leverage",
\end_layout

\begin_layout Plain Layout

                             expression("Cook's dist vs Leverage  " * h[ii]
 / (1 - h[ii]))),
\end_layout

\begin_layout Plain Layout

              panel = if(add.smooth) panel.smooth else points,
\end_layout

\begin_layout Plain Layout

              sub.caption = NULL, main = "",
\end_layout

\begin_layout Plain Layout

              ask = prod(par("mfcol")) < length(which) && dev.interactive(),
 ...,
\end_layout

\begin_layout Plain Layout

              id.n = 3, labels.id = names(residuals(x)), cex.id = 0.75,
\end_layout

\begin_layout Plain Layout

              qqline = TRUE, cook.levels = c(0.5, 1.0),
\end_layout

\begin_layout Plain Layout

              add.smooth = getOption("add.smooth"),
\end_layout

\begin_layout Plain Layout

              label.pos = c(4,2), cex.caption = 1)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that Emacs-ESS will not let the opening squiggly brace go flush left,
 it is always indented 4 spaces.
\end_layout

\begin_layout Itemize
Should coders insert lots of line breaks within function declarations? Some
 coders like a line break after each argument is defined:
\end_layout

\begin_layout Standard

\lang american
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plot.lm <-
\end_layout

\begin_layout Plain Layout

function (x, 
\end_layout

\begin_layout Plain Layout

    which = c(1L:3L,5L), ## was which = 1L:4L,
\end_layout

\begin_layout Plain Layout

    caption = list("Residuals vs Fitted", "Normal Q-Q", "Scale-Location",
 
\end_layout

\begin_layout Plain Layout

        "Cook's distance", "Residuals vs Leverage",
\end_layout

\begin_layout Plain Layout

        expression("Cook's dist vs Leverage  " * h[ii] / (1 - h[ii]))),
\end_layout

\begin_layout Plain Layout

    panel = if(add.smooth) panel.smooth else points,
\end_layout

\begin_layout Plain Layout

    sub.caption = NULL, 
\end_layout

\begin_layout Plain Layout

    main = "",
\end_layout

\begin_layout Plain Layout

    ask = prod(par("mfcol")) < length(which) && dev.interactive(), 
\end_layout

\begin_layout Plain Layout

    ...,
\end_layout

\begin_layout Plain Layout

    id.n = 3, 
\end_layout

\begin_layout Plain Layout

    labels.id = names(residuals(x)), 
\end_layout

\begin_layout Plain Layout

    cex.id = 0.75,
\end_layout

\begin_layout Plain Layout

    qqline = TRUE, 
\end_layout

\begin_layout Plain Layout

    cook.levels = c(0.5, 1.0),
\end_layout

\begin_layout Plain Layout

    add.smooth = getOption("add.smooth"),
\end_layout

\begin_layout Plain Layout

    label.pos = c(4,2), 
\end_layout

\begin_layout Plain Layout

    cex.caption = 1)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You don't generally see that in the R code prepared by R Core Team.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{6.
 I suggest "
\backslash
} else 
\backslash
{"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
It is possible to write code that runs if it is inside a closure (function)
\end_layout

\begin_deeper
\begin_layout Itemize
but it does not run from the command line.
\end_layout

\end_deeper
\begin_layout Itemize
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

i <- 7
\end_layout

\begin_layout Plain Layout

if (i < 5) {
\end_layout

\begin_layout Plain Layout

     j <- 1
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else {
\end_layout

\begin_layout Plain Layout

   j <- 12
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
will fail at the command prompt
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> if (i < 5) {
\end_layout

\begin_layout Plain Layout

+     j <- 1
\end_layout

\begin_layout Plain Layout

+ }
\end_layout

\begin_layout Plain Layout

> else {
\end_layout

\begin_layout Plain Layout

Error: unexpected 'else' in "else"
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
But inside a function it will succeed:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

myfn <- function(i){
\end_layout

\begin_layout Plain Layout

    if (i < 5) {
\end_layout

\begin_layout Plain Layout

         j <- 1
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

       j <- 12
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

j
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Try that:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> myfn(99)
\end_layout

\begin_layout Plain Layout

[1] 12
\end_layout

\begin_layout Plain Layout

> myfn(1)
\end_layout

\begin_layout Plain Layout

[1] 1
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Why does it fail in the command line, but succeed inside the function?
\end_layout

\begin_layout Itemize
Why do you care?
\end_layout

\begin_deeper
\begin_layout Itemize
While preparing a function, you may want to run the commands 
\begin_inset Quotes eld
\end_inset

line by line
\begin_inset Quotes erd
\end_inset

 in a session, to find out what they do!
\end_layout

\end_deeper
\begin_layout Itemize
Alternatives, if you don't like 
\begin_inset Quotes eld
\end_inset

} else {
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Write your function then run it in the debugger.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Try formatR
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Install the formatR package}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

tidy.source
\begin_inset Quotes erd
\end_inset

 function
\end_layout

\begin_layout Standard

\lang american
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> myfn <- function(x){ if (x < 7) {i = 77; print(paste("x is less than 7
 but i is", i))} else {print("x is excessive") }} 
\end_layout

\begin_layout Plain Layout

> library(formatR)
\end_layout

\begin_layout Plain Layout

> tidy.source(source = "clipboard", replace.assign = TRUE)
\end_layout

\begin_layout Plain Layout

function(x) {
\end_layout

\begin_layout Plain Layout

    if (x < 7) {
\end_layout

\begin_layout Plain Layout

        i <- 77
\end_layout

\begin_layout Plain Layout

        print(paste("x is less than 7 but i is", i))
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

        print("x is excessive")
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\lang american
Will fail with errors if you have comments inserted in middle of lines.
\end_layout

\begin_layout Standard

\lang american
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\lang american
Function Names
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{1.
 Names to avoid}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Don't create confusion by creating new functions with names like 
\begin_inset Quotes eld
\end_inset

seq()
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

rep()
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

lm()
\begin_inset Quotes erd
\end_inset

, or such
\end_layout

\begin_deeper
\begin_layout Itemize
would obscure access to functions from R base
\end_layout

\end_deeper
\begin_layout Itemize
Now R Core Namespace policy has 
\begin_inset Quotes eld
\end_inset

defended
\begin_inset Quotes erd
\end_inset

 many functions from that accidental abuse
\end_layout

\begin_deeper
\begin_layout Itemize
stats::lm() can find the lm function in the stats package, even if you have
 lm in your packages
\end_layout

\end_deeper
\begin_layout Itemize
Still wise to avoid creating new functions with same name because
\end_layout

\begin_deeper
\begin_layout Itemize
Confuse/frustrate experts who might read your code and help you with it
\end_layout

\begin_layout Itemize
Confuse yourself during your session
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{2.
 Suggest Camel Case Function Names}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you are naming a new function, don't use periods for punctuation
\end_layout

\begin_layout Itemize
Better to write
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

getParms <- function(x, y, z) {
\end_layout

\end_inset


\end_layout

\begin_layout Standard
than
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

get.parms <- function(x, y, z) {
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Why?
\end_layout

\begin_deeper
\begin_layout Itemize
The R object framework has 
\begin_inset Quotes eld
\end_inset

generic functions
\begin_inset Quotes erd
\end_inset

 like 
\begin_inset Quotes eld
\end_inset

plot
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

summary
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Which have customized 
\begin_inset Quotes eld
\end_inset

methods
\begin_inset Quotes erd
\end_inset

 (implementations) like 
\begin_inset Quotes eld
\end_inset

plot.lm
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

plot.glm
\begin_inset Quotes erd
\end_inset

, etc.
\end_layout

\begin_deeper
\begin_layout Itemize
A class name follows the period
\end_layout

\begin_layout Itemize
In the R runtime system, calculations are sent among functions by parsing
 the last part of the method name
\end_layout

\end_deeper
\begin_layout Itemize
Your 
\begin_inset Quotes eld
\end_inset

get.parms
\begin_inset Quotes erd
\end_inset

 function makes a reader think there is an object of type 
\begin_inset Quotes eld
\end_inset

parms
\begin_inset Quotes erd
\end_inset

 and a generic function named 
\begin_inset Quotes eld
\end_inset

get
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3.
 Think Carefully on Function Names}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Short names for frequently used functions & arguments
\end_layout

\begin_layout Itemize
Think of R's common pieces.
 When you create your own classes, name your functions similarly.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Variable Names
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{1.
 No funny symbols}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Variable names 
\end_layout

\begin_deeper
\begin_layout Itemize
begin with letters, generally SMALL letters
\end_layout

\begin_layout Itemize
include only letters, numbers, as well as 
\begin_inset Quotes eld
\end_inset

_
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
AND NO math symbols like 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

and 
\begin_inset Quotes eld
\end_inset

+?
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

%
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

^
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

&
\begin_inset Quotes erd
\end_inset

!
\end_layout

\end_deeper
\begin_layout Itemize
See R base function 
\begin_inset Quotes eld
\end_inset

make.names
\begin_inset Quotes erd
\end_inset

 which can clean up name vectors.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{2.
 Variable names to Avoid}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

F
\begin_inset Quotes erd
\end_inset

.
 Cause confusion with abbreviated TRUE and FALSE
\end_layout

\begin_layout Itemize
function names in R.
\end_layout

\begin_deeper
\begin_layout Itemize
Previously, was possible to obliterate R base functions by declaring variables
 like 
\begin_inset Quotes eld
\end_inset

seq
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

rep
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Now still confusing to readers if you name a variable 
\begin_inset Quotes eld
\end_inset

c
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

rep
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3.
 Long and Short: When to be terse?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Long name OK for something you use once or twice
\end_layout

\begin_layout Itemize
If used often, create a 1-5 letter name.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{4.
 Append variations on end of name}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Given a variable
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

uranium
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
don't do this
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

y <- uranium
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
or this
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

logu <- log(uranium)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Please consider this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

uraniumlog <- log(uranium)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{any of these (which are all better than y or logu}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

uraniumln <- log(uranium)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

uranium.log <- log(uranium)
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

uranium_log <- log(uranium)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ulog <- log(uranium)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Why? related things stay together alphabetically! run 
\begin_inset Quotes eld
\end_inset

ls()
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Other Miscellaneous
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{1.
 Work with a fixed width font}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you have a programmer's file editor that uses a proportionally spaced
 font, get a different font, or editor
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{2.
 Use the 
\backslash
#
\backslash
#
\backslash
#, 
\backslash
#
\backslash
#, and 
\backslash
# style for indentations}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
## means a comment indented to match the context
\end_layout

\begin_layout Itemize
### means flush left comment
\end_layout

\begin_layout Itemize
# means comment at far right
\end_layout

\begin_layout Itemize
Advice:
\end_layout

\begin_deeper
\begin_layout Enumerate
don't append comments at end of lines (no matter how tempting to 'save space')
\end_layout

\begin_layout Enumerate
develop a style to insert your comments either before or after lines they
 address.
 Be consistent! I'm trying to remember to use the BEFORE strategy
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3.
 Keep Short line lengths}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Suggestion: 80 characters or less per line
\end_layout

\begin_layout Itemize
While writing code, I'll often have very long lines that take advantage
 of the wide screen.
 Sometimes I forget, but I try to go back and cut lines into 80-100 character
 widths.
\end_layout

\begin_layout Itemize
Some evidence suggests humans read badly with long lines
\end_layout

\begin_layout Itemize
Long lines don't translate well into documents, and they either
\end_layout

\begin_deeper
\begin_layout Itemize
go off the right edge of the page, or
\end_layout

\begin_layout Itemize
have 
\begin_inset Quotes eld
\end_inset

line breaks
\begin_inset Quotes erd
\end_inset

 at bad spots
\end_layout

\end_deeper
\begin_layout Itemize
This is required in R documentation, where packages with very long lines
 in Rd files are rejected.
\end_layout

\begin_layout Itemize
Relates to problem of 
\begin_inset Quotes eld
\end_inset

multi line strings
\begin_inset Quotes erd
\end_inset

, which are discouraged in the wider programming arena, but tolerated in
 R.
\end_layout

\begin_deeper
\begin_layout Itemize
An R user (me) might write all on one line:
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (!c("rcreg") %in% class(object)) stop("predict.rcreg is intended for rcreg
 objects, which are created by residualCenter in the rockchalk package")
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
But it is certainly better to write 3 lines, using paste to connect them
 together:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

 if (!c("rcreg") %in% class(object)) stop(paste("predict.rcreg",
\end_layout

\begin_layout Plain Layout

    "is intended for rcreg objects, which are created",
\end_layout

\begin_layout Plain Layout

    "by residualCenter in the rockchalk package"))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
