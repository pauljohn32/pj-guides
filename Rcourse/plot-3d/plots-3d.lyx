#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass sweavel-beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


\usepackage{graphicx}
\usepackage{listings}
\lstset{tabsize=2, breaklines=true,style=Rstyle}
%\usetheme{Warsaw}
% or ...

%\setbeamercovered{transparent}
% or whatever (possibly just delete it)

\mode<presentation>
{
  \usetheme{KU}
  \usecolortheme{dolphin} %dark blues
}

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}

\newcommand\makebeamertitle{\frame{\maketitle}}%

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}

%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]
\end_preamble
\use_default_options false
\begin_modules
sweave
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch effects
\selected 1
\filename_suffix 0
\color #ffffff
\end_branch
\branch termplot
\selected 1
\filename_suffix 0
\color #ffffff
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Branch R
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

dir.create("plots", showWarnings=F)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=plots/t,split=T,ae=F,height=4,width=6}
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
normalsize} 
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Rcolor{
\backslash
color{black}} 
\end_layout

\begin_layout Plain Layout


\backslash
def
\backslash
Rbackground{
\backslash
color[gray]{0.95}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, echo=F>>=
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

op <- par() 
\end_layout

\begin_layout Plain Layout

pjmar <- c(5.1, 5.1, 1.5, 2.1) 
\end_layout

\begin_layout Plain Layout

#pjmar <- par("mar")
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
3 D Plotting 
\begin_inset Argument
status collapsed

\begin_layout Plain Layout
Descriptive
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Department of Political Science
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

Center for Research Methods and Data Analysis, University of Kansas
\begin_inset Argument
status open

\begin_layout Plain Layout
K.U.
\end_layout

\end_inset


\end_layout

\begin_layout Date
2013
\begin_inset Argument
status open

\begin_layout Plain Layout
2013
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Kinds of 3d Plot}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Static 
\begin_inset Quotes eld
\end_inset

draw on the screen, like R plot
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
persp: in the R base graphics
\end_layout

\begin_layout Itemize
cloud in lattice package
\end_layout

\begin_layout Itemize
scatterplot3d
\end_layout

\end_deeper
\begin_layout Itemize
scatter3d: by John Fox for the car package, uses OpenGL (computer 3d programming
 library)
\end_layout

\begin_deeper
\begin_layout Itemize
interactive and easy to get started
\end_layout

\begin_layout Itemize
can be accessed from Fox's Rcmdr package interface
\end_layout

\begin_layout Itemize
final output not as likely to be 
\begin_inset Quotes eld
\end_inset

publishable
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Here's what we usually want the 3d Plot For}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Show the 
\begin_inset Quotes eld
\end_inset

cloud
\begin_inset Quotes erd
\end_inset

 of points scattered in space
\end_layout

\begin_layout Itemize
Show the 
\begin_inset Quotes eld
\end_inset

predicted plane
\begin_inset Quotes erd
\end_inset

 of a fitted regression model
\end_layout

\begin_layout Itemize
persp can do these things, although it is somewhat tough to grasp at first
\end_layout

\begin_layout Itemize
Why keep trying: persp is in the base of R, so if something is wrong with
 it, it is likely somebody will know how to fix it.
\end_layout

\begin_layout Itemize
If you show up in r-help asking about 3D plotting, many folks there will
 suggest you learn persp, since most other routines draw upon its concepts.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
persp
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{persp is the Place to Start}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The key thing to understand: if your variables are 
\begin_inset Formula $x1$
\end_inset

, 
\begin_inset Formula $x2$
\end_inset

 (the inputs), and 
\begin_inset Formula $z$
\end_inset

 (the output), persp does not 
\begin_inset Quotes eld
\end_inset

want
\begin_inset Quotes erd
\end_inset

 your variables like this
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

persp(x1,x2,z)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
persp requires 
\begin_inset Quotes eld
\end_inset

plotting sequences
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Formula $x1$
\end_inset

 and for 
\begin_inset Formula $x2$
\end_inset

.
 These are not observed values, but rather sequences from the minimum score
 to the maximum.
 
\end_layout

\begin_layout Itemize
For 
\begin_inset Quotes eld
\end_inset

real data,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $x1$
\end_inset

, for example, get the range, then make a sequence: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x1r <- range(x1)
\end_layout

\begin_layout Plain Layout

x1seq <- seq(x1r[1], x1r[2], length.out = 30)
\end_layout

\begin_layout Plain Layout

## or use the rockchalk short-cut
\end_layout

\begin_layout Plain Layout

x1seq <- plotSeq(x1, length.out = 30)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{For z, persp wants a matrix}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Itemize
z has a value for each combination of 
\begin_inset Formula $x1seq$
\end_inset

 and 
\begin_inset Formula $x2seq$
\end_inset


\end_layout

\begin_layout Itemize
Various ways to create, but the 
\begin_inset Quotes eld
\end_inset

outer
\begin_inset Quotes erd
\end_inset

 function is often convenient.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

z <- outer(x1seq, x2seq, FUN)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
FUN is a function that returns a value for each combination of values in
 the 2 sequences
\end_layout

\begin_layout Column
6cm
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x2seq
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{21}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{22}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{23}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{11}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{12}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{13}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x1seq
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{12}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{21}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{22}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{23}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $x_{13}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{31}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{32}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $z_{33}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout ColumnsTopAligned
\begin_inset Formula $z_{11}=f(x_{11},x_{21})$
\end_inset

, and so forth
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Why Does R Call it "outer?"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Remember, an 
\begin_inset Quotes eld
\end_inset

inner product
\begin_inset Quotes erd
\end_inset

 in linear algebra
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\left[\begin{array}{cccc}
a & b & c & d\end{array}\right]\left[\begin{array}{c}
e\\
f\\
g\\
h
\end{array}\right]=ae+bf+cg+dh=??
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
An 
\begin_inset Quotes eld
\end_inset

outer product
\begin_inset Quotes erd
\end_inset

 is
\begin_inset Formula 
\begin{equation}
\left[\begin{array}{c}
e\\
f\\
g\\
h
\end{array}\right]\left[\begin{array}{cccc}
a & b & c & d\end{array}\right]=\left[\begin{array}{cccc}
ea & eb & ec & ed\\
fa & fb & fc & fd\\
ga & gb & gc & gd\\
ha & hb & hc & hd
\end{array}\right]
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create Some Data for a Regression}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed10,echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

x1 <- rnorm(100); x2 <- -4 + rpois(100,lambda=4);
\end_layout

\begin_layout Plain Layout

y = 0.1 * x1 + 0.2 *x2 + rnorm(100);
\end_layout

\begin_layout Plain Layout

dat <- data.frame(x1, x2, y); rm (x1, x2, y)
\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x1 + x2, data=dat)
\end_layout

\begin_layout Plain Layout

summary(m1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create the predictor sequences}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed15,echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

x1r <- range(dat$x1)
\end_layout

\begin_layout Plain Layout

x1seq <- seq(x1r[1], x1r[2], length = 30)
\end_layout

\begin_layout Plain Layout

x2r <- range(dat$x2) 
\end_layout

\begin_layout Plain Layout

x2seq <- seq(x2r[1], x2r[2], length = 30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed15.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create the z matrix}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed20,echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

z <- outer(x1seq, x2seq, function(a, b) predict(m1, newdata = data.frame(x1
 = a, x2 = b)))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed20.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Persp with No Special Settings}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed30,echo=T, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

persp(x = x1seq, y = x2seq, z = z)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed30.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-threed30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Many Opportunities for Beautification}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
xlim,ylim,zlim play same role as in ordinary R plots
\end_layout

\begin_layout Itemize
xlab, ylab, zlab same
\end_layout

\begin_layout Itemize
theta and phi control the viewing angle.
 
\end_layout

\begin_deeper
\begin_layout Itemize
theta moves the viewing angle left and right
\end_layout

\begin_layout Itemize
phi moves it up and down.
 
\end_layout

\end_deeper
\begin_layout Itemize
Example, this 
\begin_inset Quotes eld
\end_inset

raises
\begin_inset Quotes erd
\end_inset

 one's viewing angle (a negative value would lower it)
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

persp(x=x1seq,y=x2seq, z=z, phi=40)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Example, this 
\begin_inset Quotes eld
\end_inset

rotates
\begin_inset Quotes erd
\end_inset

 one's viewing angle to the left
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

persp(x=x1seq,y=x2seq, z=z, theta=-20)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed40,echo=T, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

persp(x = x1seq, y = x2seq, z = z, zlim = c(-3,3), theta = 40)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed50,echo=T, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

persp(x = x1seq, y = x2seq, z = z, zlim = c(-3,3), theta = 40, phi = -20)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "5cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-threed40}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "5cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-threed50}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=5.5cm]{plots/t-threed40}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=5.5cm]{plots/t-threed50}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Everything Else We Draw Has to be "Perspective Adjusted"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This 
\begin_inset Quotes eld
\end_inset

looks
\begin_inset Quotes erd
\end_inset

 3-dimensional, but it is really a flat two dimensional screen
\end_layout

\begin_layout Itemize
Thus, a point to be inserted at 
\begin_inset Formula $(x1=0.3,x2=-2,z=2)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
has to be translated into a position in the 2-dimensional screen
\end_layout

\end_deeper
\begin_layout Itemize
To do that, we use
\end_layout

\begin_deeper
\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

Viewing Transformation Matrix
\begin_inset Quotes erd
\end_inset

 that persp creates
\end_layout

\begin_layout Itemize
trans3d, a function that converts a 3 dimensional coordinate into a 2 dimensiona
l coordinate
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Add Points on a perspective plot}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed60,echo=T, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

res <- persp(x = x1seq, y = x2seq, z = z, zlim = c(-3,3), theta = 40, phi
 = -15)
\end_layout

\begin_layout Plain Layout

mypoints <- trans3d(dat$x1, dat$x2, dat$y, pmat = res)
\end_layout

\begin_layout Plain Layout

points(mypoints, pch = 1, col = "red")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed60}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
persp generates 
\begin_inset Quotes eld
\end_inset

res
\begin_inset Quotes erd
\end_inset

 as a plot by-product
\end_layout

\begin_layout Itemize
res is the perspective transformation matrix (used by trans3d)
\end_layout

\begin_layout Itemize
mypoints is a 2 dimensional value in the 
\begin_inset Quotes eld
\end_inset

surface of the computer screen
\begin_inset Quotes erd
\end_inset

 displaying the 3d plot.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Points overlaid on persp plot via trans3d}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-threed60}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Remember the Fitted Regression model?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Now draw dotted lines from Predicted to Observed Values}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed70,echo=T,fig=F, include=F>>=
\end_layout

\begin_layout Plain Layout

res <- persp(x = x1seq, y = x2seq, z = z, zlim = c(-3,3), theta = 40, phi
 = -15)
\end_layout

\begin_layout Plain Layout

mypoints <- trans3d(dat$x1, dat$x2, dat$y, pmat = res)
\end_layout

\begin_layout Plain Layout

points(mypoints, pch = 1, col = "red")
\end_layout

\begin_layout Plain Layout

vpred <- trans3d(dat$x1, dat$x2, fitted(m1),   pmat = res) 
\end_layout

\begin_layout Plain Layout

vobs <- trans3d(dat$x1, dat$x2, dat$y,   pmat = res) 
\end_layout

\begin_layout Plain Layout

segments(vpred$x, vpred$y, vobs$x, vobs$y, col = "red", lty = 2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This took 8-10 tries
\end_layout

\begin_layout Itemize
Calculate predicted (vpred) and observed values (vobs)
\end_layout

\begin_layout Itemize
Use segments to draw
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed70}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed71, fig=T, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

<<threed60>>
\end_layout

\begin_layout Plain Layout

<<threed70>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{This Makes Me Happy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-threed71}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Plotting Response Surfaces}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
People who fit nonlinear models often want to see the graceful curvature
 of their result
\end_layout

\begin_layout Itemize
Often nice to have some color for drama
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Plotting Response Surfaces: Surprisingly Easy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed80,echo=T,fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

x1 <- rnorm(100); x2 <- rpois(100,lambda=4) 
\end_layout

\begin_layout Plain Layout

logist <- function(x1,x2){
\end_layout

\begin_layout Plain Layout

y <- 1/(1 + exp((-1)*(-3 + 0.6*x1 + .5*x2))) } 
\end_layout

\begin_layout Plain Layout

par(bg = "white") 
\end_layout

\begin_layout Plain Layout

x1r <- range(x1) ; x1seq <- seq(x1r[1], x1r[2], length = 30)
\end_layout

\begin_layout Plain Layout

x2r <- range(x2) ; x2seq <- seq(x2r[1], x2r[2], length = 30)
\end_layout

\begin_layout Plain Layout

z <- outer(x1seq, x2seq, logist)
\end_layout

\begin_layout Plain Layout

persp(x = x1seq, y = x2seq, z = z, theta = -30, zlim = c(-0.2,1.2))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed80}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Curved Surface, but No Color (yet)}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-threed80}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<threed200,echo=T,fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

nrz <- nrow(z)
\end_layout

\begin_layout Plain Layout

ncz <- ncol(z)
\end_layout

\begin_layout Plain Layout

# Create a function interpolating colors in the range of specified colors
\end_layout

\begin_layout Plain Layout

jet.colors <- colorRampPalette( c("blue", "green") )
\end_layout

\begin_layout Plain Layout

# Generate the desired number of colors from this palette
\end_layout

\begin_layout Plain Layout

nbcol <- 100
\end_layout

\begin_layout Plain Layout

color <- jet.colors(nbcol)
\end_layout

\begin_layout Plain Layout

# Compute the z-value at the facet centres
\end_layout

\begin_layout Plain Layout

zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
\end_layout

\begin_layout Plain Layout

# Recode facet z-values into color indices
\end_layout

\begin_layout Plain Layout

facetcol <- cut(zfacet, nbcol)
\end_layout

\begin_layout Plain Layout

persp(x = x1seq, y = x2seq, z = z, col = color[facetcol], theta = -30, zlim
 = c(-0.2,1.2))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-threed200}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Curved Colored Surface}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-threed200}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
scatter3d
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Now try scatter3d and the OpenGL Library Framework}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
OpenGL is an 
\begin_inset Quotes eld
\end_inset

open standards
\begin_inset Quotes erd
\end_inset

 3-D software library (most platforms, newer video cards)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

rgl
\begin_inset Quotes erd
\end_inset

 is an R package that uses OpenGL routines
\end_layout

\begin_layout Itemize
scatter3d is John Fox's R function (in 
\begin_inset Quotes eld
\end_inset

car
\begin_inset Quotes erd
\end_inset

) that uses rgl functions in a very convenient way
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Scatterplot with a Regression Surface}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

scatter3d(y ~ x1 + x2,  data=dat) 
\end_layout

\begin_layout Plain Layout

rgl.snapshot(filename="scat1.png", fmt="png") 
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Note: a 
\begin_inset Quotes eld
\end_inset

formula interface
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
scatter3d handles the creation of 
\begin_inset Quotes eld
\end_inset

plotting sequences
\begin_inset Quotes erd
\end_inset

 and the perspective/trans3d work is hidden
\end_layout

\begin_layout Itemize
left-button mouse click rotates
\end_layout

\begin_layout Itemize
middle-button mouse click 
\begin_inset Quotes eld
\end_inset

zooms
\begin_inset Quotes erd
\end_inset

 the image 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Scatterplot with a Regression Surface}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{importfigs/scat1.png}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Just the Scatter, No Plane}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

scatter3d(y ~ x1 + x2,  data=dat, surface=FALSE) 
\end_layout

\begin_layout Plain Layout

rgl.snapshot(filename="scat2.png", fmt="png")
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Just the Scatter, No Plane}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{importfigs/scat2.png}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Ask For an Ordinary and a Smoothed Regression Surface}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

scatter3d(y ~ x1 + x2,  data=dat, fit=c("linear", "additive"))
\end_layout

\begin_layout Plain Layout

rgl.snapshot(filename = "scat3.png", fmt = "png") 
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Ask For an Ordinary and a Smoothed Regression Surface}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{importfigs/scat3.png}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Evaluation}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
scatter3d makes it 
\emph on
very easy
\emph default
 to get started
\end_layout

\begin_layout Itemize
The GUI in Rcmdr makes it even easier!
\end_layout

\begin_layout Itemize
Great for quick & dirty data exploration
\end_layout

\begin_layout Itemize
Disadvantages
\end_layout

\begin_deeper
\begin_layout Itemize
Output quality not suitable for presentation (labels not 
\begin_inset Quotes eld
\end_inset

sharp
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
png only workable output format at current time (others generate HUGE files)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scatterplot3d
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Confessions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I have tested, but not mastered, these 3d plotting frameworks
\end_layout

\begin_deeper
\begin_layout Itemize
cloud (in lattice)
\end_layout

\begin_layout Itemize
scatterplot3d (package same name)
\end_layout

\end_deeper
\begin_layout Itemize
These try to hide the 
\begin_inset Quotes eld
\end_inset

trans3d
\begin_inset Quotes erd
\end_inset

 problem from the user as much as possible
\end_layout

\begin_layout Itemize
IF you enjoy the 
\end_layout

\begin_deeper
\begin_layout Itemize
plot interface in R, 
\emph on
then
\emph default
 consider scatterplot3d
\end_layout

\begin_layout Itemize
lattice and the xyplot interface, 
\emph on
then 
\emph default
you should consider trying to master 
\begin_inset Quotes eld
\end_inset

cloud
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d Works Quite a Bit Like Plot}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d04,fig=T,echo=T,include=F, width=8, height=5>>=
\end_layout

\begin_layout Plain Layout

library(scatterplot3d)
\end_layout

\begin_layout Plain Layout

x <- rnorm(80); y <- rpois(80,l=7); z <- 3 + 1.1*x + 0.4*y + 15*rnorm(80)
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(x, y, z)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d04}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d: Quite a Bit like plot}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[height=6cm]{plots/t-scatter3d04}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d: Quite a Bit like plot}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Note: Not necessary to construct a z matrix (scatterplot3d handles that)
\end_layout

\begin_layout Itemize
Many options same name as plot: xlab, ylab, type, etc.
\end_layout

\begin_layout Itemize
angle: viewpoint specifier quite unlike other 3d packages
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Use More Arguments: labels, plot character}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d05,fig=T,echo=T,include=F, width=8, height=5>>=
\end_layout

\begin_layout Plain Layout

library(scatterplot3d)
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(x, y, z, type = "p", color = "blue", angle = 45, pch
 = 18, main = "", xlab = "normal x", ylab = "poisson y", zlab = "linear
 z")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d05}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d: Quite a Bit like plot}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[height=6cm]{plots/t-scatter3d05}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d: Also Accepts a "Data Frame" for x}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d10,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

library(scatterplot3d)
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(dat, type = "p", color = "blue", angle = 55, pch =
 16, main = "", xlab = "x1", ylab = "x2", zlab = "y")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-scatter3d10}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Add a plane from a fitted model!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d11,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

library(scatterplot3d)
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(dat, type = "p", color = "blue", angle = 55, pch =
 16, main = "scatterplot3d")
\end_layout

\begin_layout Plain Layout

s3d$plane3d(m1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d11}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Note s3d is the 3d plot object, it is told to draw plane corresponding to
 model m1
\end_layout

\begin_layout Itemize
That 
\begin_inset Quotes eld
\end_inset

internalizes
\begin_inset Quotes erd
\end_inset

 the 
\begin_inset Quotes eld
\end_inset

translate to 3d coordinates
\begin_inset Quotes erd
\end_inset

 works that persp required us to do explicitly
\end_layout

\begin_layout Itemize
supplies function 
\begin_inset Quotes eld
\end_inset

xyz.convert
\begin_inset Quotes erd
\end_inset

 when explicit translation from 3d to 2d is required (in placing text or
 lines)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-scatter3d11}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Add Residual Lines: Quite a Bit Like Using persp}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d12,fig=T,echo=T,include=F>>=
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(dat, type = "p", color = "blue", angle = 55, pch =
 16, main = "scatterplot3d")
\end_layout

\begin_layout Plain Layout

s3d$plane3d(m1, lty = "dotted", lwd = 0.7)
\end_layout

\begin_layout Plain Layout

obser2d <- s3d$xyz.convert(dat$x1, dat$x2, dat$y)
\end_layout

\begin_layout Plain Layout

pred2d <- s3d$xyz.convert(dat$x1, dat$x2, fitted(m1))
\end_layout

\begin_layout Plain Layout

segments(obser2d$x, obser2d$y, pred2d$x, pred2d$y, lty = 4)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d12}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-scatter3d12}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{scatterplot3d: Syntax Closer "Object Oriented" Ideal" }
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
scatterplot3d creates an output object
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=T>>=
\end_layout

\begin_layout Plain Layout

attributes(s3d)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Which can then be told to add points, a plane, etc:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

s3d$plane3d( mod1)
\end_layout

\begin_layout Plain Layout

s3d$points3d(x,y,z, pch=18, col="pink")
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Also works well with plotmath functions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Consider the Bivariate Normal Example from s3d Vignette}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d20,fig=T,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

library(mvtnorm) 
\end_layout

\begin_layout Plain Layout

x1 <- x2 <- seq(-10, 10, length = 51) 
\end_layout

\begin_layout Plain Layout

dens <- matrix(dmvnorm(expand.grid(x1, x2), sigma = rbind(c(3, 2), c(2, 3))),
 ncol = length(x1)) 
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(x1, x2, seq(min(dens), max(dens), length = length(x1)),
 type = "n", grid = FALSE, angle = 70, zlab = expression(f(x[1], x[2])),
 xlab = expression(x[1]), ylab = expression(x[2]), main = "Bivariate normal
 distribution")
\end_layout

\begin_layout Plain Layout

for(i in length(x1):1) {
\end_layout

\begin_layout Plain Layout

  s3d$points3d(rep(x1[i], length(x2)), x2, dens[i,], type = "l") 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

for(i in length(x2):1) { 
\end_layout

\begin_layout Plain Layout

  s3d$points3d(x1, rep(x2[i], length(x1)), dens[,i], type = "l")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

 text(s3d$xyz.convert(-1, 10, 0.07),
\end_layout

\begin_layout Plain Layout

        labels = expression(f(x) == frac(1, sqrt((2 * pi)^n *
\end_layout

\begin_layout Plain Layout

            phantom(".") * det(Sigma[X]))) * phantom(".") * exp * {
\end_layout

\begin_layout Plain Layout

            bgroup("(", - scriptstyle(frac(1, 2) * phantom(".")) *
\end_layout

\begin_layout Plain Layout

                (x - mu)^T * Sigma[X]^-1 * (x - mu), ")")}))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

### fix.
 insert {} around Sigma[X] == ...
 ##
\end_layout

\begin_layout Plain Layout

 text(s3d$xyz.convert(1.5, 10, 0.05),
\end_layout

\begin_layout Plain Layout

        labels = expression("with" * phantom("m") *
\end_layout

\begin_layout Plain Layout

            mu == bgroup("(", atop(0, 0), ")") * phantom(".") * "," *
\end_layout

\begin_layout Plain Layout

                phantom(0) * {Sigma[X] == bgroup("(", atop(3 * phantom(0)
 * 2,
\end_layout

\begin_layout Plain Layout

                2 * phantom(0) * 3), ")") }) )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-scatter3d20}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The first step is the empty box}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d30,fig=T,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

x1 <- x2 <- seq(-10, 10, length = 51) 
\end_layout

\begin_layout Plain Layout

dens <- matrix(dmvnorm(expand.grid(x1, x2), sigma = rbind(c(3, 2), c(2, 3))),
 ncol = length(x1)) 
\end_layout

\begin_layout Plain Layout

s3d <- scatterplot3d(x1, x2, seq(min(dens), max(dens), length = length(x1)),
 type = "n", grid = FALSE, angle = 70, zlab = expression(f(x[1], x[2])),
 xlab = expression(x[1]), ylab = expression(x[2]), main = "Bivariate normal
 distribution")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: type=
\begin_inset Quotes erd
\end_inset

n
\begin_inset Quotes erd
\end_inset

, just like 2D plot function
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-scatter3d30}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Draw the lines from One End to the Other}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d30b,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

for(i in length(x1):1){
\end_layout

\begin_layout Plain Layout

   s3d$points3d(rep(x1[i], length(x2)), x2, dens[i,], type = "l")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d40,fig=T,echo=F,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

<<scatter3d30>>
\end_layout

\begin_layout Plain Layout

<<scatter3d30b>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d30b}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
in English: for each value of x1, draw a line from 
\begin_inset Quotes eld
\end_inset

front to back
\begin_inset Quotes erd
\end_inset

 that traces out the density at (x1,x2).
\end_layout

\begin_layout Itemize
The for loop goes to each value of x1
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

for (i in length(x1):1){ ...
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
inserts points from lowest x2 to highest x2 and connects them by a line
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

s3d$points3d( ...
 type=l)
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Lines in One Direction}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-scatter3d40}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Draw Lines the Other Way}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d30c,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

for(i in length(x2):1) {
\end_layout

\begin_layout Plain Layout

  s3d$points3d(x1, rep(x2[i], length(x1)), dens[,i], type = "l")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
for each x2, draw a line from lowest to highest x1
\end_layout

\begin_layout Itemize
line traces out density at (x1,x2)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d50,fig=T,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

<<scatter3d30>>
\end_layout

\begin_layout Plain Layout

<<scatter3d30b>>
\end_layout

\begin_layout Plain Layout

<<scatter3d30c>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d30c}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Draw Lines the Other Way}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-scatter3d50}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Use R's text function with plotmath to Write Equation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d30d,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

text(s3d$xyz.convert(-1, 10, 0.07),labels = expression(f(x) == frac(1, sqrt((2
 * pi)^n * phantom(".") * det(Sigma[X]))) * phantom(".") * exp * { bgroup("(",
 - scriptstyle(frac(1, 2) * phantom(".")) *
\end_layout

\begin_layout Plain Layout

(x - mu)^T * Sigma[X]^-1 * (x - mu), ")")}))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

### fix.
 insert {} around Sigma[X] == ...
 ##
\end_layout

\begin_layout Plain Layout

text(s3d$xyz.convert(1.5, 10, 0.05), labels = expression("with" * phantom("m")
 * mu == bgroup("(", atop(0, 0), ")") * phantom(".") * "," * phantom(0) *
 {Sigma[X] == bgroup("(", atop(3 * phantom(0) * 2, 2 * phantom(0) * 3),
 ")") }) )
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<scatter3d70,fig=T,echo=T,include=F, height=8, width=8>>=
\end_layout

\begin_layout Plain Layout

<<scatter3d30>>
\end_layout

\begin_layout Plain Layout

<<scatter3d30b>>
\end_layout

\begin_layout Plain Layout

<<scatter3d30c>>
\end_layout

\begin_layout Plain Layout

<<scatter3d30d>>
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
def
\backslash
Sweavesize{
\backslash
scriptsize}
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-scatter3d30d}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first one is the probability density function (PDF)
\end_layout

\begin_layout Standard
The second one is the Expected Value and Variance matrix
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Use Plotmath}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-scatter3d70}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{About cloud}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Like other procedures in the lattice package (tremendous result for small
 effort)
\end_layout

\begin_layout Itemize
More difficult to customize plots (my humble opinion)
\end_layout

\begin_layout Itemize
Convenient presentation of plots 
\begin_inset Quotes eld
\end_inset

by group
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

by sex
\begin_inset Quotes erd
\end_inset

 or such.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
rockchalk
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{3D Tools in rockchalk}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The lack of adjust-ability of scatterplot3d caused me to not rely on it
 too heavily
\end_layout

\begin_layout Itemize
I don't want to interactively point-and-click the way rgl requires.
\end_layout

\begin_layout Itemize
I could not make lattice output combine different components in the way
 I wanted to.
 
\end_layout

\begin_layout Itemize
But I could make persp work, sometimes.
\end_layout

\begin_layout Itemize
So I kept track of thinks I could succeed with and boiled them down to functions
 in rockchalk.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subsection{mcGraph}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc1-0, include=F, echo=T>>=
\end_layout

\begin_layout Plain Layout

## Create data with x1 and x2 correlated at 0.10
\end_layout

\begin_layout Plain Layout

require(rockchalk)
\end_layout

\begin_layout Plain Layout

dat <- genCorrelatedData(rho=0.10, stde=7)
\end_layout

\begin_layout Plain Layout

par(mar= c(1,1,1,1))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Depicting Multicollinearity: My first 3d functions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
mcGraph1(x1, x2, y): Creates an 
\begin_inset Quotes eld
\end_inset

empty box
\begin_inset Quotes erd
\end_inset

 showing the footprint of the (x1,x2) pairs in the bottom of the display.
\end_layout

\begin_layout Itemize
mcGraph2(x1, x2, y, rescaley=0.5): Shows points 
\begin_inset Quotes eld
\end_inset

rising above
\begin_inset Quotes erd
\end_inset

 footprint
\end_layout

\begin_layout Itemize
mcGraph3(x1, x2, y): fits a regression of y on x1 and x2, and plots it.
 Includes optional interaction term.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{mcGraph1}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc1-1, include=F, fig=T, echo=T>>=
\end_layout

\begin_layout Plain Layout

mod1 <- mcGraph1(dat$x1, dat$x2, dat$y, theta=-30, phi=8)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
No values drawn yet for dependent variable
\end_layout

\begin_layout Itemize
Please notice dispersion in the x1-x2 plane
\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{plots/t-mc1-1.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc1-1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{mcGraph uses rescaley argument}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\rho_{x1,x2}=0.1$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-1, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.1, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-1.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-3, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.2, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-3.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-3.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-5, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.3, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-5.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-5.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-6, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.4, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-6.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-6.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-7, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.5, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-7.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-7.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-8, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.6, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-8.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-8.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-9, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.7, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-9.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-9.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-10, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.80, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-10.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-10.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-11, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 0.90, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-11.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-11.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step up rescaley bit by bit, its almost a movie!}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
The true relationship is
\begin_inset Formula 
\[
y_{i}=.2\, x1_{i}+.2\, x2_{i}+e_{i},\, e_{i}\sim N(0,7^{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-13, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 1.0, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-13.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-13.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can Spin the Cloud (Just Showing Off)}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
2cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-20, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 1.0, theta = 20)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
10cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-20.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-20.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can Spin the Cloud (Just Showing Off)}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
2cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-21, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 1.0, theta = 40)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
10cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-21.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-21.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can Spin the Cloud (Just Showing Off)}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
2cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-22, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 1.0, theta = 60)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
10cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-22.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-22.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Can Spin the Cloud (Just Showing Off)}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
2cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-23, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat$x1, dat$x2, dat$y, rescaley = 1.0, theta = 80)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-2-23.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-23.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Regression Plane Sits Nicely in the Data Cloud}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
3cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-50, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod1 <- mcGraph3(dat$x1, dat$x2, dat$y, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-50m, echo=F, include=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(mod1[[1]], tight=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-50m}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-50.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-50.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Regression Plane Sits Nicely in the Data Cloud}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
3cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-51, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod1 <- mcGraph3(dat$x1, dat$x2, dat$y, theta = -10, phi=0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-51m, fig=T, echo=F, include=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(mod1[[1]], tight=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-51m}
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-51.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-51.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Regression Plane Sits Nicely in the Data Cloud}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
3cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-52, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod1 <- mcGraph3(dat$x1, dat$x2, dat$y, theta = -10, phi=-10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-2-52m,echo=F, include=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

mod1 <- mcGraph3(dat$x1, dat$x2, dat$y, theta = -10, phi=-10)
\end_layout

\begin_layout Plain Layout

outreg(mod1[[1]], tight=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-52m}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-2-52.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-2-52.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Severe Collinearity: r(x1,x2)=0.9}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
3cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

## Create data with x1 and x2 correlated at 0.10
\end_layout

\begin_layout Plain Layout

rm(dat)
\end_layout

\begin_layout Plain Layout

dat2 <- genCorrelatedData(rho=0.9, stde=7)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(0.5,0.5,0.5,0.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-3-1, include=F, fig=T, echo=T>>=
\end_layout

\begin_layout Plain Layout

mod2 <- mcGraph1(dat2$x1, dat2$x2, dat2$y, theta=20, phi=8)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Nearly linear dispersion in the x1-x2 plane
\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-3-1.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-3-1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Cloud Is More like Data Tube}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(0.5,0.5,0.5,0.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(0.5,0.5,0.5,0.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-3-2, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph2(dat2$x1, dat2$x2, dat2$y, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-3-2.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-3-2.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Cloud Is More like Data Tube}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(0.5,0.5,0.5,0.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-3-3, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph3(dat2$x1, dat2$x2, dat2$y, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-3-3m, echo=F, include=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(mod[[1]], tight=F)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-mc-3-3m}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
plane does not sit 
\begin_inset Quotes eld
\end_inset

comfortably
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
greater standard errors
\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-mc-3-3.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-3-3.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Fit Interaction 
\backslash
texttt{lm(y $
\backslash
sim~$ x1 * x2)}}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(0.5,0.5,0.5,0.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-3-4, fig=T, echo=T, include=F>>=
\end_layout

\begin_layout Plain Layout

mod <- mcGraph3(dat2$x1, dat2$x2, dat2$y, interaction=TRUE, theta = -30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<mc-3-4m, echo=F, include=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(mod[[1]], tight=F)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-mc-3-4m}
\end_layout

\end_inset


\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=8cm]{plots/t-mc-3-4.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{plots/t-mc-3-4.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subsection{plotPlane}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Next Step: Plot any Fitted Regression}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
After mcGraph worked, I was encouraged (because I could fill up a whole
 lecture on multicollinearity)
\end_layout

\begin_layout Itemize
But the mcGraph interface was too limiting 
\end_layout

\begin_deeper
\begin_layout Itemize
had to specify and provide variables
\end_layout

\begin_layout Itemize
could not work with larger regression models
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{plotPlane: quick regression tool for presentations}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Itemize
Generate data, fit a model with 4 predictors, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp10, echo=T, fig=F, include=F>>=
\end_layout

\begin_layout Plain Layout

dat3 <- genCorrelatedData(N=150, beta = c(0, 0.15, 0.25, 0.1), stde = 150)
\end_layout

\begin_layout Plain Layout

dat3$x3 <- rpois(150, lambda = 7)
\end_layout

\begin_layout Plain Layout

dat3$x4 <- rgamma(150, 2, 1)
\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x1 + x2 + x3 + x4, data=dat3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small{
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-pp10}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp10m, echo=F, fig=F, include=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

outreg(m1, tight = F)
\end_layout

\begin_layout Plain Layout

par(mar=c(1,0.5,0.5,0.5))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small{
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-pp10m}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{plotPlane: choose x1 and x2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp20, echo=T, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

plotPlane(m1, plotx1 = "x1", plotx2 = "x2", theta = -40, npp = 15, drawArrows
 = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small{
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-pp20}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-pp20.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{plotPlane: choose x1 and x2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp25, echo=T, fig=T, include=F>>=
\end_layout

\begin_layout Plain Layout

plotPlane(m1, plotx1 = "x1", plotx2 = "x2", theta = -40, npp = 8, llwd =
 0.105, drawArrows = TRUE, ticktype = "detailed")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small{
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-pp25}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-pp25.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Interchange Information between 2D and 3D plots}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp30, echo=T, fig=T, include=F, height=4, width=5>>=
\end_layout

\begin_layout Plain Layout

ps30 <- plotSlopes(m1, plotx = "x1", modx = "x2", modxVals = "std.dev.", llwd
 = 3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
Putting x3 and x4 at their means, plot the predicted values for several
 values of x2 with plotSlopes
\end_layout

\begin_layout ColumnsTopAligned
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
small{
\end_layout

\begin_layout Plain Layout


\backslash
input{plots/t-pp30}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned
The output object ps30 has information in it that can be used to supplement
 a 3D graph.
\end_layout

\begin_deeper
\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{plots/t-pp30.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Compare 3D and 2D depictions}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp50, fig=T, echo=F, include=F, height=5>>= 
\end_layout

\begin_layout Plain Layout

## method 1: "linesFrom" in plotPlane
\end_layout

\begin_layout Plain Layout

#pp50 <- plotPlane(m1, plotx1 = "x1", plotx2 = "x2", linesFrom = ps30)
\end_layout

\begin_layout Plain Layout

## method 2: addLines as secondary step:
\end_layout

\begin_layout Plain Layout

pp50 <- plotPlane(m1, plotx1 = "x1", plotx2 = "x2", llwd = 1, npp = 8)
\end_layout

\begin_layout Plain Layout

addLines(to = pp50, from = ps30, lwd = 6)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{plots/t-pp30.pdf}
\end_layout

\end_inset


\end_layout

\begin_layout Column
6cm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=7cm]{plots/t-pp50.pdf}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Next Step: Visualization of Factor Predictors}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Suppose x2 is a categorical variable.
 
\end_layout

\begin_layout Itemize
Shouldn't force that to a numeric scale and 3D plot with an ordinary plane,
 should we?
\end_layout

\begin_layout Itemize
lattice package tools can draw one plot per level of the factor (maybe that's
 best)
\end_layout

\begin_layout Itemize
But I've wrestled trying to find a more informative view
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp100A,include=F>>=
\end_layout

\begin_layout Plain Layout

xf <- gl(4, 20)
\end_layout

\begin_layout Plain Layout

xfn <- as.numeric(xf)
\end_layout

\begin_layout Plain Layout

x1 <- rnorm(80)
\end_layout

\begin_layout Plain Layout

x2 <- rnorm(80)
\end_layout

\begin_layout Plain Layout

xfcontrasts <- contrasts(xf)[xf, ]
\end_layout

\begin_layout Plain Layout

y <- 2 + 0.2 * x1 + xfcontrasts %*% c(0.1, 0.2, -0.04) + rnorm(80, s=3)
\end_layout

\begin_layout Plain Layout

dat <- data.frame(xf, xfn, x1, x2, y) 
\end_layout

\begin_layout Plain Layout

rm(xf, xfn, x1, x2, y) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp100B, include=F, fig=T>>=
\end_layout

\begin_layout Plain Layout

drawGroup <- function(j, dat){
\end_layout

\begin_layout Plain Layout

    newdat1 <- data.frame(x1=plotSeq(dat$x1, length.out=2), x2 = mean(dat$x2,
 na.rm=TRUE), xf= levels(dat$xf)[j])
\end_layout

\begin_layout Plain Layout

    newdat1$fit <- predict(m1, newdata= newdat1)
\end_layout

\begin_layout Plain Layout

    yseq <-  plotSeq(dat$y[dat$xfn == j], length.out=8)
\end_layout

\begin_layout Plain Layout

    yseq <- mean(yseq) + 0.95 * (yseq - mean(yseq))
\end_layout

\begin_layout Plain Layout

    x1seq <- plotSeq(dat$x1[dat$xfn == j], length.out=8)
\end_layout

\begin_layout Plain Layout

    x1seq <- mean(x1seq) + 0.95 * (x1seq - mean(x1seq))
\end_layout

\begin_layout Plain Layout

    for ( z in yseq){
\end_layout

\begin_layout Plain Layout

        lines( trans3d(range(x1seq),  rep(unique(dat$xfn)[j],2),  c(z,z),
 res), lwd=0.2, col= mycol[j])
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    for ( jj in x1seq){
\end_layout

\begin_layout Plain Layout

        lines(trans3d(c(jj,jj), rep(unique(dat$xfn)[j],2), range(yseq),
 res), lwd=0.2, col=mycol[j])
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    lines(trans3d(newdat1$x1, j, newdat1$fit, res), col=mycol[j])
\end_layout

\begin_layout Plain Layout

    with(dat[dat$xfn %in% j, ],  points(trans3d(x1, j, y, res), col=mycol[j]))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x1 * xf+ x2, data=dat)
\end_layout

\begin_layout Plain Layout

#res <- perspEmpty(x1=dat$x1, x2=dat$xfn, y=dat$y, x1lab="x1 numeric", x2lab="x2
 categorical", #theta=80, phi=15, ticktype="detailed")
\end_layout

\begin_layout Plain Layout

#mycol <- rainbow(7:14)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#drawGroup(1, dat)
\end_layout

\begin_layout Plain Layout

#drawGroup(4, dat)
\end_layout

\begin_layout Plain Layout

#drawGroup(3, dat)
\end_layout

\begin_layout Plain Layout

#drawGroup(2, dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Group 1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp201, include=F, fig=T>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(2.5,1, 1, 1))
\end_layout

\begin_layout Plain Layout

res <- perspEmpty(x1 = plotSeq(dat$x1, 5), x2 = 1:length(levels(dat$xf)),
 y=dat$y, x1lab="x1 numeric", x2lab="x2 categorical", theta=80, phi=15,
 ticktype="detailed")
\end_layout

\begin_layout Plain Layout

mycol <- rainbow(7:14)
\end_layout

\begin_layout Plain Layout

drawGroup(1, dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-pp201}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Group 1, Group 4}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp202, include=F, fig=T>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(2.5,1, 1, 1))
\end_layout

\begin_layout Plain Layout

res <- perspEmpty(x1 = plotSeq(dat$x1, 5), x2 = 1:length(levels(dat$xf)),
 y = dat$y, x1lab="x1 numeric", x2lab="x2 categorical", theta=80, phi=15,
 ticktype="detailed")
\end_layout

\begin_layout Plain Layout

mycol <- rainbow(7:14)
\end_layout

\begin_layout Plain Layout

drawGroup(1, dat)
\end_layout

\begin_layout Plain Layout

drawGroup(4, dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-pp202}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Groups 1-4}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<pp203, include=F, fig=T>>=
\end_layout

\begin_layout Plain Layout

par(mar=c(2.5,1, 1, 1))
\end_layout

\begin_layout Plain Layout

res <- perspEmpty(x1 = plotSeq(dat$x1, 5), x2 = 1:length(levels(dat$xf)),
 y=dat$y, x1lab="x1 numeric", x2lab="x2 categorical", theta=80, phi=15,
 ticktype="detailed")
\end_layout

\begin_layout Plain Layout

mycol <- rainbow(7:14)
\end_layout

\begin_layout Plain Layout

drawGroup(1, dat)
\end_layout

\begin_layout Plain Layout

drawGroup(4, dat)
\end_layout

\begin_layout Plain Layout

drawGroup(3, dat)
\end_layout

\begin_layout Plain Layout

drawGroup(2, dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=10cm]{plots/t-pp203}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Conclusion}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you can 
\begin_inset Quotes eld
\end_inset

sketch
\begin_inset Quotes erd
\end_inset

 what you want with a pencil, you can probably get R to draw you a good
 example.
\end_layout

\begin_layout Itemize
Search (AGGRESSIVELY) for working example code from problems like yours.
 Accumulate them whenever you find them.
\end_layout

\begin_layout Itemize
If you want a quick view of a regression model--either linear or not linear--I'd
 suggest plotPlane
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
