#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble

\usepackage{dcolumn}
\usepackage{booktabs}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


\usepackage{graphicx}
\usepackage{listings}

\mode<presentation>
{
  \usetheme{Antibes}
}

\usepackage{fancyvrb}
% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}



\providecommand{\Rcolor}{\color[rgb]{0, 0.5, 0.5}}
\providecommand{\Routcolor}{\color[rgb]{0.461, 0.039, 0.102}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.043, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.95}}
\providecommand{\Routbackground}{\color[gray]{0.80}}
% Can specify \color[gray]{1} for white background or just \color{white}


\lstdefinestyle{Rstyle}{fancyvrb=false,escapechar=`,language=R,%
                        basicstyle={\Rcolor\footnotesize},%
                        backgroundcolor=\Rbackground,%
           tabsize=2,%
                        showstringspaces=false,%
                        keywordstyle=\Rcolor,%
                        commentstyle={\Rcommentcolor\ttfamily\itshape},%
                        literate={<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$^{\scriptstyle\wedge}$}}1,%
                        alsoother={$},%
                        alsoletter={.<-},%
                        otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                        escapeinside={(*}{*)}}%
% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routstyle}{fancyvrb=false,literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
 frame=single,framerule=0.2pt,framesep=1pt,basicstyle=\Routcolor\Sweavesize,%
 backgroundcolor=\Routbackground}


\lstnewenvironment{Sinput}{\lstset{style=Rstyle}}{}
\lstnewenvironment{Scode}{\lstset{style=Rstyle}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routstyle}}{}

\lstset{tabsize=2,basicstyle=\footnotesize, breaklines=true,style=Rstyle}
%\usetheme{Warsaw}
% or ...

%\setbeamercovered{transparent}
% or whatever (possibly just delete it)


%%not for article, but for presentation
\mode<presentation>
%\newcommand\makebeamertitle{\frame{\maketitle}}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}


\expandafter\def\expandafter\insertshorttitle\expandafter{%
 \insertshorttitle\hfill\insertframenumber\,/\,\inserttotalframenumber}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Fake Foreign Interface (FFI-2)
\begin_inset Argument
status open

\begin_layout Plain Layout
ffi-2
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Department of Political Science
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
2
\end_layout

\end_inset

Center for Research Methods and Data Analysis, University of Kansas
\begin_inset Argument
status open

\begin_layout Plain Layout
K.U.
\end_layout

\end_inset


\end_layout

\begin_layout Date
2013
\begin_inset Argument
status open

\begin_layout Plain Layout
2013
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
General 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What this Lecture is About}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Some R packages masquerade as usages of the foreign function interface.
 
\end_layout

\begin_layout Itemize
They follow this approach.
 From R:
\end_layout

\begin_deeper
\begin_layout Itemize
Write a text file of program syntax for the other program
\end_layout

\begin_layout Itemize
Use R commands to interact with the operating system
\end_layout

\begin_deeper
\begin_layout Itemize
Call a compiler on that syntax if necessary
\end_layout

\begin_layout Itemize
Run the program in a separate shell
\end_layout

\begin_layout Itemize
That other program must write results on disk
\end_layout

\end_deeper
\begin_layout Itemize
Use R to harvest the results from the disk file
\end_layout

\end_deeper
\begin_layout Itemize
Examples: OpenBUGS (BUGS code), SabreR (Fortran), MPlusAutomation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Helpful R Functions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{paste and paste0: Combine text with values}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Read ?paste 
\end_layout

\begin_deeper
\begin_layout Itemize
creates text strings that can be written into files
\end_layout

\begin_layout Itemize
can interleave text with values from the R session
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> A <- 18
\end_layout

\begin_layout Plain Layout

> B <- 0.1
\end_layout

\begin_layout Plain Layout

> myStr <- paste("A is: ", A, "B is: ", B)
\end_layout

\begin_layout Plain Layout

> myStr
\end_layout

\begin_layout Plain Layout

[1] "A is: 18 B is: 0.1"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{paste and paste0: Combine text with values}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Default paste will insert one blank space between arguments
\end_layout

\begin_deeper
\begin_layout Itemize
can be controlled by argument sep=
\begin_inset Quotes erd
\end_inset


\begin_inset Quotes erd
\end_inset

 (sep equals quoted nothing!)
\end_layout

\begin_layout Itemize
or the new paste0 function, which is the same as paste, except it does not
 insert spaces.
\end_layout

\end_deeper
\begin_layout Itemize
paste is vectorized.
 For example:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> B <- c(0.1, 0.2, 0.3)
\end_layout

\begin_layout Plain Layout

> paste("Combining A:", A, "and B:", B)
\end_layout

\begin_layout Plain Layout

[1] "Combining A: 18 and B: 0.1" "Combining A: 18 and B: 0.2"
\end_layout

\begin_layout Plain Layout

[3] "Combining A: 18 and B: 0.3"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{gsub: for replacing text strings}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Read ?gsub.
 gsub can replace a string with a value in a text variable.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> str1 <- "mary had a little tiger"
\end_layout

\begin_layout Plain Layout

> gsub("tiger", "lamb", str1)
\end_layout

\begin_layout Plain Layout

[1] "mary had a little lamb"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The second argument need not be a character string.
 It can also be an R variable name.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{gsub: for replacing text strings}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Consider a tedious usage of paste:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> myStr <-paste("A is: ", A, "And A is still:", A, "after we look at A,
 which is", A)
\end_layout

\begin_layout Plain Layout

> myStr
\end_layout

\begin_layout Plain Layout

[1] "A is:  18 And A is still: 18 after we look at A, which is 18"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
That's a silly example, but many projects that write code for Mplus or SAS
 need to get some value and put it in text in several different places.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{gsub: for replacing text strings}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Consider this less tedious alternative, which uses a 
\begin_inset Quotes eld
\end_inset

marker
\begin_inset Quotes erd
\end_inset

 VALA for the value of A
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> myStr2 <- "A is: VALA And A is still: VALA after we look at A, which is
 VALA"
\end_layout

\begin_layout Plain Layout

> myStr3 <- gsub("VALA", A, myStr2)
\end_layout

\begin_layout Plain Layout

> myStr3
\end_layout

\begin_layout Plain Layout

[1] "A is: 18 And A is still: 18 after we look at A, which is 18"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Generally, if a paste command repeatedly has to insert the same value, I
 believe it is smarter to use gsub than it is to write tedious paste code.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{cat: for writing files}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Read ?cat
\end_layout

\begin_layout Itemize
because ...
 is first, all arguments after that must be NAMED.
\end_layout

\begin_layout Itemize
file = 
\begin_inset Quotes eld
\end_inset

some-good-name.txt
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
file must be a valid character string for the output file name
\end_layout

\end_deeper
\begin_layout Itemize
append = TRUE or FALSE
\end_layout

\begin_deeper
\begin_layout Itemize
append arguments controls whether an existing file will be erased and replaced
 when cat runs.
\end_layout

\end_deeper
\begin_layout Itemize
sep = 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
can simplify the entry of information by inserting a blank line after each
 element.
\end_layout

\end_deeper
\begin_layout Itemize
I've never needed to change the fill or label options.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{cat: for writing files}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Simplest possible example:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> cat("Hello, my name is 
\backslash
n Paul.
 Who 
\backslash
n are 
\backslash
n you", file="practice.txt")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The output file will look like this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Hello, my name is
\end_layout

\begin_layout Plain Layout

 Paul.
 Who
\end_layout

\begin_layout Plain Layout

 are
\end_layout

\begin_layout Plain Layout

 you
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Note 
\end_layout

\begin_deeper
\begin_layout Itemize
Effect of 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

 (new line)
\end_layout

\begin_layout Itemize
indentation of lines 2-4 due to spaces I typed in after 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

 (possibly an accident on my part!)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Two more convenient ways to get new lines}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Method 1: use sep=
\begin_inset Quotes erd
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cat("Hello, my name is", "Paul.
 Who","are","you", sep="
\backslash
n", file="practice2.txt"))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The output file will look like this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Hello, my name is
\end_layout

\begin_layout Plain Layout

Paul.
 Who
\end_layout

\begin_layout Plain Layout

are
\end_layout

\begin_layout Plain Layout

you
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Two more convenient ways to get new lines}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Method 2: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

myMessage <- 'Hello, my name is
\end_layout

\begin_layout Plain Layout

Paul.
 Who
\end_layout

\begin_layout Plain Layout

are
\end_layout

\begin_layout Plain Layout

you'
\end_layout

\begin_layout Plain Layout

cat(myMessage, file = "practice3.txt")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The output file will be identical to the result from Method 1.
 
\end_layout

\begin_layout Itemize
In my opinion, this approach is more readable.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Writing Scripts From R
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{We want to write an Mplus script file}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's an example of an Mplus command file that receives a file called 
\begin_inset Quotes eld
\end_inset

rundata.dat
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TITLE:
\end_layout

\begin_layout Plain Layout

  Alternative Fit Indices
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DATA:
\end_layout

\begin_layout Plain Layout

  FILE IS "rundata.dat";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

VARIABLE:
\end_layout

\begin_layout Plain Layout

  NAMES ARE y1-y6 cluster;
\end_layout

\begin_layout Plain Layout

  USEVARIABLES ARE y1-y6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MODEL:
\end_layout

\begin_layout Plain Layout

  F1 BY y1-y3*.7;
\end_layout

\begin_layout Plain Layout

  F2 BY y4-y6*.7;
\end_layout

\begin_layout Plain Layout

  y1-y6*.51;
\end_layout

\begin_layout Plain Layout

  F1@1.0;
\end_layout

\begin_layout Plain Layout

  F2@1.0;
\end_layout

\begin_layout Plain Layout

  F1 WITH F2*.3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

  STDYX;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Write that From R}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The work of writing that file from R is quite simple, of course, if nothing
 needs to be changed.
 
\end_layout

\begin_layout Standard
Make a giant quoted string variable, including the carriage returns in the
 obvious way, and cat it out.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mpprog <- '
\end_layout

\begin_layout Plain Layout

TITLE:
\end_layout

\begin_layout Plain Layout

  Alternative Fit Indices;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DATA:
\end_layout

\begin_layout Plain Layout

  FILE IS "rundata.dat";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

VARIABLE:
\end_layout

\begin_layout Plain Layout

  NAMES ARE y1-y6 cluster;
\end_layout

\begin_layout Plain Layout

  USEVARIABLES ARE y1-y6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MODEL:
\end_layout

\begin_layout Plain Layout

  F1 BY y1-y3*.7;
\end_layout

\begin_layout Plain Layout

  F2 BY y4-y6*.7;
\end_layout

\begin_layout Plain Layout

  y1-y6*.51;
\end_layout

\begin_layout Plain Layout

  F1@1.0;
\end_layout

\begin_layout Plain Layout

  F2@1.0;
\end_layout

\begin_layout Plain Layout

  F1 WITH F2*.3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

  STDYX;
\end_layout

\begin_layout Plain Layout

'
\end_layout

\begin_layout Plain Layout

cat(mpprog, file = "myMplus.inp")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: No need for 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

 when the string is multi-line.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{That is MUCH better than a long set of cat commands}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One of my students figured out that this 
\begin_inset Quotes eld
\end_inset

works
\begin_inset Quotes erd
\end_inset

, and then he taught all of the other students to follow the same tedious
 style.
 This ugly style of coding is surprising attractive to R novices:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

myFile <- "MyMplusCode.inp"
\end_layout

\begin_layout Plain Layout

cat("TITLE: 
\backslash
n", file = myFile)
\end_layout

\begin_layout Plain Layout

cat("Alternative Fit Indices; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("DATA: 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  FILE IS 
\backslash
"rundata.dat
\backslash
"; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("VARIABLE: 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  NAMES ARE y1-y6 cluster;
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  USEVARIABLES ARE y1-y6;
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

cat("MODEL: 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  F1 BY y1-y3*.7; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  F2 BY y4-y6*.7; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  y1-y6*.51; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  F1@1.0; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  F2@1.0; 
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  F1 WITH F2*.3; 
\backslash
n",file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

cat("OUTPUT:
\backslash
n",file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat("  STDYX;
\backslash
n", file = myFile, append = TRUE)
\end_layout

\begin_layout Plain Layout

'
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Note: 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

 is required in this style
\end_layout

\begin_layout Itemize
This is annoying, tedious and difficult to maintain, in my opinion.
\end_layout

\begin_layout Itemize
If you really do want to treat each line of code separately, be less odious:
 
\end_layout

\begin_deeper
\begin_layout Itemize
use only one cat function
\end_layout

\begin_layout Itemize
use the sep = 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

 argument, like so:
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

myFile <- "MyMplusCode.inp"
\end_layout

\begin_layout Plain Layout

cat("TITLE:",
\end_layout

\begin_layout Plain Layout

"  Alternative Fit Indices;",
\end_layout

\begin_layout Plain Layout

" ",
\end_layout

\begin_layout Plain Layout

"DATA:",
\end_layout

\begin_layout Plain Layout

"  FILE IS 
\backslash
"rundata.dat
\backslash
";",
\end_layout

\begin_layout Plain Layout

" ", 
\end_layout

\begin_layout Plain Layout

"VARIABLE:",
\end_layout

\begin_layout Plain Layout

"  NAMES ARE y1-y6 cluster;",
\end_layout

\begin_layout Plain Layout

"  USEVARIABLES ARE y1-y6;",
\end_layout

\begin_layout Plain Layout

"  ",
\end_layout

\begin_layout Plain Layout

"MODEL:",
\end_layout

\begin_layout Plain Layout

"  F1 BY y1-y3*.7;",
\end_layout

\begin_layout Plain Layout

"  F2 BY y4-y6*.7;",
\end_layout

\begin_layout Plain Layout

"  y1-y6*.51;",
\end_layout

\begin_layout Plain Layout

"  F1@1.0;",
\end_layout

\begin_layout Plain Layout

"  F2@1.0;",
\end_layout

\begin_layout Plain Layout

"  F1 WITH F2*.3;",
\end_layout

\begin_layout Plain Layout

"  ",
\end_layout

\begin_layout Plain Layout

"OUTPUT:",
\end_layout

\begin_layout Plain Layout

"  STDYX;", sep = "
\backslash
n", file = myFile)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Complications arise in "adjusting" the output file}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Suppose the user's R code generates 100s of data files, named 
\begin_inset Quotes eld
\end_inset

data-1.dat
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

data-2.dat
\begin_inset Quotes erd
\end_inset

 ...
\end_layout

\begin_layout Itemize
So we need to write separate Mplus command files, one for each data file
\end_layout

\begin_layout Itemize
That means we need to edit the above code, to replace the word 
\begin_inset Quotes eld
\end_inset

rundata.dat
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Quotes eld
\end_inset

data-1.dat
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

data-2.dat
\begin_inset Quotes erd
\end_inset

 and so forth.
 And we need a unique name for each of those Mplus files.
\end_layout

\begin_layout Itemize
In the following example, I'll just demonstrate code that works for one
 particular run (will be obvious to reader how to write a for loop that
 does same for all values of 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{My suggested method for "splicing in" data-7.dat}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Necessary to use one paste to combine the text string with the run number.
\end_layout

\begin_layout Standard
Necessitates breaking the text block of the program into separate pieces.
\end_layout

\begin_layout Standard
Can write in one large cat command, but seems more manageable to do this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

run <- 7
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mpprog1 <- '
\end_layout

\begin_layout Plain Layout

TITLE:
\end_layout

\begin_layout Plain Layout

  Alternative Fit Indices;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DATA:
\end_layout

\begin_layout Plain Layout

  FILE IS '
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mpprog2 <- paste("
\backslash
"data-", run, ".dat
\backslash
"; 
\backslash
n", sep = "")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mpprog3 <- '
\end_layout

\begin_layout Plain Layout

VARIABLE:
\end_layout

\begin_layout Plain Layout

  NAMES ARE y1-y6 cluster;
\end_layout

\begin_layout Plain Layout

  USEVARIABLES ARE y1-y6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MODEL:
\end_layout

\begin_layout Plain Layout

  F1 BY y1-y3*.7;
\end_layout

\begin_layout Plain Layout

  F2 BY y4-y6*.7;
\end_layout

\begin_layout Plain Layout

  y1-y6*.51;
\end_layout

\begin_layout Plain Layout

  F1@1.0;
\end_layout

\begin_layout Plain Layout

  F2@1.0;
\end_layout

\begin_layout Plain Layout

  F1 WITH F2*.3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

  STDYX;
\end_layout

\begin_layout Plain Layout

'
\end_layout

\begin_layout Plain Layout

outFileName <- paste("myMplus-", run, ".inp", sep = "")
\end_layout

\begin_layout Plain Layout

cat(mpprog1, file = outFileName)
\end_layout

\begin_layout Plain Layout

cat(mpprog2, file = outFileName, append = TRUE)
\end_layout

\begin_layout Plain Layout

cat(mpprog3, file = outFileName, append = TRUE)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I believe gsub usage is cleaner}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Insert a 
\begin_inset Quotes eld
\end_inset

marker
\begin_inset Quotes erd
\end_inset

 UUUfn in place of 
\begin_inset Quotes eld
\end_inset

rundata.dat
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Use gsub to replace that after.
\end_layout

\begin_layout Standard
This is used in hpcexamples: Ex09-MplusRunall-2
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mplusinp <- 'TITLE:
\end_layout

\begin_layout Plain Layout

  Alternative Fit Indices
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DATA:
\end_layout

\begin_layout Plain Layout

  FILE IS 
\backslash
"UUUfn
\backslash
";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

VARIABLE:
\end_layout

\begin_layout Plain Layout

  NAMES ARE y1-y6 cluster;
\end_layout

\begin_layout Plain Layout

  USEVARIABLES ARE y1-y6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MODEL:
\end_layout

\begin_layout Plain Layout

  F1 BY y1-y3*.7;
\end_layout

\begin_layout Plain Layout

  F2 BY y4-y6*.7;
\end_layout

\begin_layout Plain Layout

  y1-y6*.51;
\end_layout

\begin_layout Plain Layout

  F1@1.0;
\end_layout

\begin_layout Plain Layout

  F2@1.0;
\end_layout

\begin_layout Plain Layout

  F1 WITH F2*.3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

  STDYX;
\end_layout

\begin_layout Plain Layout

'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

mplusinp <- gsub("UUUfn", flist[i], mplusinp)
\end_layout

\begin_layout Plain Layout

mpinpname <- paste(flist[i],".inp", sep="")
\end_layout

\begin_layout Plain Layout

cat(mplusinp, file=mpinpname)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What if there are many changes to be written?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If the mplus code has one R variable in many locations, don't write separate
 paste() statements for each one.
\end_layout

\begin_layout Itemize
Put a text maker on each one
\end_layout

\begin_layout Itemize
Then USE gsub !
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Make A LOT of changes}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Suppose a use wants to replace 
\begin_inset Quotes eld
\end_inset

y6
\begin_inset Quotes erd
\end_inset

 by 
\begin_inset Quotes eld
\end_inset

y8
\begin_inset Quotes erd
\end_inset

.?
\end_layout

\begin_layout Standard
Put in a marker with each 
\begin_inset Quotes eld
\end_inset

y6
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mplusinp <- 'TITLE:
\end_layout

\begin_layout Plain Layout

  Alternative Fit Indices
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

DATA:
\end_layout

\begin_layout Plain Layout

  FILE IS 
\backslash
"UUUfn
\backslash
";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

VARIABLE:
\end_layout

\begin_layout Plain Layout

  NAMES ARE y1-UUUy6 cluster;
\end_layout

\begin_layout Plain Layout

  USEVARIABLES ARE y1-UUUy6;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MODEL:
\end_layout

\begin_layout Plain Layout

  F1 BY y1-y3*.7;
\end_layout

\begin_layout Plain Layout

  F2 BY y4-UUUy6*.7;
\end_layout

\begin_layout Plain Layout

  y1-UUUy6*.51;
\end_layout

\begin_layout Plain Layout

  F1@1.0;
\end_layout

\begin_layout Plain Layout

  F2@1.0;
\end_layout

\begin_layout Plain Layout

  F1 WITH F2*.3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

  STDYX;
\end_layout

\begin_layout Plain Layout

'
\end_layout

\begin_layout Plain Layout

mplusinp <- gsub("UUUy6", "y8", mplusinp)
\end_layout

\begin_layout Plain Layout

mplusinp <- gsub("UUUfn", flist[i], mplusinp)
\end_layout

\begin_layout Plain Layout

mpinpname <- paste(flist[i],".inp", sep="")
\end_layout

\begin_layout Plain Layout

cat(mplusinp, file=mpinpname)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{.Call}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{.Call}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
