#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{siunitx}
\usepackage{longtable}
%%\usepackage{graphicx}
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


%%paste in guidePreambleSweavel.tex
%% From beamer slide:
%% \usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\newenvironment{Schunk}{}{}
\newenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}

\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

%%\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%%end paste in guidePreambleSweavel.tex

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>{
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}

\titlegraphic{\includegraphics[width=3cm]{theme/logo}}
} %end mode presentation
\end_preamble
\options aspectratio=1609,color=pdftex
\use_default_options true
\begin_modules
logicalmkup
sweave
natbibapa
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style \use_bibtopic false
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch semboot
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\branch cfalvm
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mode<presentation>{
\end_layout

\end_inset


\end_layout

\begin_layout Title
R Overview
\begin_inset Argument 1
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
KU
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

University of Kansas
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
logo{
\backslash
includegraphics[width=5mm]{theme/logomini}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}%end mode presentation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%following is LyX shortcut 
\backslash
vb for bold upright math for matrices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%Please leave this code block.
 OK to revise values inside.
\end_layout

\begin_layout Plain Layout

<<ignoremeRoptions, echo=F>>=
\end_layout

\begin_layout Plain Layout

tdir <- 
\begin_inset Quotes eld
\end_inset

tmpout
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

if(!dir.exists(tdir)) dir.create(tdir, showWarnings=FALSE)
\end_layout

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(width=70, prompt = " ", continue = "  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE)
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly = TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(4.1, 4.1, 1.5, 2.1)
\end_layout

\begin_layout Plain Layout

par(mar=pjmar, ps=11)
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=F,family="Times",pointsize=12)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t,split=TRUE,ae=FALSE,height=4.5,width=7}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% We need 2 image files for logos, front page (logo.pdf) and lower-right
\end_layout

\begin_layout Plain Layout

% decoration (logomini.pdf) that shows on all slides.
 
\end_layout

\begin_layout Plain Layout

% You can manually copy your desired image files
\end_layout

\begin_layout Plain Layout

% 
\begin_inset Quotes eld
\end_inset

logo.pdf
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

logomini.pdf
\begin_inset Quotes erd
\end_inset

 into the theme folder.
 
\end_layout

\begin_layout Plain Layout

% Or run this to retrieve or create them:
\end_layout

\begin_layout Plain Layout

<<texcopy, include=FALSE, echo=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

logos <- c("logo.pdf", "logomini.pdf")
\end_layout

\begin_layout Plain Layout

## This will retrieve logo files from a designated package:
\end_layout

\begin_layout Plain Layout

try(getFiles(logos, pkg = "stationery", overwrite = FALSE))
\end_layout

\begin_layout Plain Layout

## If you do not have a file after that, 
\end_layout

\begin_layout Plain Layout

## the following will manufacture a blank images for placeholders
\end_layout

\begin_layout Plain Layout

if(!file.exists(
\begin_inset Quotes eld
\end_inset

theme/logo.pdf
\begin_inset Quotes erd
\end_inset

)){
\end_layout

\begin_layout Plain Layout

  blankPDF(file = "theme/logo.pdf", height=1, width=2, messg = 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

if(!file.exists(
\begin_inset Quotes eld
\end_inset

theme/logomini.pdf
\begin_inset Quotes erd
\end_inset

)){
\end_layout

\begin_layout Plain Layout

  blankPDF(file = "theme/logomini.pdf", height=1, width=11, messg = 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{What is this Presentation?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A survey of R
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Some 
\begin_inset Quotes eld
\end_inset

review
\begin_inset Quotes erd
\end_inset

 of elementary concepts
\end_layout

\begin_layout Itemize
Some 
\begin_inset Quotes eld
\end_inset

preview
\begin_inset Quotes erd
\end_inset

 of advanced possibilities
\end_layout

\begin_layout Itemize
Not a substitute for careful reading of 
\emph on
An Introduction to R 
\emph default
or the
\emph on
 R-FAQ
\end_layout

\begin_layout Itemize
In case you found this and you are not at the KU Summer Stats Camp, consider
 signing up and coming on over! We have a 1 week-long session on R taught
 by some well qualified folks :) 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.ku.edu
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{R is a little bit like an elephant}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/blind-men-elephant-web.jpg
	height 5cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Ouch.
 That's not my Trunk!}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
R is a
\end_layout

\begin_layout Itemize

\series bold
calculator
\end_layout

\begin_layout Itemize

\series bold
statistical
\begin_inset space ~
\end_inset

package
\begin_inset space ~
\end_inset

framework
\end_layout

\begin_layout Itemize

\series bold
graphical
\begin_inset space ~
\end_inset

plotter
\end_layout

\begin_layout Itemize

\series bold
statistical
\begin_inset space ~
\end_inset

toolbench 
\end_layout

\begin_layout Itemize

\series bold
computing
\begin_inset space ~
\end_inset

language
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{Calculator}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Free Form Calculator}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Start an R session 
\begin_inset Quotes eld
\end_inset

interactively
\begin_inset Quotes erd
\end_inset

 (R or Rterm, for example)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
> is the 
\begin_inset Quotes eld
\end_inset

prompt
\begin_inset Quotes erd
\end_inset

.
 Type stuff there!
\begin_inset Separator latexpar
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename importfigs/terminal-snap.png
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Calculator for Your Math Homework}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<calc1, echo=T>>=
\end_layout

\begin_layout Plain Layout

2+3 #addition
\end_layout

\begin_layout Plain Layout

43 * 67 #multiplication
\end_layout

\begin_layout Plain Layout

33/699 #division
\end_layout

\begin_layout Plain Layout

5%%3   #modulo (remainer)
\end_layout

\begin_layout Plain Layout

3^4 #power
\end_layout

\begin_layout Plain Layout

log(17.44) #natural log
\end_layout

\begin_layout Plain Layout

exp(2.33)  #exponentiation
\end_layout

\begin_layout Plain Layout

sin(2*pi)  #sine
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Its a Calculator that Remembers!}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create a new variable with the symbol 
\begin_inset Quotes eld
\end_inset

<-
\begin_inset Quotes erd
\end_inset

 (read: is assigned as).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
> x <- 5
\end_layout

\end_deeper
\begin_layout Itemize
x is now a collection with just one number, 5
\end_layout

\begin_layout Itemize
R has many functions that we 
\begin_inset Quotes eld
\end_inset

call
\begin_inset Quotes erd
\end_inset

 with x as an 
\begin_inset Quotes eld
\end_inset

argument
\begin_inset Quotes erd
\end_inset

.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The square root of x is found by 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
> sqrt(x)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Its "Vectorized"}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<calc2, echo=T>>=
\end_layout

\begin_layout Plain Layout

myvector <- c(1,2,3,4,5,6,7)
\end_layout

\begin_layout Plain Layout

sqrt(myvector)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Its "Matricized"}
\end_layout

\begin_layout Plain Layout

<<calc3, echo=T>>=
\end_layout

\begin_layout Plain Layout

x <- c(1,2,3,4,5,6,7,8,9)
\end_layout

\begin_layout Plain Layout

xmat <- matrix(x, ncol=3)
\end_layout

\begin_layout Plain Layout

xmat
\end_layout

\begin_layout Plain Layout

xmat[1,3]
\end_layout

\begin_layout Plain Layout

xmat[ ,2]
\end_layout

\begin_layout Plain Layout

xmat[2, ]
\end_layout

\begin_layout Plain Layout

apply(xmat, 2, sum)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{Statistical Package Framework}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Its Like a "Statistical Package" (sorta)}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Programs like SPSS or SAS are called 
\begin_inset Quotes eld
\end_inset

stat packs.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
These are 
\begin_inset Quotes eld
\end_inset

pre-packaged
\begin_inset Quotes erd
\end_inset

 routines
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
No chance to review internal code
\end_layout

\begin_layout Itemize
Difficult to modify/extend calculations
\end_layout

\end_deeper
\begin_layout Itemize
User has a 
\begin_inset Quotes eld
\end_inset

plug and play
\begin_inset Quotes erd
\end_inset

 list.
 
\begin_inset Quotes eld
\end_inset

If data is like X, then run procedure X
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Many people use R that way, although they are missing part of the point.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\backslash
frametitle{More Correct: R is a Package Framework}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
R has plenty of pre-packaged routines
\end_layout

\begin_layout Itemize
Inspect Your Computer: What packages are currently installed?
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> library()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Want version numbers, install locations, etc?
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> installed.packages()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Want package names only?
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> row.names(installed.packages())
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Large Collection of Regression Routines}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Linear Regression is in the base stats package
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

mymodel <- lm (depvar ~ indepvar1 + indepvar2, data = mydfname)
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

nls
\begin_inset Quotes erd
\end_inset

 nonlinear least squares
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

glm
\begin_inset Quotes erd
\end_inset

 Generalized Linear model
\end_layout

\begin_layout Itemize
Countless packages for other regression models
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
nlme - nonlinear mixed effects
\end_layout

\begin_layout Itemize
lme4 - linear mixed effect (next generation of nlme)
\end_layout

\begin_layout Itemize
MASS - negative binomial regression, robust and smooth regressions
\end_layout

\begin_layout Itemize
mgcv - generalized additive models
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

mars
\begin_inset Quotes erd
\end_inset

 - Multivariate Adaptive Regression Splines
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

betareg
\begin_inset Quotes erd
\end_inset

 - regression with a 
\begin_inset Quotes eld
\end_inset

Beta distributed
\begin_inset Quotes erd
\end_inset

 outcome variable
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Little Introspection, Please}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
After a fresh install, one has only the packages written by the R core team
 and a very selective set of packages that they recommend.
\end_layout

\begin_layout Itemize
Thousands of other packages available
\end_layout

\begin_layout Itemize
Tip: Where does R search for packages in your system
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> .libPaths()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Note some paths can only be written into by an 
\begin_inset Quotes eld
\end_inset

administrator
\begin_inset Quotes erd
\end_inset

, but some may be written in by an 
\begin_inset Quotes eld
\end_inset

ordinary user
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
If somebody emails you a package (
\begin_inset Quotes eld
\end_inset

whatever-2.1.tar.gz
\begin_inset Quotes erd
\end_inset

) it can be manually installed.
 In a Linux shell:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ R CMD INSTALL whatever-2.1.tar.gz
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{CRAN: a service from the R Core Team}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
CRAN is the largest indexed set of packages (but others exist)
\end_layout

\begin_layout Itemize
R Package Writers follow a set of guidelines, but nobody 
\begin_inset Quotes eld
\end_inset

certifies
\begin_inset Quotes erd
\end_inset

 them 
\begin_inset Quotes eld
\end_inset

officially
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Available after passing build checks & sanity tests
\end_layout

\begin_layout Itemize
Package server allows 
\begin_inset Quotes eld
\end_inset

automagical
\begin_inset Quotes erd
\end_inset

 installation
\end_layout

\begin_layout Itemize
For convenience, R users can download & install from within R.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> install.packages(c("lmtest","car"), dep = TRUE)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Install path depends on user's admin authority (In Windows, run R 
\begin_inset Quotes eld
\end_inset

as administrator
\begin_inset Quotes erd
\end_inset

 to do package installs).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Prodigious Profusion of Packages}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Wonder what you are missing out on?
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> rownames(available.packages())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On 2011-01-31, that command returned a list of 2769 packages.
\end_layout

\begin_layout Standard
On 2013-05-10, that returned 4467 packages!
\end_layout

\end_deeper
\begin_layout Itemize
I want it ALL!
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
I wrote a script that installed them all on a Windows system.
 Download and Install took
\end_layout

\begin_layout Itemize
3 hours
\end_layout

\begin_layout Itemize
2.7 Gigabytes of storage
\end_layout

\begin_layout Itemize
Scripts: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pj.freefaculty.org/R/SystemAdmin
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Periodic Maintenance: Check for updates periodically
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> update.packages(ask=F, checkBuilt = TRUE)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Every Time I Load a Package, I $
\backslash
ldots$}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Load a package that is already installed, e.g.
 
\begin_inset Quotes eld
\end_inset

lme4
\begin_inset Quotes erd
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
> library(lme4)
\end_layout

\end_deeper
\begin_layout Itemize
Review the list of functions in that package
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> library(help = lme4)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Read the vignettes listed.
\end_layout

\begin_layout Itemize
Read the help on the important functions
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> ?lmer
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Run the examples on the important functions
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> example(lmer)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle {A Vignette on Sudoku }
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I recently learned there is an R package for making and playing SudoKu puzzles.
 
\end_layout

\begin_layout Itemize
I installed it 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> install.packages("sudoku") 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
I loaded it
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> library(sudoku)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<loadsudo,echo=F>>=
\end_layout

\begin_layout Plain Layout

library(sudoku)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{What is that Sudoku thing?}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Always do this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> library(help = sudoku)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{Documentation Included! No Extra Charge!}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

Information on package 'sudoku'
\end_layout

\begin_layout Plain Layout

Description:
\end_layout

\begin_layout Plain Layout

Package: sudoku
\end_layout

\begin_layout Plain Layout

Version: 2.2
\end_layout

\begin_layout Plain Layout

Date: 2009-02-02
\end_layout

\begin_layout Plain Layout

Title: Sudoku Puzzle Generator and Solver
\end_layout

\begin_layout Plain Layout

Author: David Brahm <brahm@alum.mit.edu> and Greg Snow <Greg.Snow@intermountainmail.
org>, with contributions from Curt Seeliger <Seeliger.Curt@epamail.epa.gov>
 and Henrik Bengtsson <hb@maths.lth.se>.
\end_layout

\begin_layout Plain Layout

Maintainer: David Brahm <brahm@alum.mit.edu>
\end_layout

\begin_layout Plain Layout

Suggests: tkrplot
\end_layout

\begin_layout Plain Layout

Description: Generates, plays, and solves Sudoku puzzles.
 The GUI playSudoku() needs package "tkrplot" if you are not on Windows.
\end_layout

\begin_layout Plain Layout

License: GPL
\end_layout

\begin_layout Plain Layout

Packaged: Mon Feb 2 16:28:15 2009; a215020
\end_layout

\begin_layout Plain Layout

Built: R 2.10.1; ; 2010-03-19 06:50:35 UTC; unix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

Index:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fetchSudokuUK       Fetch the daily sudoku puzzle from
\end_layout

\begin_layout Plain Layout

                    http://www.sudoku.org.uk/
\end_layout

\begin_layout Plain Layout

generateSudoku      Randomly Generate a Sudoku Puzzle Grid
\end_layout

\begin_layout Plain Layout

hintSudoku          Give a Hint for a Sudoku Cell
\end_layout

\begin_layout Plain Layout

playSudoku          Interactively play a game of Sudoku
\end_layout

\begin_layout Plain Layout

printSudoku         Print a Sudoku Grid to the Terminal.
\end_layout

\begin_layout Plain Layout

readSudoku          Read a File Containing a Sudoku Grid
\end_layout

\begin_layout Plain Layout

solveSudoku         Solve a Sudoku Puzzle
\end_layout

\begin_layout Plain Layout

writeSudoku         Write a Sudoku Grid to a File
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frametitle{Documentation Included! No Extra Charge!}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Then I use the help feature to find out more on the interesting-looking
 ones: 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> ?generateSudoku
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
That's the same as: 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> help(generateSudoku) 
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
Perhaps I run the example that is displayed on the help page: 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> example(generateSudoku)
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you run a function, the parentheses are required, even if you don't
 add any specific arguments.
 This tells generateSudoku to use the default settings.
 
\end_layout

\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

generateSudoku()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "importfigs/Rintro-003.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{A Nicer Looking Sudoku Puzzle}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<printmypuzzle,echo=T>>=
\end_layout

\begin_layout Plain Layout

myPuzzle <- generateSudoku(Nblank = 20, print.it = FALSE)
\end_layout

\begin_layout Plain Layout

printSudoku(myPuzzle)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand input
filename "importfigs/Rintro-004.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Torture Yourself with British Sudoku}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch R
inverted 0
status open

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<printUK,echo=T, eval=F>>=
\end_layout

\begin_layout Plain Layout

printSudoku(fetchSudokuUK())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{importfigs/Rintro-005.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Play Sudoku interactively against R}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
There is even an interactive on-screen game to be played (with hints for
 cheaters)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/sudoku-play.png
	width 6cm

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{Graphics}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Consider an Ugly Basic Graph}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A graph pop ups when you type 
\begin_inset Quotes eld
\end_inset

hist(x)
\begin_inset Quotes erd
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename importfigs/hist-snap.png
	width 6cm

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
But clicking on the graph doesn't do anything.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{But you do interact with R}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Re-run hist() with more details to beautify the graph.
\end_layout

\begin_layout Itemize
Then decorate with 
\begin_inset Quotes eld
\end_inset

lines()
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

text()
\begin_inset Quotes erd
\end_inset

 etc.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/terminal-snap-2.png
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{And a nicer looking histogram pops up}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/hist-snap-2.png
	width 6cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I Use R to Make Line Art}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
R can create a 
\begin_inset Quotes eld
\end_inset

blank canvas
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
Which can then be decorated with subsidiary plotting commands like
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
lines
\end_layout

\begin_layout Itemize
points
\end_layout

\begin_layout Itemize
text
\end_layout

\begin_layout Itemize
polygon
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Hold your Seats! Prepare for the Graphic of the Century}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I'm serious.
 I won't be responsible for injuries to people who faint from a standing
 position.
 This sight may be overwhelming to the elderly and infirm.
\end_layout

\begin_layout Standard
Be Careful.
 Sit down.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/Normal-2009.pdf
	width 9cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Data Displays are Nice too}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Box and whisker
\begin_inset Quotes erd
\end_inset

 plot
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/plot-boxplot.eps
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Barplots are nice too}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Gender Gap in 2004
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/plot-bar2009-genderGap.eps
	width 8cm
	BoundingBox 0bp 0bp 432bp 400bp

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{Stat Toolbench}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R has random variables}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create 
\begin_inset Quotes eld
\end_inset

random data
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
Want some numbers between 0 and 1?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<toolbench1, echo=T>>=
\end_layout

\begin_layout Plain Layout

x <- runif(10)
\end_layout

\begin_layout Plain Layout

x
\end_layout

\begin_layout Plain Layout

mean(x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Conduct "Monte Carlo" Experiments}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Draw 1000 samples 
\end_layout

\begin_layout Itemize
Repeat a calculation with each one
\end_layout

\begin_layout Itemize
Consider the 1000 results
\end_layout

\begin_layout Itemize
In R this is easy, whereas it is tedious with SAS and impossible with SPSS
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{One Normal Sample, $
\backslash
mu$=50, $
\backslash
sigma$=20, 1500 Observations}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/t-demofig1.pdf
	width 8cm
	BoundingBox 0bp 0bp 432bp 288bp

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{1000 Sample Means}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/t-demofig3.pdf
	width 8cm
	BoundingBox 0bp 0bp 432bp 288bp

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 Consistent with theory, means should be Normal($
\backslash
mu$=50, $
\backslash
sigma$ =20/$
\backslash
sqrt 1500$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Sample from an Exponential Distribution}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/t-demofig5.pdf
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Surprise.
 Look how Unimodal and "normal" the Exponential Means Look}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/t-demofig6.pdf
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
As we shall see, this is a general phenomenon called 
\begin_inset Quotes eld
\end_inset

the Central Limit Theorem
\begin_inset Quotes erd
\end_inset

.
 Even 
\begin_inset Quotes eld
\end_inset

funny shaped
\begin_inset Quotes erd
\end_inset

 distributions have means that are 
\begin_inset Quotes eld
\end_inset

pleasant
\begin_inset Quotes erd
\end_inset

!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{Programming Language}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{It is a Functional Language}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One can create functions 
\begin_inset Quotes eld
\end_inset

on the fly
\begin_inset Quotes erd
\end_inset

 and then put them to use
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<proglang1,echo=T>>=
\end_layout

\begin_layout Plain Layout

celToFaren <- function(input=0){ 9/5 * input + 32 }
\end_layout

\begin_layout Plain Layout

celToFaren(100)
\end_layout

\begin_layout Plain Layout

celToFaren(25)
\end_layout

\begin_layout Plain Layout

celToFaren(0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Note we get Free Vectorization}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<proglang2,echo=T>>=
\end_layout

\begin_layout Plain Layout

mytemps <- 50 * runif(10)
\end_layout

\begin_layout Plain Layout

mytemps
\end_layout

\begin_layout Plain Layout

celToFaren(mytemps)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{There's a Lot of Computer Science in There}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is not the time to go in to detail, but here's the big idea.
\end_layout

\begin_layout Itemize
A function can create an 
\begin_inset Quotes eld
\end_inset

object
\begin_inset Quotes erd
\end_inset

 and mark it with a 
\begin_inset Quotes eld
\end_inset

class
\begin_inset Quotes erd
\end_inset

 indicator
\end_layout

\begin_layout Itemize
Other functions can receive that object, inspect its class, and then 
\begin_inset Quotes eld
\end_inset

do the right thing.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
In R packages, policy says use the 
\begin_inset Quotes eld
\end_inset

period
\begin_inset Quotes erd
\end_inset

 as a joining character for functions that are applied to certain types
 of things, such as 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

plot.lm
\begin_inset Quotes erd
\end_inset

 to plot lm objects
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

summary.lm
\begin_inset Quotes erd
\end_inset

 to summarize an lm object
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

vcov.lm
\begin_inset Quotes erd
\end_inset

 to extract the variance matrix from an lm object
\end_layout

\end_deeper
\begin_layout Itemize
Hence, a commonly used idioms like
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mod1 <- lm ( y ~ x, data=mine)
\end_layout

\begin_layout Plain Layout

summary(mod1)
\end_layout

\begin_layout Plain Layout

plot(mod1)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R Reinterprets and Re-arranges Input}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
User can freely rearrange arguments, optional to name them if context is
 clear
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plot( myinput, myoutput)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Same as
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plot(x = myinput, y = myoutput)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Same effect as
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plot(y = myoutput, x = myinput)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Can abbreviate argument names if unique.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

plot(x1, y1, main = "my name") 
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Same as
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

plot(x1, y1, m = "my name")
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Verbose code may be Clear, But its also Verbose}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The R experts prefer brevity
\end_layout

\begin_layout Itemize
I tend to like fully named function arguments, probably because I'm a teacher
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim] 
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Sudoku, for example}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
R interprets all of these commands in the same way: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> generateSudoku(Nblank=20, print.it = TRUE)
\end_layout

\begin_layout Plain Layout

> generateSudoku(20,T)
\end_layout

\begin_layout Plain Layout

> generateSudoku(N=20, p=T)
\end_layout

\begin_layout Plain Layout

> generateSudoku(p=T, N=20) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
R will try to match up the options with your arguments, but I try to avoid
 gambling by explicitly naming options.
\end_layout

\begin_layout Standard
This does not give what you want because the arguments are out of order
 and unnamed
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> generateSudoku(T, 20) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I Like "Camel Case" names}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I don't mind smashing together words like 
\begin_inset Quotes eld
\end_inset

myX
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

smallSampleData
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Historically, 
\begin_inset Quotes eld
\end_inset

_
\begin_inset Quotes erd
\end_inset

 was the assignment operator in S, so I don't use that in R names.
\end_layout

\begin_layout Itemize
Period 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

 is a joining character in R functions that are part of the 
\begin_inset Quotes eld
\end_inset

class
\begin_inset Quotes erd
\end_inset

 structure
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Be Careful about the Names You Choose}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Don't steal names of R 
\begin_inset Quotes eld
\end_inset

built in
\begin_inset Quotes erd
\end_inset

 functions and variables.
 
\end_layout

\begin_layout Itemize
Naming variables by special names like 
\begin_inset Quotes eld
\end_inset

mymod1
\begin_inset Quotes erd
\end_inset

 or such offers some protection.
\end_layout

\begin_layout Itemize
More formally, the function 
\begin_inset Quotes eld
\end_inset

exists()
\begin_inset Quotes erd
\end_inset

 will ask R if a symbol is currently used.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<proglang3, echo=T>>=
\end_layout

\begin_layout Plain Layout

exists("sqrt")
\end_layout

\begin_layout Plain Layout

exists("c")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{About Those Parentheses}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Parentheses are required to let R know you are trying to call one of its
 functions
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
To quit R, run the quit() function, for which q is an abbreviation:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

q()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Without parentheses, it thinks you want it to print the contents of 
\begin_inset Quotes eld
\end_inset

q
\begin_inset Quotes erd
\end_inset

 function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Many Functions Let You Read Them}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
q is not interesting, but it is there.
\end_layout

\begin_layout Itemize
And many other functions are there.
 Please run:
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

lm
\end_layout

\begin_layout Plain Layout

lm.fit
\end_layout

\begin_layout Plain Layout

predict.glm
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
That doesn't show the 
\begin_inset Quotes eld
\end_inset

actual R source code
\begin_inset Quotes erd
\end_inset

, but rather one stylized, tidied up presentation of the logical structure
 of the function after R has read the source code and gobbled it into the
 runtime engine (See the rockchalk vignette 
\begin_inset Quotes eld
\end_inset

Rstyle
\begin_inset Quotes erd
\end_inset

 for an explanation).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{If You Want To Get Started}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{R usage for Dummies}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
My new policy.
 Students should follow my 
\begin_inset Quotes eld
\end_inset

Workspace Advice
\begin_inset Quotes erd
\end_inset

 for R.
\begin_inset Foot
status open

\begin_layout Plain Layout
I put it in the Emacs wiki, it must be right! 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.emacswiki.org/emacs/CategoryESS
\end_layout

\end_inset


\end_layout

\end_inset

.
 Keep related files IN A FOLDER! In essence,
\end_layout

\begin_layout Enumerate
Create a 
\begin_inset Quotes eld
\end_inset

folder
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Copy a template R file into that folder
\end_layout

\begin_layout Enumerate
Open that R file with the programmer's file text editor (for me, Emacs)
\end_layout

\begin_layout Enumerate
Launch an R session inside the editor's awareness, so code can be 
\begin_inset Quotes eld
\end_inset

sent
\begin_inset Quotes erd
\end_inset

 to R for evaluation.
\end_layout

\begin_layout Enumerate
Develop the R code by going back-and-forth between the 
\begin_inset Quotes eld
\end_inset

program buffer
\begin_inset Quotes erd
\end_inset

 and the 
\begin_inset Quotes eld
\end_inset

R buffer
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Commands on left, R session on Right}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename importfigs/Emacs-ESS-snap-01.png
	width 90page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Emacs is like Democracy.
 Its the worst, except for all of the others that have been tried...}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Emacs 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Free
\end_layout

\begin_layout Itemize
Available on all platforms (Mac (AquaMacs)), Windows
\end_layout

\begin_layout Itemize
Highly configurable
\end_layout

\begin_layout Itemize
Useful for many other kinds of projects.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{I'm not a Mac User, but...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I observe
\end_layout

\begin_layout Itemize
R for Macintosh is provided with a MUCH better editor than the one which
 is provided with R for Windows.
 It has
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
indentation
\end_layout

\begin_layout Itemize
paren matching
\end_layout

\begin_layout Itemize
highlighting
\end_layout

\end_deeper
\begin_layout Itemize
So, if you are a Mac user, it is not bad to use the base Macintosh editor
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
and then ignore the Windows and Linux users who fight about which editor
 is best
\end_layout

\end_deeper
\begin_layout Itemize
But you might also be aware of Emacs for Macintosh, AquaMacs.
 If you learn to use that, then you can be comfortable if you go onto other
 operating systems.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Other Editors: Multi-Platform}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[RStudio]
\end_layout

\end_inset

, a somewhat limited but more idiot-proof R 
\begin_inset Quotes eld
\end_inset

integrated development environment
\begin_inset Quotes erd
\end_inset

 (IDE).
 This is not a general purpose programming editor, but rather it is intended
 for convenience of R elementary users.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
I recommend this for R novices who don't have much experience at installing
 software.
 Almost always, it finds R and interacts with it.
\end_layout

\begin_layout Itemize
Disadvantages:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
horrible interaction with plot devices
\end_layout

\begin_layout Itemize
frustrating Rstudio-specific package management framework
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[Eclipse]
\end_layout

\end_inset

 An expansive, general purpose programming editor and IDE with a special
 plugin for R.
 Has many eager proponents.
 In 2009, I thought Eclipse would take over the world.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[vim]
\end_layout

\end_inset

 The updated version of 'vi' (pronounced 
\begin_inset Quotes eld
\end_inset

vee-eye
\begin_inset Quotes erd
\end_inset

).
 Like Emacs, was developed in the time before mice.
 Many of the most disciplined programmers I know cling to vi like a flotation
 device.
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[Rcmdr]
\end_layout

\end_inset

 An R packages that provides 
\begin_inset Quotes eld
\end_inset

pull down menu
\begin_inset Quotes erd
\end_inset

 system provided by Prof.
 John Fox in support of his excellent stats textbooks.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Disadvantage
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
requires the tcltk programming library (which is becoming more tenuous)
\end_layout

\begin_layout Itemize
makes it very easy to run some commands, but others completely omitted
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

[JGR]
\end_layout

\end_inset

 An R package that launches a program editor in Java.
 This still works, but it appears most of the people who would use it are
 now adopting RStudio.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Other Editors: Windows Only}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Notepad++, including the 
\begin_inset Quotes eld
\end_inset

addon
\begin_inset Quotes erd
\end_inset

 NPPTOR.
 A better program editor that RStudio, and NPPTO R allows a function key
 (usually F8) to send lines to an R session.
 This is the most popular option among the Windows-using R programmers that
 I know.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
I don't use it because it is Windows only (why hobble oneself by marrying
 an OS?).
\end_layout

\end_deeper
\begin_layout Itemize
WinEdt: a commercial product that was quite popular before Notepad++ was
 introduced.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
section{Appendix 1: Code for Simulation Examples}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Draw a Sample from the Normal, Create a Histogram}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
preview true
filename "importfigs/t-demofig1.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Compare Theoretical Probabilities and Observed Sample}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
preview true
filename "importfigs/t-demofig2.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Draw Lots of Samples, Calculate their Means, and Plot}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
preview true
filename "importfigs/t-demofig3.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Re-scale the Previous Histogram}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
preview true
filename "importfigs/t-demofig4.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create and Plot an Exponential Variate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
preview true
filename "importfigs/t-demofig5.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The Central Limit Theorem is Correct}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
preview true
filename "importfigs/t-demofig6.tex"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{References}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "R"
options "apalike2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Session}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sess10>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<opts20, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

options(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
