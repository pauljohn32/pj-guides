\batchmode
\makeatletter
\def\input@path{{/home/pauljohn/SVN/SVN-guides/stat/Regression/ElementaryOLS//}}
\makeatother
\documentclass[10pt,english]{beamer}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\usepackage{listings}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\usepackage{Sweavel}
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@
 \long\def\lyxframe#1{\@lyxframe#1\@lyxframestop}%
 \def\@lyxframe{\@ifnextchar<{\@@lyxframe}{\@@lyxframe<*>}}%
 \def\@@lyxframe<#1>{\@ifnextchar[{\@@@lyxframe<#1>}{\@@@lyxframe<#1>[]}}
 \def\@@@lyxframe<#1>[{\@ifnextchar<{\@@@@@lyxframe<#1>[}{\@@@@lyxframe<#1>[<*>][}}
 \def\@@@@@lyxframe<#1>[#2]{\@ifnextchar[{\@@@@lyxframe<#1>[#2]}{\@@@@lyxframe<#1>[#2][]}}
 \long\def\@@@@lyxframe<#1>[#2][#3]#4\@lyxframestop#5\lyxframeend{%
   \frame<#1>[#2][#3]{\frametitle{#4}#5}}
 \def\lyxframeend{} % In case there is a superfluous frame end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{dcolumn}
\usepackage{booktabs}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


\usepackage{graphicx}
\usepackage{listings}
\lstset{tabsize=2, breaklines=true,style=Rstyle}

%Sweavel options
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}


\mode<presentation>

\usetheme{Antibes}

\newcommand\makebeamertitle{\frame{\maketitle}}%

\expandafter\def\expandafter\insertshorttitle\expandafter{%
 \insertshorttitle\hfill\insertframenumber\,/\,\inserttotalframenumber}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}

\makeatother

\usepackage{babel}
\begin{document}
<<echo=F>>=
dir.create("plots3", showWarnings=F)
@

% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=plots3/t,split=T,ae=F,height=4,width=6}
\def\Sweavesize{\scriptsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.94}}

<<Roptions, echo=F>>=
options(width=100, prompt=" ", continue="  ")
options(useFancyQuotes = FALSE) 
set.seed(12345)
op <- par() 
pjmar <- c(4.1, 4.1, 1, 2.1) 
##pjmar <- par("mar")
##par(mar=pjmar, ps=11)
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
pdf.options(onefile=F,family="Times",pointsize=11)
@


\lyxframeend{}\lyxframe{Elementary Regression Example}
\begin{itemize}
\item Downloads a file
\item Explores the data
\item Fits a linear regression model, creates output tables
\item Creates some diagnostic plots
\item Demonstrates my Constitutional right to name parameters anything I
want ($c_{j}$, not $\beta_{j}$)
\end{itemize}

\lyxframeend{}\section{Job Ratings and Arm Strength}


\lyxframeend{}\lyxframe{Get Data For Regression}

<<echo=T>>=
## Either use the existing "StrengthJobData.rds" file, or make one
if (file.exists("StrencthJobData.rds")) {
  dat <- readRDS("StrengthJobData.rds")
} else { 
  dat <- read.table(url("http://pj.freefaculty.org/guides/stat/DataSets/StrengthJobData/StrengthJobdata.txt"), header = TRUE)
  saveRDS(dat, file = "StrengthJobData.rds")
}
@


\lyxframeend{}\lyxframe{README says...}
\begin{quotation}%{}
Data were collected from electricians, construction and maintenance
workers, auto mechanics, and linemen. Two measures of strength were
gathered from each participant, reflecting grip and arm strength via
the Jackson Evaluation System (a piece of strength-testing equipment).
Each participant was asked to exert as much force as they could for
a period of 2 seconds, equipment recording the maximum force exerted
in pounds. Supervisors for each worker were asked to rate the employee's
performance in his/her physical tasks on a 60-pt scale. Also, a simulated
wrench, used to measure exerted force, was used to obtain an objective
measure of practical job performance.
\end{quotation}%{}

\lyxframeend{}

\begin{frame}
\frametitle{What Do We Have?}

<<str10, echo=T>>=
str(dat)
@

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Grab Some Summary Stats I Want}

summary(dat) would be a nice start, but the output hard to manage.
So Build own summary:

<<str20, echo=T>>=
sumdat <- apply(dat, 2, quantile, na.rm = TRUE)
sumdat <- rbind(sumdat, mean= apply(dat, 2, mean, na.rm = TRUE))
sumdat <- rbind(sumdat, sd= apply(dat, 2, sd, na.rm = TRUE))
sumdat <- rbind(sumdat, var= apply(dat, 2, var, na.rm = TRUE))
sumdat
@

This is, essentially, what rockchalk::summarize does for us.

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{rockchalk::summarize}

sumdat2 is a structured object. We could use sumdat2\$numerics instead
of sumdat in what follows

<<str20b, echo=T>>=
library(rockchalk)
sumdat2 <- summarize(dat)
sumdat2$numerics
@

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{4 Histograms with Normal PDF superimposed}

<<str30, fig=T, include=F>>=
 par(mfcol=c(2,2)) 
hist(dat$GRIP, prob = TRUE, xlab = "Grip strength", main = "Histogram: Grip Strength")
curve(dnorm(x, m = sumdat["mean","GRIP"], s = sumdat["sd", "GRIP"]), from =  range(dat$GRIP)[1], to = range(dat$GRIP)[2], add = TRUE) 

hist(dat$ARM, prob = TRUE, xlab = "Arm strength", main = "Histogram: Arm Strength") 
curve(dnorm(x, m = sumdat["mean","ARM"], s = sumdat["sd", "ARM"]), from =  range(dat$ARM)[1], to = range(dat$ARM)[2], add = TRUE) 

hist(dat$RATINGS, prob = TRUE, xlab = "Supervisor Rating", main = "Histogram: Rating") 
curve(dnorm(x, m = sumdat["mean","RATINGS"], s = sumdat["sd", "RATINGS"]), from = range(dat$RATINGS)[1], to = range(dat$RATINGS)[2], add = TRUE) 

hist(dat$SIMS, prob = TRUE, xlab="Sims Wrench Test", main="Histogram: Strength Simulation") 
curve(dnorm(x, m = sumdat["mean","SIMS"], s = sumdat["sd", "SIMS"]), from =  range(dat$SIMS)[1], to = range(dat$SIMS)[2], add = TRUE)
@

\includegraphics[width=9cm]{plots3/t-str30.pdf}

\input{plots3/t-str30.tex}

\end{frame}

\begin{frame}
\frametitle{Could go further with that distribution analysis}
\begin{itemize}
\item There's a warning in the help page for R's hist function.
\item Previous plot not rigorous proof of Normality or non-Normality, just
a visual depiction
\item qqplot is suggested method of rigorously comparing a sample to a given
probability model. 
\item A Chi-square or likelihood-based test would be even more rigorous
\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks, containsverbatim]
\frametitle{Scatterplot matrix OK for Small Datasets}

<<str40, include=F, fig=T, echo=T>>=
plot(dat) ## That's same as pairs(dat)
@

\includegraphics[width=9cm]{plots3/t-str40.pdf}

\input{plots3/t-str40.tex}

\end{frame}

\begin{frame}[allowframebreaks, containsverbatim]
\frametitle{Regress Ratings on Grip}

<<echo=T>>=
mod1 <- lm (RATINGS ~ GRIP, data = dat)
summary(mod1)
@

\end{frame}

\begin{frame}
\frametitle{Regression Table}
\begin{columns}%{}


\column{6cm}


<<echo=F, results=tex>>=
outreg(mod1, tight=T, showAIC=F)
@


\column{6cm}
\begin{itemize}
\item Estimated Intercept
\item Estimated Slope
\item Standard Error of Intercept Estimate (estimated standard deviation
of intercept estimator)
\item Standard Error of Slope Estimate (estimated standard deviation of
slope estimator)
\end{itemize}
\end{columns}%{}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Hypothesis Test for Slope}
\begin{itemize}
\item Theory: $RATINGS_{i}=c_{0}+c_{1}GRIP_{i}+u_{i}$


$c_{0}$ and $c_{1}$ are real-valued constants, $E[u_{i}]=0$, $Var[u_{i}]=E[u_{i}^{2}]=\sigma_{u}^{2}$. 

\item The Null Hypothesis: $H_{0}:c_{1}=0$
\item $\hat{c}_{1}$ is approximately Normal, So create T test:
\[
\hat{t}=\frac{\hat{c}_{1}-0}{std.err.(\hat{c}_{1})}=\frac{0.66}{0.029}=2.245
\]

\item The critical value of t is:
\begin{lstlisting}
> qt( c(0.025, 0.975), df=90)
[1] -1.986675  1.986675
\end{lstlisting}

\item Conclusion: ``The estimate $\hat{c}_{1}$ is statistically significantly
different from 0.''
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Confidence Intervals for Intercept and Slope}

<<>>=
confint(mod1)
@

Supposing the model's theory is correct, we believe 
\begin{itemize}
\item the we believe with probability is 0.95 the true slope $c_{1}$ is
in (0.0079, 0.125).
\item the estimated slope $\hat{c}_{1}$ would be between 0.0079 and 0.125
in 95\% of repeated samples from same process
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim,allowframebreaks]
\frametitle{Obtain Predicted Values}
\begin{itemize}
\item predict returns one predicted value for each input row


<<str60a, fig=T, include=F>>=
mod1.predict <- predict(mod1)
head(mod1.predict, 10)
@

\end{itemize}
\input{plots3/t-str60a.tex}
\begin{itemize}
\item Or ask for particular values by using a newdata argument


<<str60b, fig=T, include=F>>=
ndf2 <- data.frame(GRIP = plotSeq(dat$GRIP, 5))
ndf2$pred2 <- predict(mod1, ndf2)
ndf2
@

\end{itemize}
\input{plots3/t-str60b.tex}

\end{frame}

\begin{frame}
\frametitle{Predicted value line overlaid on a scatterplot}

<<ps100, fig = T, echo = T, include = F>>=
plotSlopes(mod1, plotx = "GRIP", xlab = "Grip Measurement", ylab = "Supervisor Rating", interval = "confidence")
@

\includegraphics[width=10cm]{plots3/t-ps100}

\input{plots3/t-ps100}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{I worry that's too easy for you}
\begin{itemize}
\item You don't learn so much about the great Wild World of R if I predigest
everything for you
\item But I'll get nicer looking homeworks if I give you an easy way to
make nice looking plots
\item But I worry you'll never feel like a grown up in the R community if
you only know how to speak baby talk
\item So I've written out an explanation of how some of this gets done.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{The usual Way in R is like this:}

<<str70, fig=T, include=F>>=
plot(RATINGS ~ GRIP, data = dat, xlab = "Grip Strength", ylab = "Supervisor Rating")
abline(mod1)
@

\includegraphics[width=8cm]{plots3/t-str70.pdf}

\input{plots3/t-str70.tex}

That exploits the multi-purpose power of abline to extract predicted
values and plot them.

\end{frame}

\begin{frame}
\frametitle{Superimpose Confidence Interval For Predicted Values}

<<str80, fig=T, include=F>>=
plot(RATINGS ~ GRIP, data=dat, xlab="Grip Strength", ylab="Supervisor Rating")
abline(mod1)
newdf <- data.frame(GRIP=plotSeq(dat$GRIP, 20))
pconf <- predict(mod1, interval="confidence", newdata=newdf)
lines(newdf$GRIP, pconf[, "lwr"], lty=4, col="red")
lines(newdf$GRIP, pconf[, "upr"], lty=4, col="red")
legend("topright", legend=c("predicted","lower CI","upper CI"), lty=c(1,4,4), col=c("black", "red","red"))
@

\includegraphics[width=9cm]{plots3/t-str80.pdf}

\end{frame}

\begin{frame}
\frametitle{Code For Previous}

\input{plots3/t-str80.tex}

\end{frame}

\begin{frame}
\frametitle{Superimpose Confidence and Prediction Intervals}

<<str90, fig=T, include=F>>=
plot(RATINGS ~ GRIP, data=dat, xlab="Grip Strength", ylab="Supervisor Rating", ylim = c(1,1.2)*range(dat$RATINGS))
abline(mod1)
newdf <- data.frame(GRIP=plotSeq(dat$GRIP, 20))
pconf <- predict(mod1, interval="confidence", newdata=newdf)
lines(newdf$GRIP, pconf[ ,"lwr"], lty=2, col="red")
lines(newdf$GRIP, pconf[ ,"upr"], lty=2, col="red")
ppred <- predict(mod1, interval="prediction", newdata=newdf)
lines(newdf$GRIP, ppred[ ,"lwr"], lty=4, col="green")
lines(newdf$GRIP, ppred[ ,"upr"], lty=4, col="green")
legend("topright", legend=c("predicted","conf. int.","pred. int."), lty=c(1,2,4), col=c("black", "red","green"))
@

\includegraphics[width=9cm]{plots3/t-str90.pdf}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Code For Previous}

\input{plots3/t-str90.tex}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{You learn a lot about R by studying abline()}
\begin{itemize}
\item abline(v = 5) draws a vertical line where x = 5.
\item abline(h = 3.5) draws a horizontal line where y = 3. 5.
\item abline allows all of the customizations that lines allows, like col,
lty, lwd
\item The plot must exist first, however, before you run those functions
\item Try
\end{itemize}
<<abl100,include=F, echo=T, fig=T>>=
plot(1:10, 1:10)
abline(v = 5)
abline(h = 3.5, col = "red", lty = 3, lwd = 4)
@

\input{plots3/t-abl100}

\end{frame}

\begin{frame}[containsverbatim]
\frametitle{2 ablines}

\includegraphics[width=8cm]{plots3/t-abl100}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{More about abline}
\begin{itemize}
\item abline will also plot a line with a given intercept and slope, using
arguments a and b. Try
\end{itemize}
<<eval=F, include=T, echo=T>>=
plot(0:10, 0:10, type = "n")
abline(a = 2.7, b = 0.55)
@

That will be a bit disappointing because axes don't cross at 0, so
I hammered on this a while to make a ``mathbook style'' plot

<<abl150,include=F,fig=T,height=6, width=6>>=
plot(-1:10, -1:10, type = "n", xlim = c(-1, 10), ylim = c(-1,10), axes = FALSE, bty = "n", xlab = "one x variable", ylab = "one y variable")
axis(1, pos = 0, at = seq(1, 10, by = 1))
axis(2, pos = 0, at = seq(1, 10, by = 1))
abline(a = 2.7, b = 0.55)
abline(v = 0)
abline(h = 0)
@

\includegraphics[width=7cm,height=7cm]{plots3/t-abl150}
\begin{itemize}
\item Which you could draw by the seemingly tedious sequence
\end{itemize}
\input{plots3/t-abl150}
\begin{itemize}
\item Run ``?abline'' to read about it
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Step through this, line-by line}

This command creates a ``blank plot'' and fiddles with abline()

<<ab20, fig=T, include=F>>=
plot(seq(-1, 10, length.out = 21), -10:10, axes = FALSE,  type = "n")
## Make some phony graph paper
abline(v = 0, col= gray(.70)) ##get the idea?
abline(v = seq(1, 10), col = gray(.80), lwd = 0.7)
abline(h = seq(-10, 10), col = gray(.80), lwd = 0.7)
abline(a= 2, b = 0.5, col = "red", lwd = 2)
abline(coef = c(2, 0.5), col = "black", lwd = 2)
abline(coef = c(7, -0.3), col = "green", lwd = 4, lty = 3)
abline(coef = c(-3, 1.1), col = "pink", lwd =2, lty = 4)
abline(coef = c(-14, 0.8), col = "purple", lwd = 4, lty = 5)
@

\input{plots3/t-ab20.tex}

\includegraphics[width=10cm]{plots3/t-ab20}
\begin{itemize}
\item Run ``abline'' without any parentheses and you'll see their code
\end{itemize}
And you realize the difficult part for the abline function is to examine
the type of arguments you give it, because it has a lot of ``if''
``then'' conditions to obey. 

\end{frame}

\begin{frame}
\frametitle{But, honestly, I'd use plotSlopes}

\includegraphics[width=10cm]{plots3/t-ps100}

\input{plots3/t-ps100}

\end{frame}




\lyxframeend{}
\end{document}
