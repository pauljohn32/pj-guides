#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble

\usepackage{dcolumn}
\usepackage{booktabs}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


\usepackage{graphicx}
\usepackage{listings}

\mode<presentation>
{
  \usetheme{Antibes}
}

\usepackage{fancyvrb}
% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}



\providecommand{\Rcolor}{\color[rgb]{0, 0.5, 0.5}}
\providecommand{\Routcolor}{\color[rgb]{0.461, 0.039, 0.102}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.043, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}


\lstdefinestyle{Rstyle}{fancyvrb=false,escapechar=`,language=R,%
                        basicstyle={\Rcolor\Sweavesize},%
                        backgroundcolor=\Rbackground,%
                        showstringspaces=false,%
                        keywordstyle=\Rcolor,%
                        commentstyle={\Rcommentcolor\ttfamily\itshape},%
                        literate={<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$^{\scriptstyle\wedge}$}}1,%
                        alsoother={$},%
                        alsoletter={.<-},%
                        otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                        escapeinside={(*}{*)}}%
% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routstyle}{fancyvrb=false,literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
 frame=single,framerule=0.2pt,framesep=1pt,basicstyle=\Routcolor\Sweavesize,%
 backgroundcolor=\Routbackground}


\lstnewenvironment{Sinput}{\lstset{style=Rstyle}}{}
\lstnewenvironment{Scode}{\lstset{style=Rstyle}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routstyle}}{}


\lstset{tabsize=2, breaklines=true,style=Rstyle}
%\usetheme{Warsaw}
% or ...

%\setbeamercovered{transparent}
% or whatever (possibly just delete it)



\title{Object Oriented}

\subtitle{quick survey}

\author[PJ]{Paul E. Johnson, \\ Prof., Political Science \\ Assoc. Dir, Center for Research Methods and Data Analysis}

\institute[KU]{University of Kansas}


\date[2011]{2011}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
titlepage
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Orientation
\end_layout

\begin_layout Enumerate
Remember C.
\end_layout

\begin_layout Enumerate
Object-Oriented Ideas
\end_layout

\begin_layout Enumerate
Many Languages & Competing Implementations
\end_layout

\begin_layout Enumerate
Simulation Libraries
\end_layout

\begin_layout Section*
Remember C?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Sequential Information Processing}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Programs in C (or other non-object-oriented languages) process information
 in a straight line.
\end_layout

\begin_layout Itemize
Functions divert information streams, but don't really alter sequential
 nature of information
\end_layout

\begin_layout Itemize
Recall passing pointers to functions declared like
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int manage(int * input, int * output)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The input gets mangled into output, but manage does not keep track of where
 input came from, or where output went.
\end_layout

\begin_layout Itemize
Possible re-design C to be more object-oriented
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Object-Oriented Idea
\end_layout

\begin_layout BeginFrame
Object=Information and Capability
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Itemize
See Bob?
\end_layout

\begin_layout Itemize
Bob has information
\end_layout

\begin_layout Itemize
Bob has abilities
\end_layout

\begin_layout Column
9cm
\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset Graphics
	filename Bob.eps
	height 80pheight%

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_layout BeginFrame
An O-O Program is a Bunch of Bobs
\end_layout

\begin_layout Description
Instance: Bob is an 
\begin_inset Quotes eld
\end_inset

instance
\begin_inset Quotes erd
\end_inset

 (or an 
\begin_inset Quotes eld
\end_inset

instantiated object
\begin_inset Quotes erd
\end_inset

) 
\end_layout

\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

specific
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

living?
\begin_inset Quotes erd
\end_inset

 thing 
\end_layout

\begin_layout Itemize
Specific: with values that can be 
\end_layout

\begin_deeper
\begin_layout Itemize
altered
\end_layout

\begin_layout Itemize
disclosed
\end_layout

\end_deeper
\begin_layout Itemize
Living: able to adjust, change, interact
\end_layout

\begin_layout Itemize
Create a bunch of more-or-less living things like Bob, and you have an Object-Or
iented Program
\end_layout

\begin_layout BeginFrame
Objects and Classes
\end_layout

\begin_layout Itemize
Class: General framework from which objects can be created
\end_layout

\begin_layout Itemize
Usually: 
\end_layout

\begin_deeper
\begin_layout Description
instance
\begin_inset space ~
\end_inset

variables: variables that may differ among objects from a class
\end_layout

\begin_layout Description
class
\begin_inset space ~
\end_inset

variables: variables that are common among all objects from the class
\end_layout

\begin_layout Description
methods: abilities of the objects, like 
\begin_inset Quotes eld
\end_inset

function
\begin_inset Quotes erd
\end_inset

 in C, except that a method is tied to a particular object.
\end_layout

\end_deeper
\begin_layout BeginFrame
Class Hierarchy & Inheritance
\end_layout

\begin_layout Itemize
Inheritance.
 
\end_layout

\begin_layout Itemize
Subclass--begin with Class, add new variables and/or methods
\end_layout

\begin_layout Itemize
Contention: Subclass allows for 
\begin_inset Quotes eld
\end_inset

re-usable
\begin_inset Quotes erd
\end_inset

 code
\end_layout

\begin_layout Itemize
All OO languages provide a generic class from which all objects are derived
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Privacy and Messaging}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Each agent 
\begin_inset Quotes eld
\end_inset

keeps its own information
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Information gathered and changed through well defined 
\begin_inset Quotes eld
\end_inset

interface
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Interface: Variable lists and methods in a 
\begin_inset Quotes eld
\end_inset

header
\begin_inset Quotes erd
\end_inset

 file.
\end_layout

\begin_layout Itemize
Messaging metaphor for communicating with objects
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Objective C style
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++/Java Style
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[bob doThis];
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bob.doThis();
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[bob run:5];
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bob.run(5);
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Agent-Based Model
\end_layout

\begin_layout Itemize
Each 
\begin_inset Quotes eld
\end_inset

substantively important
\begin_inset Quotes erd
\end_inset

 individual 
\begin_inset Quotes eld
\end_inset

actor
\begin_inset Quotes erd
\end_inset

 is an instance object
\end_layout

\begin_layout Itemize
Each agent has its own data and capabilties
\end_layout

\begin_layout Itemize
Model framework
\end_layout

\begin_deeper
\begin_layout Itemize
Creates a Structure in which agents can 
\begin_inset Quotes eld
\end_inset

step
\begin_inset Quotes erd
\end_inset

 through time
\end_layout

\begin_layout Itemize
adjust/adapt/interact
\end_layout

\end_deeper
\begin_layout Itemize
Model Also its own objects that 
\begin_inset Quotes eld
\end_inset

monitor
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

report
\begin_inset Quotes erd
\end_inset

 on the simulation.
 
\end_layout

\begin_layout BeginFrame
Quick Overview Of Information
\end_layout

\begin_layout Itemize
Micro-network
\end_layout

\begin_deeper
\begin_layout Itemize
Each Agent reveals what it wants to
\end_layout

\begin_layout Itemize
Each Agent gains information from specific interaction with particular others
\end_layout

\end_deeper
\begin_layout Itemize
External/Involuntary information
\end_layout

\begin_deeper
\begin_layout Itemize
Agent has 
\begin_inset Quotes eld
\end_inset

tag
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

marker
\begin_inset Quotes erd
\end_inset

 that each individual other may take note of
\end_layout

\end_deeper
\begin_layout Itemize
Agents base behavior on 
\begin_inset Quotes eld
\end_inset

aggregates
\begin_inset Quotes erd
\end_inset

 that are available to them.
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
