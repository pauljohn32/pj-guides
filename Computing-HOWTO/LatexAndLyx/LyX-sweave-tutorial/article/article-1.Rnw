%% LyX 2.0.8.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[english,noae]{article}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\providecommand{\LyX}{L\kern-.1667em\lower.25em\hbox{Y}\kern-.125emX\@}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@

\makeatother

\usepackage{babel}
\begin{document}

\title{Simplest Sweaved Article}


\author{Paul E. Johnson}


\date{\today}

\maketitle
This is a testament to the improvement in \LyX{} during the past 10
years. I'm on Lyx 2.0.8 with Ubuntu Linux and the built-in TexLive.

In Lyx, I choose

File -> New

It creates the simplest, unadorned article possible. I make sure there
is nothing in the preamble, no unusual setttings. I've moved my home
folder lyx configuration out of the way, started \LyX{} from scratch.
There is absolutely no reason why any other person should have difficulty
opening this document in \LyX{} and running it. 


\section*{Make a Very Minor Document Setup Change}

After getting the new, blank document, I only make one itty bitty
change in the document setup. 

Document -> Modules. Find Sweave, hit Add


\section*{Now write some code worth Sweaving}

Come back to the document, hit Control-l, put in the code chunks.
I think this is the most pleasant way, but some people think it is
nicer to use the \LyX{} code chunk environment


\subsubsection*{One}

\begin{flushleft}
$<<$ one $>>=$

set.seed(234234)

x <- rnorm(1000)

mean(x)

sd(x)

$@$
\par\end{flushleft}

<<one>>=
set.seed(234234)
x <- rnorm(1000)
mean(x)
sd(x)
@


\subsection*{Two}

\begin{flushleft}
$<<$ two, fig=T $>>=$

hist(x)

$@$
\par\end{flushleft}

<<two, fig=T>>=
hist(x)
@


\subsubsection*{Three}

$<<$ three, results=tex $>>=$

dat <- data.frame(x1 = rnorm(1000), x2 = rnorm(1000))

b0 <- 0.5; b1 <- 0.7; b2 <- 0.15; se <- 10

dat\$y <- b0 + b1*dat\$x1 + b2*dat\$x2 + se*rnorm(1000)

m0 <- lm(y ~ x1, data = dat)

m1 <- lm(y ~ x1 + x2, data = dat)

require(rockchalk)

outreg(list("Model of Student Behavior" = m0, "A More Elaborate Model" = m1), varLabels = c("x1" = "Studying", "x2" = "Math Lessons"))

$@$

<<three, results=tex>>=
dat <- data.frame(x1 = rnorm(1000), x2 = rnorm(1000))
b0 <- 0.5; b1 <- 0.7; b2 <- 0.15; se <- 10
dat$y <- b0 + b1*dat$x1 + b2*dat$x2 + se*rnorm(1000)
m0 <- lm(y ~ x1, data = dat)
m1 <- lm(y ~ x1 + x2, data = dat)
require(rockchalk)
outreg(list("Model of Student Behavior" = m0, "A More Elaborate Model" = m1), varLabels = c("x1" = "Studying", "x2" = "Math Lessons"))
@


\section*{Try to understand the different types of files that are generated.}

This is that bare-minimum amount of Sweave.

But you should still understand it is a \LyX{} file, that gets converted
to Rnw, which gets converted to \LaTeX{}, which gets converted to
PDF. The process can fail at any step, sometimes in difficult-to-understand
ways. 

You can ask for individual files out of this sequence, however. Here
is one way to ask for them explicitly.
\begin{enumerate}
\item File -> Export -> PDF (pdflatex) will export the PDF document, the
result you want.
\item File -> Export -> Sweave will create the Rnw document that R will
turn into \TeX{}.
\item File -> Export -> More Formats -> R/S code will run the ``tangle''
process to extract the R code from the Rnw document.
\item File -> Export -> Latex (pdflatex) will create the \LaTeX{} file that
we would turn into a PDF.\end{enumerate}
\begin{itemize}
\item I would like an automated process to achieve steps 1-3, but don't
have a good way. 
\item I usually don't need the tex file from step 4, unless there is a failure
to compile in the last phase. In cases like that, sometimes the only
thing you can do is get the \LaTeX{} file and inspect it.
\end{itemize}
Another thing worth remembering is that while it is running, \LyX{}
is using a temporary directory to keep track of all of its individual
files. That directory can be configured in 

Tools -> Preferences -> Paths -> Temporary Directory. On my system,
I have that set as ``/home/pauljohn/tmp/lyxtmp''. When I get errors,
I often go look in there to see what's going wrong.


\section*{If your PDF Fonts Look Horrible, Do This}

On my system, the default \LaTeX{} fonts are horrible when converted
to PDF. The quick fix for that in Lyx is 

Document -> Fonts 

and change to Latin Modern fonts. Choose Latin Modern for the ``Roman'',
``SanSerif'' and ``Typewriter'' font selections. I think many
other fonts will work as well, but I've always been happy with Latin
Modern.

Another reason to do this is that it reduces the danger of ``invisible''
characters due to the absence of a symbol from a character set. 


\section*{If you are Happy with that output, Use it!}
\begin{enumerate}
\item I usually want more attractive presentation of the code chunks. For
that, I use ``Sweavel.sty'', which will be discussed in article-2.
\item I also make other configuration changes. The end result is a template
document. If you want to learn more about how you can make your own
template, I suggest you start by reviewing my essay on making a \LyX{}
Template. In this area of my web page, http://pj.freefaculty.org/guides/Computing-HOWTO/LatexAndLyx
you should see a folder \LyX{}-article-template. In there, I show
step-by-step the changes I usually make when beginning with a ``blank''
\LyX{} article document. 
\item All of the compiling work R does is off in the temporary directory,
so I don't have copies of the files it creates while doing this work.
I ALMOST ALWAYS wish I had the separate pieces of \LaTeX{} markup
and the graphs in separate files, so I might use them in other presentations
or documents. If you want to see how that's done, move on to article-2.
\item I really wish there were a ``one button'' solution to export

\begin{enumerate}
\item The PDF for the Sweaved document
\item The Rnw file 
\item The R code that is extracted (tangled) from the Rnw document
\end{enumerate}

At one point, I had a \LyX{} script that did it, but after \LyX{}
updated, that script fails and I've not figured how to make it work.
Frustrating. That means I sometimes forget to export the Rnw file
and the R files when I export the PDF. \end{enumerate}

\end{document}
