#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{graphicx}
\newcommand\makebeamertitle{\frame{\maketitle}}%
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
%for bold upright roman in math for matrix algebra
\newcommand{\vn}[1]{\mbox{{\it #1}}}
\newcommand{\vb}{\vspace{\baselineskip}}
\newcommand{\vh}{\vspace{.5\baselineskip}}
\newcommand{\vf}{\vspace{\fill}}
\newcommand{\splus}{\textsf{S-PLUS}}
\newcommand{\R}{\textsf{R}}

%%PASTE IN\input{theme/guidePreambleSweavel.tex} 
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  numberstyle={\tiny},
  stepnumber=6
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  numberstyle={\tiny},
  stepnumber=6
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}
%%end paste in from guidePreambleSweavel.tex


\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%

%%END OF PASTE

\usepackage[natbibapa]{apacite}

\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
\setbeamercolor{structure}{bg=kublue,fg=kublue!90!black}
%\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{section in toc}{fg=kublue!40!black}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 
\hypersetup{colorlinks,allcolors=.,urlcolor=darkblue}
%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{images/logo}}
\end_preamble
\options aspectratio=169
\use_default_options false
\begin_modules
logicalmkup
natbibapa
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style 
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\branch R
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch semboot
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\branch cfalvm
\selected 1
\filename_suffix 0
\color #d6fbd6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Git it Together
\end_layout

\begin_layout Subtitle
Beginner Slides
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Begitters
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul Johnson
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

Center for Research Methods and Data Analysis 
\begin_inset Argument 1
status open

\begin_layout Plain Layout
K.U.
\end_layout

\end_inset


\end_layout

\begin_layout Date
2018
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
logo{
\backslash
includegraphics[width=5mm]{images/logomini}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsubsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Outline}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%following is LyX shortcut 
\backslash
vb for bold upright math for matrices
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vb}[1]{\bm{\mathrm{#1}}}
\end_inset


\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[plain]
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Column
3cm
\end_layout

\begin_layout Standard
Why Bother?
\end_layout

\begin_layout Column
8cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/phd101212s.gif
	height 9cm

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{CRMDA has a Git page}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://crmda.ku.edu/git-help
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We have 
\end_layout

\begin_deeper
\begin_layout Itemize
a long-ish note/essay, 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Git it Together! Version Management For Research Projects"
target "https://crmda.ku.edu/guides-31-git_it_together"

\end_inset


\begin_inset Quotes erd
\end_inset

 CRMDA Guide #31, which also offers 
\begin_inset CommandInset href
LatexCommand href
name "these slides"
target "http://crmda.dept.ku.edu/guides/31.git/31.git-slides.pdf"

\end_inset


\end_layout

\begin_layout Itemize
a short-ish note about using 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "GitLab: Instructions for Getting Started"
target "https://crmda.ku.edu/guide-34-GitLab"

\end_inset


\begin_inset Quotes erd
\end_inset

 CRMDA Guide #34
\end_layout

\end_deeper
\begin_layout Itemize
And some scribbles (in the folder 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.dept.ku.edu/guides/31.git
\end_layout

\end_inset

) about details like
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

Large File Storage (LFS)
\begin_inset Quotes erd
\end_inset

 problem 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.dept.ku.edu/guides/31.git/31.git-lfs.md
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
There is an endless supply of Websites and self-help manuals for Git.
 A full-sized book named 
\begin_inset CommandInset href
LatexCommand href
name "Pro Git"
target "https://git-scm.com/book/en/v2"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "gitpro"

\end_inset

 is among the most helpful.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Cheat sheet}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
use_makebox 0
width "81.5page%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
\noindent
Basic Usage
\end_layout

\end_inset

 for Git version-tracking repositories
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git clone
\end_layout

\end_inset

 - Copies a version-tracking repository (and all of its history).
 Usually for interacting with remote servers.
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git init
\end_layout

\end_inset

 - Initiates a new version-tracking repository in current working directory.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull/push
\end_layout

\end_inset

 - Keep up to date with remote repository (retrieve/send).
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git add
\end_layout

\end_inset

 - Tell Git to begin monitoring a file.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit
\end_layout

\end_inset

 - Tell Git to take a 
\begin_inset Quotes eld
\end_inset

snapshot
\begin_inset Quotes erd
\end_inset

 of altered files.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git status
\end_layout

\end_inset

 - Ask for report on files in project.
 Suggest 
\begin_inset Quotes eld
\end_inset

git status .
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git log
\end_layout

\end_inset

 - Ask for history report on project.
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Git BASH: Gitting to Know You
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Git in a BASH Terminal Session}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Assume you have Git installed.
 
\end_layout

\begin_layout Itemize
If not, stop and install it.
 See instructions in 
\begin_inset CommandInset href
LatexCommand href
name "chapter 3"
target "http://crmda.dept.ku.edu/guides/31.git/31.git.pdf"

\end_inset

 of 
\begin_inset Quotes eld
\end_inset

Git it Together
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Whether on Windows, Linux, or Mac, system will have a 
\begin_inset Quotes eld
\end_inset

Bash Terminal
\begin_inset Quotes erd
\end_inset

 where the user can interact with Git
\end_layout

\begin_deeper
\begin_layout Itemize
Windows: In explorer, notice right-click 
\begin_inset Quotes eld
\end_inset

Git BASH Here
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
On Linux or Macintosh, any Terminal will have access to Git if it is installed.
 Open terminal, run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git --version
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to make sure.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Good Opportunity to Learn about the Terminal}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Biggest challenge for novices will be understanding 
\begin_inset Quotes eld
\end_inset

where am I
\begin_inset Quotes erd
\end_inset

 in the directories.
 Commands to run:
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pwd
\end_layout

\end_inset

 Ask your system to print (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
p
\end_layout

\end_inset

) name of the current working directory (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
wd
\end_layout

\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cd
\begin_inset space ~
\end_inset

dirname
\end_layout

\end_inset

 Change (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
c
\end_layout

\end_inset

) current working directory (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
d
\end_layout

\end_inset

) to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
dirname
\end_layout

\end_inset

 
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
mkdir
\begin_inset space ~
\end_inset

dirname
\end_layout

\end_inset

 Creates a new directory named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
dirname
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
For more command line advice, see 
\end_layout

\begin_deeper
\begin_layout Itemize
the 
\begin_inset Quotes eld
\end_inset

Intro Terminal
\begin_inset Quotes erd
\end_inset

 guides on 
\begin_inset CommandInset href
LatexCommand href
name "my Computing-HOWTO pages"
target "http://pj.freefaculty.org/guides/Computing-HOWTO"

\end_inset


\end_layout

\begin_layout Itemize
my 
\begin_inset Quotes eld
\end_inset

shell notes
\begin_inset Quotes erd
\end_inset

 from the Software Carpentry workshop: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/pauljohn32/sc_shell
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
For now, just relax and believe this can work, 
\emph on
if you have some patience
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Uncle Paul's Advice: Keep Your Git Together}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Figure out where you want to keep a folder named GIT
\end_layout

\begin_layout Itemize
Clone all Git repositories in there, 
\emph on
so you can always find them
\end_layout

\begin_layout Itemize
My GIT repository is in my home folder at the top level, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
/home/pauljohn/GIT
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Perhaps a Windows or Mac user would like 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
/home/username/Documents/GIT
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
DO NOT 
\end_layout

\begin_deeper
\begin_layout Itemize
put this in a Dropbox or other automagical network file server
\end_layout

\begin_layout Itemize
allow any directories with spaces or non-alphanumeric characters.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
3 Common Scenarios
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Focus on 3 Common Use Cases}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In following sections, we consider 3 typical usage scenarios.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Track a remote repository, keep up to date
\end_layout

\begin_layout Enumerate
Create your 
\emph on
own
\emph default
 repository in your 
\emph on
own
\emph default
 computer
\end_layout

\begin_layout Enumerate
Interact with a server by pulling and pushing changes
\end_layout

\end_deeper
\begin_layout Itemize
We expect novices can follow along with the first 2 scenarios without too
 much trouble.
\end_layout

\begin_layout Itemize
The third, which puts the pieces together, will probably take some practice.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scenario 1: Track one professor's GitHub repository
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Retrieve a set of class notes}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Paul Johnson has a GitHub account named 
\begin_inset Quotes eld
\end_inset

pauljohn32
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
He keeps a couple of projects there, but not most things for CRMDA (for
 which we use a GitLab server that we administer)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Browse first}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Browse to 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/pauljohn32/RHS
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/GitHub-01-greeting.png
	width 10cm

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Browse first}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
See the Green 
\begin_inset Quotes eld
\end_inset

Clone or download
\begin_inset Quotes erd
\end_inset

 button (top right?).
 
\begin_inset Graphics
	filename images/GitHub-01-download.png
	width 2cm

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
That's information, not for action
\end_layout

\begin_layout Itemize
It gives instructions to download with secure shell (SSH) or a password
 (HTTPS).
\end_layout

\begin_layout Itemize
Using 
\begin_inset Quotes eld
\end_inset

Clone with SSH
\begin_inset Quotes erd
\end_inset

 will require you to have a GitHub account with which you have registered
 an SSH security key.
\end_layout

\end_deeper
\begin_layout Itemize
You are allowed to 
\begin_inset Quotes eld
\end_inset

Clone with HTTPS
\begin_inset Quotes erd
\end_inset

 even if you don't have a GitHub account.
\end_layout

\begin_layout Itemize
This will be a read-only clone repository
\end_layout

\begin_deeper
\begin_layout Itemize
You don't have permission to alter that material on GitHub
\end_layout

\begin_layout Itemize
Implication: You will never 
\begin_inset Quotes eld
\end_inset

push
\begin_inset Quotes erd
\end_inset

 changes back to server
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Choose the HTTPS}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The small box under 
\begin_inset Quotes eld
\end_inset

Clone with HTTPS
\begin_inset Quotes erd
\end_inset

 will offer an address
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/GitHub-01-CloneHTTPS.png
	width 6cm

\end_inset


\end_layout

\begin_layout Itemize
That gives the address of the repository you want to clone
\end_layout

\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
https://github.com/pauljohn32/RHS.git
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In your terminal, type this: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small}"
inline false
status open

\begin_layout Plain Layout

$ git clone https://github.com/pauljohn32/RHS.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's the response:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

Cloning into 'RHS'...
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 871, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (36/36), done.
\end_layout

\begin_layout Plain Layout

remote: Total 871 (delta 21), reused 37 (delta 11), pack-reused 824
\end_layout

\begin_layout Plain Layout

Receiving objects: 100% (871/871), 10.14 MiB | 7.81 MiB/s, done.
\end_layout

\begin_layout Plain Layout

Resolving deltas: 100% (353/353), done.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Inspect the result}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

RHS
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cd RHS
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls -lah
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

total 32K
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  6 pauljohn32 pauljohn32 4.0K Feb 17 12:18 .
\end_layout

\begin_layout Plain Layout

drwxr-xr-x  3 pauljohn32 pauljohn32 4.0K Feb 17 12:18 ..
\end_layout

\begin_layout Plain Layout

drwxrwxr-x 43 pauljohn32 pauljohn32 4.0K Feb 17 12:18 exercises
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  8 pauljohn32 pauljohn32 4.0K Feb 17 12:18 .git
\end_layout

\begin_layout Plain Layout

-rw-rw-r--  1 pauljohn32 pauljohn32  242 Feb 17 12:18 .gitignore
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  6 pauljohn32 pauljohn32 4.0K Feb 17 12:18 guides
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  4 pauljohn32 pauljohn32 4.0K Feb 17 12:18 notes
\end_layout

\begin_layout Plain Layout

-rw-rw-r--  1 pauljohn32 pauljohn32  810 Feb 17 12:18 README.md	
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

.git
\begin_inset Quotes erd
\end_inset

 folder is the historical archive, it is your local 
\begin_inset Quotes eld
\end_inset

record keeper
\begin_inset Quotes erd
\end_inset

.
 
\series bold
DO NOT DELETE IT!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Use git log to review the history}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Default output is verbose, going from recent to past.
 To break off the page-by-page listing, hit the letter 'q' on the keyboard.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

commit df12636913e00881cb2b715339c1e41dd19b77b1 (HEAD -> master, origin/master,
 origin/HEAD)
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Tue Feb 13 15:38:03 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    downloader for smoking data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 829a4d2bc298358b93a28c94d2f3471010ebb8af
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Tue Feb 13 15:30:10 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Ex-01.3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 99c14e866f4e12e597172948d184039c714c240e
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Thu Feb 8 17:37:21 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Ex-02.2-ghq:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Ex-02.2-ghq: Rmd, R and html
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Ex-02.2-ghq: build out update
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 65d8c484d0aab78eb3660dba7d142e3883026d7c
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Thu Feb 8 10:22:01 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Ex-02.1-pefr worked fully
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If you ask Mr Google or check stackoverflow.com for advice, you'll see that
 
\begin_inset Quotes eld
\end_inset

git log
\begin_inset Quotes erd
\end_inset

 can be run with many arguments to beautify the output.
 
\end_layout

\begin_deeper
\begin_layout Itemize
I generally ignore that.
\end_layout

\begin_layout Itemize
I avoid customizing my user account with aliases and shortcuts.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Checking for Updates}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This Git repo is updated periodically, users will want the latest and greatest.
\end_layout

\begin_layout Itemize
Open a Terminal, and from the RHS directory, run:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
As long as you have not changed any files, or damaged settings in the .git
 directory, this will work
\end_layout

\begin_layout Itemize
Except if it does not (See next slide).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{There is only one thing to worry about: pull fails if you edit
 files}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The repository you have is a 
\begin_inset Quotes eld
\end_inset

read only
\begin_inset Quotes erd
\end_inset

 clone
\end_layout

\begin_layout Itemize
However, 
\emph on
You are Allowed to Edit
\emph default
 the files.
 
\end_layout

\begin_layout Itemize

\series bold
If
\series default
 
\end_layout

\begin_deeper
\begin_layout Enumerate
you edit a file, and
\end_layout

\begin_layout Enumerate
the repo manager edits a file
\end_layout

\begin_layout Standard
then 
\begin_inset Quotes eld
\end_inset

git pull
\begin_inset Quotes erd
\end_inset

 will fail.
 
\end_layout

\end_deeper
\begin_layout Itemize
It fails because git wants to protect your edits, it does not want to erase
 them.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{How your edit causes conflict}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you both edit 
\begin_inset Quotes eld
\end_inset

README.md
\begin_inset Quotes erd
\end_inset

, here's the error message that results 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

remote: Counting objects: 3, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (1/1), done.
\end_layout

\begin_layout Plain Layout

remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0
\end_layout

\begin_layout Plain Layout

Unpacking objects: 100% (3/3), done.
\end_layout

\begin_layout Plain Layout

From https://github.com/pauljohn32/RHS
\end_layout

\begin_layout Plain Layout

   df12636..37518f8  master     -> origin/master
\end_layout

\begin_layout Plain Layout

Updating df12636..37518f8
\end_layout

\begin_layout Plain Layout

error: Your local changes to the following files would be overwritten by
 merge:
\end_layout

\begin_layout Plain Layout

        README.md
\end_layout

\begin_layout Plain Layout

Please commit your changes or stash them before you merge.
\end_layout

\begin_layout Plain Layout

Aborting
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Ignore the advice to 
\begin_inset Quotes eld
\end_inset

commit or stash
\begin_inset Quotes erd
\end_inset

, that is for contributors, not read-only repo watchers
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout
If you want to edit a file
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
copy it to another file name and edit that
\end_layout

\end_deeper
\begin_layout Itemize
If you forget that and do edit a file, then recover it.
\end_layout

\begin_deeper
\begin_layout Enumerate
rename the file you edited
\end_layout

\begin_layout Enumerate
recover the original copy from the history:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "style=Rinput"
inline false
status open

\begin_layout Plain Layout

$ git checkout -- name-of-removed-file
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
this will work, but not if you committed your changes.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scenario 2: Create your own Repository
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Track your own effort, locally}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A remote server is not necessary
\end_layout

\begin_layout Itemize
This is just about keeping notes and history for yourself
\end_layout

\begin_layout Itemize
I tell students to track any project they start, no matter what.
\end_layout

\begin_deeper
\begin_layout Itemize
If you don't track your effort, please stop and think if your effort is
 worthwhile.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Step 1.
 Create a repo in a directory}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Start in your GIT directory
\end_layout

\begin_layout Itemize
Create an empty directory.
 
\end_layout

\begin_deeper
\begin_layout Itemize
e.g.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ mkdir fun1
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
change into that directory
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cd fun1
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Run 
\begin_inset Quotes eld
\end_inset

git init
\begin_inset Quotes erd
\end_inset

 to create your local repo
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
If your directory is not in a network file server, run
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git init
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

Initialized empty Git repository in /tmp/fun1/.git/
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
On a network file server, can allow teammates access by adding 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
–shared=group
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git init --shared=group
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Add some content}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Step 2.
 Add a file, any file you like
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Use any editor you like
\end_layout

\begin_layout Itemize
Windows may make this frustrating, try 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
touch README.md
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 first to create an empty file.
 Look at directory in file manager, then use Emacs, Notepad++, or some other
 adequate editor after that.
\end_layout

\end_deeper
\begin_layout Itemize
Step 3.
 Tell git to track that file
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git add README.md
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Step 4.
 Commit the file (means take a snapshot).
 
\series bold
Don't run this yet!
\series default
*
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit README.md
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
An editor will pop up.
 This editor, 
\begin_inset Quotes eld
\end_inset

vi
\begin_inset Quotes erd
\end_inset

, may be unfamiliar to you.
 If you want to avoid vi for now, add a commit message on the command line
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit afile.txt -m "this is the new fabulous report"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Then edit README.md, then commit it again.
\end_layout

\begin_layout Itemize
Repeat several times
\end_layout

\begin_layout Standard

\series bold
* see next slide!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim,allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{If you run "git commit README.md" and vi opens $
\backslash
ldots$}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Enumerate
hit the letter 
\begin_inset Quotes eld
\end_inset

i
\begin_inset Quotes erd
\end_inset

, which turns on insert mode.
 You should be able to type a message in first line of file.
 Only use keyboard arrows to move cursor.
 The mouse is not going to work.
\end_layout

\begin_layout Enumerate
After typing your message, hit these 4 keys (in sequence)
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Esc
\begin_inset Quotes erd
\end_inset

 (The escape key on top left).
 
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 (the colon key: causes vi to be ready for commands)
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

w
\begin_inset Quotes erd
\end_inset

 (writes the file)
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

q
\begin_inset Quotes erd
\end_inset

 (quits vi)
\end_layout

\end_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
My student jb sells needlepoint projects on Etsy:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/jb-vi-stich.jpg
	width 5cm

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Review History with "git log"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The Git log
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

commit 3e6a036db79705a5dcd0167bb312c98bb6a982f2 (HEAD -> master)
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:29:04 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Edit README a third time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 24b03668d86254ae2a44e47105bb3f047420ae4c
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:28:36 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    edit readme
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 620a52fbde42c366138e8709b54b08e7a5776c54
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:28:12 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    readme added for git tracking
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If you ask a randomly chosen Russian teenager, they will say run
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --oneline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --oneline --decorate
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Status check}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
This command surveys the project folder and makes a report (which will not
 be very interesting at the moment)
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

On branch master 
\end_layout

\begin_layout Plain Layout

nothing to commit, working tree clean 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Make 2 changes
\end_layout

\begin_deeper
\begin_layout Itemize
Add another file in the project.
 Any kind, any name (e.g., 
\begin_inset Quotes eld
\end_inset

iamasuperhero.txt
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Edit README.md and save it, but do not commit it.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
After that, git status will be more interesting.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "style=Rinput"
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

Changes not staged for commit:
\end_layout

\begin_layout Plain Layout

  (use "git add <file>..." to update what will be committed)
\end_layout

\begin_layout Plain Layout

  (use "git checkout -- <file>..." to discard changes in working directory)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        modified:   README.md
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Untracked files:
\end_layout

\begin_layout Plain Layout

  (use "git add <file>..." to include in what will be committed)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        iamasuperhero.txt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

no changes added to commit (use "git add" and/or "git commit -a")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Cautions 1: don't carelessly add material}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We do not add/commit 
\end_layout

\begin_deeper
\begin_layout Itemize
Trash folders, tmp files, backup files
\end_layout

\begin_layout Itemize
password files, confidential client data
\end_layout

\end_deeper
\begin_layout Itemize
To avoid accidental additions, 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
DO NOT add/Commit whole directories
\end_layout

\end_inset

.
 Add file-by-file.
\end_layout

\begin_layout Itemize
Difficult to completely expunge confidential information without ruining
 repository.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Cautions 2: Careful with "git commit -a"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
I suggest adding and committing individual files
\end_layout

\begin_layout Itemize
A shortcut to commit all revisions is to add 
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit -a
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
editor will warn you about changes, so not horribly unpredictable
\end_layout

\end_deeper
\begin_layout Itemize
However, if you carelessly run this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit -a -m "your message here"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then you have no chance to review your actions.
\end_layout

\end_deeper
\begin_layout Itemize
Suppose you have accidentally deleted or removed a file.
 Even if you don't explicitly run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git rm filename
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, Git will remove files from project when you run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit -a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create a branch}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Suppose your repo files look good, but you want to work on a new feature
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch pj-xfix
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Check your branch was created
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -avv
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

* master  3e6a036 Edit README a third time
\end_layout

\begin_layout Plain Layout

  pj-xfix 3e6a036 Edit README a third time
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Change the working directory onto files tracked by the branch
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout pj-xfix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Switched to branch 'pj-xfix' 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Note that the untracked file, 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
iamasuperhero.txt
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is still floating loose.
 If we edit it while in this branch, there will be trouble later.
\end_layout

\begin_layout Itemize
Do some edits.
 Add some files.
 commit the changes.
 Don't forget the commits, or else the edits are ignored.
\end_layout

\begin_layout Itemize
When it is perfect, put the revisions into the master branch
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\begin_layout Plain Layout

$ git merge pj-xfix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Updating 3e6a036..2d30518
\end_layout

\begin_layout Plain Layout

Fast-forward
\end_layout

\begin_layout Plain Layout

 README.md    | 2 ++
\end_layout

\begin_layout Plain Layout

 newfile1.txt | 2 ++
\end_layout

\begin_layout Plain Layout

 2 files changed, 4 insertions(+)
\end_layout

\begin_layout Plain Layout

 create mode 100644 newfile1.txt
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Review the history:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

commit 2d3051817f91887d921613305943a32370f7bb2f (HEAD -> master, pj-xfix)
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:37:33 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    README: edit inside branch pj-xfix
\end_layout

\begin_layout Plain Layout

    newfile1: edit inside branch pj-xfix
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 3e6a036db79705a5dcd0167bb312c98bb6a982f2
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:29:04 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Edit README a third time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 24b03668d86254ae2a44e47105bb3f047420ae4c
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:28:36 2018 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    edit readme
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 620a52fbde42c366138e8709b54b08e7a5776c54
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Sun Feb 18 12:28:12 2018 -0600
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Delete the (now unneeded) branch
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -d pj-xfix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Deleted branch pj-xfix (was 2d30518).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Review
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

Untracked files:
\end_layout

\begin_layout Plain Layout

  (use "git add <file>..." to include in what will be committed)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        iamasuperhero.txt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

nothing added to commit but untracked files present (use "git add" to track)
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
This was simple branch/merge because there were no other users involved.
\end_layout

\begin_deeper
\begin_layout Itemize
We were sure master had not changed after we checked out the branch
\end_layout

\begin_layout Itemize
There was no fear of conflicts between ourself on master and ourself on
 the branch
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Future TODO for you: .gitignore}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
As time goes by, your project folder may have files you don't want to track
 (such as backup files, error logs, photos of my lovely gardens, your fake
 ID from high school, or your most recent love letter to George Bush, etc.)
\end_layout

\begin_layout Itemize
Output from 
\begin_inset Quotes eld
\end_inset

git status
\begin_inset Quotes erd
\end_inset

 will always mention these files and suggest you track them.
\end_layout

\begin_layout Itemize
Create a file 
\begin_inset Quotes eld
\end_inset

.gitignore
\begin_inset Quotes erd
\end_inset

 in the top of the project to tell git to stop warning you about those files.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Future TODO for you: git rebase to squash commits}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
You commit 10 times to correct 1 problem, 6 of which are goofups
\end_layout

\begin_layout Itemize
Clean up the project history by squashing those commits together
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rebase -i HEAD~10
\end_layout

\end_inset


\end_layout

\begin_layout Standard
will launch an interactive session.
 Enter 1 commit ungoofed message.
\end_layout

\end_deeper
\begin_layout Itemize
Read more: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.dept.ku.edu/guides/31.git/31.git-squash.md
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scenario 3: Interact with a Remote
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Interacting with Teammates via A Remote Repo}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

git clone
\begin_inset Quotes erd
\end_inset

 retrieves a copy, as we have seen before.
\end_layout

\begin_layout Itemize
The git folder knows where its remote server is.
 Nickames it 
\begin_inset Quotes eld
\end_inset

origin
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
User has ability to 
\begin_inset Quotes eld
\end_inset

push
\begin_inset Quotes erd
\end_inset

 changes and 
\begin_inset Quotes eld
\end_inset

pull
\begin_inset Quotes erd
\end_inset

 updates.
\end_layout

\begin_deeper
\begin_layout Itemize
After commits, 
\begin_inset Quotes eld
\end_inset

git push
\begin_inset Quotes erd
\end_inset

 sends changes to server
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

git pull
\begin_inset Quotes erd
\end_inset

 fetches and merges updates from remote (some subtle problems come up, see
 
\begin_inset Quotes eld
\end_inset

Git it Together
\begin_inset Quotes erd
\end_inset

).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize your workflow}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/git-flowchart.png
	width 9cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Remote magic, or not}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Setting up the remote repo requires some specialized knowledge.
\end_layout

\begin_deeper
\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

bare
\begin_inset Quotes erd
\end_inset

 repository 
\end_layout

\begin_deeper
\begin_layout Description
Definition: allows 
\begin_inset Quotes eld
\end_inset

clone
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

pull
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

push
\begin_inset Quotes erd
\end_inset

 commands.
\end_layout

\end_deeper
\begin_layout Itemize
Can be done, but not too easy to correctly regulate user access
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

GitHub
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

GitLab
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

BitBucket
\begin_inset Quotes erd
\end_inset

 simplify that with Web server GUI.
 
\end_layout

\begin_layout Itemize
Our workers in CRMDA almost NEVER need to create bare repos anymore.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Standard Workflow}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Manager creates repo, tells teammates the address
\end_layout

\begin_layout Enumerate
Worker clones a copy of project
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git clone <address provided>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Worker creates personal branch (with informative name)
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch pj-docs
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Inspect to see if branch was created
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -avv
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Worker decides to work inside the new branch.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout pj-docs
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This turns the working directory into a view of files in the new branch.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Description
Shortcut achieve both creation of branch and checkout in one step
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout -b pj-docs
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
User edits files.
 Uses 
\begin_inset Quotes eld
\end_inset

git add
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

git commit
\begin_inset Quotes erd
\end_inset

 as usual.
\end_layout

\begin_layout Enumerate
Send a copy back to the server:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git push -u origin pj-docs
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Figure out way (or ask manager) to merge revisions onto the main project.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
Big Mystery
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\series bold
Question
\series default
: How can the branch 
\begin_inset Quotes eld
\end_inset

pj-docs
\begin_inset Quotes erd
\end_inset

 stay in harmony with larger project?
\end_layout

\begin_layout Standard

\series bold
Answer
\series default
: this as much a social science as computer science problem! Must develop
 team expectations and cultivate communication
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Review branches within local and remote repos}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Suppose there is no remote server.
 Then the branches are all local.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -avv
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

  * master               819fb77 [origin/master: ahead 1] multilevel random-inte
rcepts-2: 
\end_layout

\begin_layout Plain Layout

  pj-temp               28f9b31 presentation/ordinalSEM.lyx: minor edits.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I've got the 
\begin_inset Quotes eld
\end_inset

master branch
\begin_inset Quotes erd
\end_inset

 (which is checked out) and a branch named 
\begin_inset Quotes eld
\end_inset

pj-temp
\begin_inset Quotes erd
\end_inset

 where I'm experimenting with a new feature
\end_layout

\end_deeper
\begin_layout Itemize
Suppose now a remote is added and pulled.
 After that I see more branches
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

  * master            819fb77 [origin/master: ahead 1] multilevel random-interce
pts-2: 
\end_layout

\begin_layout Plain Layout

  pj-temp               28f9b31 presentation/ordinalSEM.lyx: minor edits.
\end_layout

\begin_layout Plain Layout

  remotes/origin/HEAD    -> origin/master
\end_layout

\begin_layout Plain Layout

  remotes/origin/px-msha  c713097 msha/import: change outdir to workingdata
\end_layout

\begin_layout Plain Layout

 remotes/origin/master   b806ee4 random-intercepts-1: 2018 style update
\end_layout

\begin_layout Plain Layout

  remotes/origin/kk-maxilikeli d3ba2c4 hbsc-subset2-key2
\end_layout

\begin_layout Plain Layout

 remotes/origin/red-gx   b30ccdc summeR-1.4 getwd insert initProjects
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

remotes/origin/xxx
\begin_inset Quotes erd
\end_inset

 are 
\begin_inset Quotes eld
\end_inset

remote branches
\begin_inset Quotes erd
\end_inset

.
 I don't edit them directly, they are copied from the server
\end_layout

\begin_layout Itemize
Suppose I run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout px-msha
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 After that, the output from 
\begin_inset Quotes eld
\end_inset

git branch -avv
\begin_inset Quotes erd
\end_inset

 will show a local 
\begin_inset Quotes eld
\end_inset

tracking
\begin_inset Quotes erd
\end_inset

 branch 
\begin_inset Quotes eld
\end_inset

px-msha
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

   *px-msha       c713097 [origin/px-msha] msha/import: change outdir
\end_layout

\begin_layout Plain Layout

  master        819fb77 [origin/master: ahead 1] multilevel random-intercepts-2:
 
\end_layout

\begin_layout Plain Layout

  pj-temp          28f9b31 presentation/ordinalSEM.lyx: minor edits.
\end_layout

\begin_layout Plain Layout

  remotes/origin/HEAD    -> origin/master
\end_layout

\begin_layout Plain Layout

  remotes/origin/px-msha   c713097 msha/import: change outdir to workingdata
\end_layout

\begin_layout Plain Layout

  remotes/origin/master    b806ee4 random-intercepts-1: 2018 style update
\end_layout

\begin_layout Plain Layout

  remotes/origin/kk-maxilikeli d3ba2c4 hbsc-subset2-key2
\end_layout

\begin_layout Plain Layout

  remotes/origin/red-gx      b30ccdc summeR-1.4 getwd insert initProjects
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

local tracking branch
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
px-msha
\end_layout

\end_inset

 is currently synchronized with origin/px-msha.
 We can see that because the most recent commit is 
\begin_inset Quotes eld
\end_inset

C713097
\begin_inset Quotes erd
\end_inset

 for both.
\end_layout

\begin_layout Itemize
However, if I edit and commit in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
px-msha
\end_layout

\end_inset

, it will be different than 
\begin_inset Quotes eld
\end_inset

origin/px-msha
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
And if the owner of px-msha makes changes from his computer and pushes to
 the server, then the copy on the server, which is referred to as 
\begin_inset Quotes eld
\end_inset

origin px-msha
\begin_inset Quotes erd
\end_inset

 is different from the others.
\end_layout

\begin_layout Itemize
Understand the effect of committing and pushing.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
commit: update information in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
px-msha
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
push: 
\end_layout

\begin_deeper
\begin_layout Enumerate
updates 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/px-msha
\end_layout

\end_inset

 the local copy of the server branch
\end_layout

\begin_layout Enumerate
copies branch to remote, thus synchronizing 
\begin_inset Quotes eld
\end_inset

origin px-msha
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{fetch versus pull}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If we are in a branch, say master, and run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, here is what git does
\end_layout

\begin_deeper
\begin_layout Itemize
Retrieve the newest from 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin master
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
save that in local 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
pull updates from 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 and apply to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
master
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If we run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 the records on all of the remote branches are pulled, so 
\begin_inset Quotes eld
\end_inset

origin/master
\begin_inset Quotes erd
\end_inset

 (or any branch named 
\begin_inset Quotes eld
\end_inset

origin/xxx
\begin_inset Quotes erd
\end_inset

) is retrieved.
\end_layout

\begin_layout Itemize
fetch does not apply the changes in 
\begin_inset Quotes eld
\end_inset

origin/master
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

master
\begin_inset Quotes erd
\end_inset

 automatically.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Branches Confusing, but Helpful}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
We discuss recovering from mistakes in the manual 
\emph on
Git it Together
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/px-msha
\end_layout

\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

safe place
\begin_inset Quotes erd
\end_inset

 to revert to.
 
\end_layout

\begin_layout Itemize
If we fiddle with px-msha and make errors, it is very easy to reset 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
px-msha
\end_layout

\end_inset

 to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/px-msha
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Customs for Managing Branches
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{master and other branches}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
All git repositories have at least one 
\begin_inset Quotes eld
\end_inset

branch
\begin_inset Quotes erd
\end_inset

, which is called the 
\series bold
master branch
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/pj-git-merge-0.pdf
	lyxscale 50
	width 7cm

\end_inset


\end_layout

\begin_layout Standard
solid dots represent commits.
\end_layout

\end_deeper
\begin_layout Itemize
For CRMDA, master is the 
\begin_inset Quotes eld
\end_inset

correct
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

currently working
\begin_inset Quotes erd
\end_inset

 version of a project.
\end_layout

\begin_layout Itemize
We don't allow users to push onto the master branch.
 
\end_layout

\begin_layout Itemize
A project manager is supposed to make sure that master is good at any moment
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Visualize the branch 
\backslash
& merge}
\end_layout

\end_inset


\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
7cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/stable-mainline.png
	lyxscale 10
	width 7cm

\end_inset


\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

stable mainline
\begin_inset Quotes erd
\end_inset

 branching model
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Schematic overview}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Users 
\begin_inset Quotes eld
\end_inset

git clone
\begin_inset Quotes erd
\end_inset

 our project repo 
\end_layout

\begin_layout Enumerate
Create personal branch (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch pj-fix
\end_layout

\end_inset

)
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/pj-git-merge-1.pdf
	lyxscale 50
	width 7cm

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Check out the branch (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout pj-fix
\end_layout

\end_inset

)
\end_layout

\begin_layout Enumerate
Edit files, add, commit, etc
\end_layout

\begin_layout Enumerate
Push the branch onto the server (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git push -u origin pj-fix
\end_layout

\end_inset

)
\end_layout

\begin_deeper
\begin_layout Standard
(see 
\series bold
\color red
caution
\series default
\color inherit
 below)
\end_layout

\end_deeper
\begin_layout Enumerate
Request a merge onto the master branch
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/pj-git-merge-2.pdf
	lyxscale 50
	width 7cm

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Caution: teamwork is difficult}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Workers create branches
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
px-msha
\end_layout

\end_inset


\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
red-gx
\end_layout

\end_inset


\begin_inset space ~
\end_inset

/
\begin_inset space ~
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
kk-maxilikeli
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Race to Push
\series default
: If one of the workers finishes her work first, and requests a merge onto
 master, and the manager does the merge, then
\end_layout

\begin_deeper
\begin_layout AlertBlock

\emph on
\begin_inset Argument 2
status open

\begin_layout Plain Layout
All of the other workers branches may become
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate

\emph on
out of date
\emph default
, 
\series bold
useless
\series default
, 
\emph on
irrelevant
\emph default
 or
\end_layout

\begin_layout Enumerate

\emph on
contradictory, harmful, conflicted.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{How We Deal With That?}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Avoid having different team members edit same files
\end_layout

\begin_layout Enumerate
Require team members to keep branches up-to-date with the master branch
\end_layout

\begin_deeper
\begin_layout Standard
Use the magic 4 step sequence
\series bold
 OFTEN
\series default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

$ git checkout pj-docs
\end_layout

\begin_layout Plain Layout

$ git merge master
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The picture describing the branches will look like this
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/pj-git-merge-3.pdf
	lyxscale 50
	width 7cm

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
When merge request happens, the first thing the manager does is check to
 see if the branch is fully up to date with master branch.
 If not, reject.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Preserve Sanity: short lived branches}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Name Branches in Obvious Ways (e.g.
 initials and purpose):
\end_layout

\begin_deeper
\begin_layout Quote
pj-graphs 
\end_layout

\end_deeper
\begin_layout Itemize
Branches don't live forever.
 Merge and Remove branches!
\end_layout

\begin_layout Itemize
Users delete (prune) local copies of branches that were removed on server
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch -p
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks, containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{How does this look from a manager point of view?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A worker says 
\begin_inset Quotes eld
\end_inset

I want you to merge px-msha
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
The merge can be done in
\end_layout

\begin_deeper
\begin_layout Itemize
GitLab graphical iterface
\end_layout

\begin_layout Itemize
Command line on manager workstation
\end_layout

\end_deeper
\begin_layout Itemize
On workstation, do this
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -avv
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Inspect the changes
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout px-msha
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If satisfactory, merge 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
px-msha
\end_layout

\end_inset

 and delete:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\begin_layout Plain Layout

$ git merge px-msha
\end_layout

\begin_layout Plain Layout

## remove old branch local and server
\end_layout

\begin_layout Plain Layout

$ git branch -d px-msha
\end_layout

\begin_layout Plain Layout

$ git push origin --delete px-msha
\end_layout

\begin_layout Plain Layout

$ git fetch -p
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Danger Will Robinson: author of px-msha continues changing and pushing.
 My checked out local copy is stale.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch
\end_layout

\begin_layout Plain Layout

$ git checkout px-msha
\end_layout

\begin_layout Plain Layout

$ git merge origin/px-msha
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
or, equivalently:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout px-msha
\end_layout

\begin_layout Plain Layout

$ git pull
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{TODO for you: Git-LFS}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Git is very efficient with text files.
 It only stores changes between versions.
\end_layout

\begin_layout Itemize
Git is not efficient with binary files like movies, pictures, Excel sheets,
 etc.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Git will save historical copies of each version that is revised.
\end_layout

\begin_layout Itemize
Storage will grow because .git folder keeps all old copies
\end_layout

\begin_layout Itemize
Git will run slower and slower because of these hard-to-manage files
\end_layout

\end_deeper
\begin_layout Itemize
Currently, solution we are using 
\begin_inset Quotes eld
\end_inset

Git-LFS
\begin_inset Quotes erd
\end_inset

, an add-on program that handles the binary files, keeps them in separate
 server.
 
\end_layout

\begin_layout Itemize
To read more: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.dept.ku.edu/guides/31.git/31.git-lfs.md
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Good chance to learn the "command line"}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
All programmers & data scientists will need to go beneath the Graphical
 User Interface at times
\end_layout

\begin_layout Itemize
Using Git BASH in Windows offers a good way to get some practice because
 it is a general purpose shell.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Practice is required}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Git will require practice, it is easy to forget 
\begin_inset Quotes eld
\end_inset

commit
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

push
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Users should create their own 
\begin_inset Quotes eld
\end_inset

cheat sheets
\begin_inset Quotes erd
\end_inset

 so they can remember what works.
\end_layout

\begin_deeper
\begin_layout Itemize
Avoid blindly following advice you find in the Internet.
 
\end_layout

\end_deeper
\begin_layout Itemize
For personal convenience on personal notes, I use SparkleShare (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

www.sparkleshare.org
\end_layout

\end_inset

).
 It is an 
\begin_inset Quotes eld
\end_inset

auto git
\begin_inset Quotes erd
\end_inset

 program that always adds and commits all changes and copies them to the
 remote all the time.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Git is a Priority for Career Preparation}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Git is an industry standard for data science researchers and programmers
\end_layout

\begin_layout Itemize
Most people who work in data science are expected to be familiar with Git,
 if not enthusiastic about it.
\end_layout

\begin_layout Itemize
Watch out for the koolaid, however.
 We've had several workers who become infatuated with Git jargon and the
 sprawling Internet community.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{References}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "computing"
options "apalike2"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
