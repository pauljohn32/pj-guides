#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\begin_preamble
\usepackage{textcomp}
\usepackage{xcolor}
\usepackage{graphbox}
% $ This nullifies emacs subscripting in following%
%%BEGIN: This begins the custom header
\usepackage{array}
\usepackage{xparse}
\usepackage{babel}
\usepackage{datetime}
\usepackage{xcolor}
\usepackage{colortbl}
\usepackage{graphicx}
\usepackage{multicol}
\usepackage[T1]{fontenc}

\definecolor{darkblue}{HTML}{1e2277}
\definecolor{kublue81186}{RGB}{0,81,186}
\newdateformat{monddyyyy}{\shortmonthname[\THEMONTH].~\THEDAY,~\THEYEAR}


%% BEGIN custom header
\ExplSyntaxOn
\NewDocumentCommand \guidesetup { m }
 {
  \keys_set:nn { guide } { #1 }
 }

\int_new:N \g_guide_authors_int
\prop_new:N \g_guide_authors_prop
\tl_new:N \l__guide_authors_tl

\keys_define:nn { guide }
 {
  author .code:n =
   {
    \int_gincr:N \g_guide_authors_int
    \keys_set:nn { guide / author } { #1 }
   },
  author/firstname .code:n = { \guide_add_author:nn { firstname } { #1 } },
  author/lastname .code:n = { \guide_add_author:nn { lastname } { #1 } },
  author/affiliation .code:n = { \guide_add_author:nn { affiliation } { #1 } },
  author/email .code:n = { \guide_add_author:nn { email } { #1 } },
  leftlogo .tl_set:N = \l_guide_leftlogo_tl,
  rightlogo .tl_set:N = \l_guide_rightlogo_tl,
  number .tl_set:N = \l_guide_number_tl,
  title .tl_set:N = \l_guide_title_tl,
  subtitle .tl_set:N = \l_guide_subtitle_tl,
  keywords .tl_set:N = \l_guide_keywords_tl,
  url .tl_set:N = \l_guide_url_tl,
  title .initial:n = {TITLE~NEEDED},
}
\NewDocumentCommand \guidehdr { +O{} }
 {
  \group_begin:
  \keys_set:nn { guide } { #1 }
  \guide_hdr:
  \group_end:
 }

\cs_new_protected:Nn \guide_hdr:
 {
  \centering
  \begin{tabular}
   {
    |c
    m{ \dim_eval:n { \textwidth - 2.5in - 6\tabcolsep - 2\arrayrulewidth } }
    c|
   }
  \arrayrulecolor{kublue81186}\hline
  &&\tabularnewline[-\dim_eval:n { -\normalbaselineskip + 3ex }]
  \begin{tabular}{@{}>{\centering}p{1.25in}@{}}
  \includegraphics[width=.75in]{\l_guide_leftlogo_tl}
  \end{tabular}
  &
  \centering
    {\textsc{\large{}\l_guide_title_tl}}
    \tl_if_empty:NF \l_guide_subtitle_tl
    {
      {\\\textsc{\large{}\l_guide_subtitle_tl}}
    }
  \\
  \textcolor{kublue81186}{\rule[0.5ex]{1\linewidth}{0.7pt}}\\
  \guide_print_authors:
  %\vspace{\bigskipamount}
  &
  \begin{tabular}{@{}>{\centering}p{1.25in}@{}}
  \includegraphics[width=1.25in]{\l_guide_rightlogo_tl}
  \end{tabular}
  \tabularnewline
  \tl_if_empty:NTF \l_guide_number_tl
   { \leavevmode\vphantom{G}}
   {\small\bfseries { Guide~No: ~ \tl_use:N \l_guide_number_tl }} & 
   \tl_if_empty:NF \l_guide_keywords_tl
   {\raggedright
    \textbf{Keywords}: ~ \l_guide_keywords_tl}
   & 
   \small\bfseries\monddyyyy\today \tabularnewline
   & \tl_if_empty:NF \l_guide_url_tl
   {
   \multicolumn{2}{>{\raggedright}p{4.5in}|}{
    See ~ \url{\l_guide_url_tl} ~ for ~ updates.}
   }
  \tabularnewline
  \hline 
  \end{tabular}
}

\cs_new_protected:Nn \guide_add_author:nn
 {
  \prop_gput:Nxn \g_guide_authors_prop
   { #1 \int_to_arabic:n { \g_guide_authors_int } }
   { #2 }
 }
\cs_generate_variant:Nn \prop_gput:Nnn { Nx }
\cs_new_protected:Nn \guide_print_authors:
 {
  \tl_clear:N \l__guide_authors_tl
  \int_step_inline:nnnn { 1 } { 1 } { \g_guide_authors_int }
   {
    \tl_put_right:Nn \l__guide_authors_tl
     {
      \textbf
       {
        \prop_item:Nn \g_guide_authors_prop { firstname ##1 }~
        \prop_item:Nn \g_guide_authors_prop { lastname ##1 },~
       }
      \prop_item:Nn \g_guide_authors_prop { affiliation##1 }~
      <\prop_item:Nn \g_guide_authors_prop { email##1 }> \\
     }
   }
   \tl_use:N \l__guide_authors_tl
 }
\ExplSyntaxOff
%%END This ends the custom header


\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

%% Create a Background color basic, common for input listings
\definecolor{ltgraybg}{gray}{0.95}
%% 20180301: wanted to unify code, but syntax tough
\providecommand{\Rbackground}{\color[gray]{0.95}}
\providecommand{\Routbackground}{\color[gray]{0.97}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,% 
  numberblanklines=false,
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  numberblanklines=false,
  firstnumber=1,
  stepnumber=5,
  numberstyle={\tiny}
}

\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}


\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{ltgraybg}{#1}%
}%

\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{xparse}
\usepackage{babel}

\ExplSyntaxOn
\NewDocumentCommand \footersetup { +m }
{
\keys_set:nn { footer } { #1 }
}
\keys_define:nn { footer }
{	
    leftside .code:n = {
\keys_set:nn { footer / leftside } { #1 }
},
rightside .code:n = {
\keys_set:nn { footer / rightside } { #1 }
},
    leftside / lone .tl_set:N = \l_footer_leftside_lone_tl,
    leftside / ltwo .tl_set:N = \l_footer_leftside_ltwo_tl,
    leftside / lthree .tl_set:N = \l_footer_leftside_lthree_tl,
    rightside / rone .tl_set:N = \l_footer_rightside_rone_tl,
    rightside / rtwo .tl_set:N = \l_footer_rightside_rtwo_tl,
    rightside / rthree .tl_set:N = \l_footer_rightside_rthree_tl,
    leftside .initial:n = {lone = , ltwo = ~, lthree = ~ },
    rightside .initial:n = {rone = ~, rtwo = ~,  rthree = ~},
    leftside .default:n = {lone = , ltwo = ~, lthree = ~ },
    rightside .default:n = {rone = ~, rtwo = ~,  rthree = ~},
}
\NewDocumentCommand \guideftr { +o }
{
  \IfValueT { #1 } 
  {
    \keys_set:nn { footer } { #1 }
  }
  \guide_ftr:
}
\cs_new_protected:Nn \guide_ftr:
{
  % Now fancy header/footer settings
  \lhead{}%
  \chead{}%
  \rhead{}%
  \renewcommand{\headrulewidth}{0pt}%
  \lfoot{}%
  \cfoot{{Page} ~ \thepage {} ~ { of } ~ {} \pageref{LastPage}}%
  \rfoot{}%

  \fancypagestyle{firststyle}%
  {%
    \lhead{}%
    \chead{}%
    \rhead{}%
    \lfoot{}%
    \cfoot{}%
    \rfoot{}%
    \renewcommand{\headrulewidth}{0pt}%
    \fancyfoot[L]{\l_footer_leftside_lone_tl {}\\%
      \l_footer_leftside_ltwo_tl {}\\%
      \l_footer_leftside_lthree_tl {}}%
    \fancyfoot[R]{\l_footer_rightside_rone_tl {}\\%
      \l_footer_rightside_rtwo_tl {}\\%
      \l_footer_rightside_rthree_tl {}}%
      \renewcommand{\footrulewidth}{.2pt}%
  }%
  \thispagestyle{firststyle}
}
\ExplSyntaxOff

\pagestyle{fancy}

\urlstyle{tt}
\footersetup{
  leftside={
    lone={1425 Jayhawk Blvd., 470 Watson Library}, 
    ltwo={Lawrence, KS 66045-7594}, 
    lthree={\url{https://crmda.ku.edu}}},
  rightside={
    rone={\includegraphics[align=c, width=1.4cm, trim=0 0 0 0]{images/CClicense.png} This work is licensed under},
    rtwo={a Creative Commons Attribution},
    rthree={4.0 International License}}
}
\guideftr


%graphics and such inside floats are centered by default
\renewenvironment{figure}[1][]{%
 \ifthenelse{\equal{#1}{}}{%
   \@float{figure}
 }{%
   \@float{figure}[#1]%
 }%
 \centering
}{%
 \end@float
}
\renewenvironment{table}[1][]{%
 \ifthenelse{\equal{#1}{}}{%
   \@float{table}
 }{%
   \@float{table}[#1]%
 }%

 \centering
%  \setlength{\@tempdima}{\abovecaptionskip}%
%  \setlength{\abovecaptionskip}{\belowcaptionskip}%
% \setlength{\belowcaptionskip}{\@tempdima}%
}{%
 \end@float
}
% Added by lyx2lyx
\date{}


\thispagestyle{firststyle}
\end_preamble
\use_default_options false
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "unicode=true,pdfusetitle,bookmarks=true,bookmarksnumbered=false, bookmarksopen=false,breaklinks=true, pdfborder={0 0 0},pdfborderstyle={}, backref=false,colorlinks=true, linkcolor=darkblue, urlcolor=darkblue, citecolor=darkblue"
\papersize letterpaper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1.25in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset VSpace -0.7in
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
guidesetup{%
\end_layout

\begin_layout Plain Layout

  author={
\end_layout

\begin_layout Plain Layout

    lastname=Johnson, 
\end_layout

\begin_layout Plain Layout

    firstname=Paul~E., 
\end_layout

\begin_layout Plain Layout

    affiliation=CRMDA,
\end_layout

\begin_layout Plain Layout

    email=pauljohn.edu},
\end_layout

\begin_layout Plain Layout

  author={
\end_layout

\begin_layout Plain Layout

    lastname=Kite, 
\end_layout

\begin_layout Plain Layout

    firstname=Benjamin, 
\end_layout

\begin_layout Plain Layout

    affiliation=CRMDA, 
\end_layout

\begin_layout Plain Layout

    email=bakite@ku.edu},
\end_layout

\begin_layout Plain Layout

  author={
\end_layout

\begin_layout Plain Layout

    lastname=Whitley,
\end_layout

\begin_layout Plain Layout

    firstname=Kenna,
\end_layout

\begin_layout Plain Layout

    affiliation=CRMDA,
\end_layout

\begin_layout Plain Layout

    email=kennamarie@ku.edu},
\end_layout

\begin_layout Plain Layout

  url={crmda.ku.edu/guides},
\end_layout

\begin_layout Plain Layout

  keywords={Git},
\end_layout

\begin_layout Plain Layout

  title={Git it Together!},
\end_layout

\begin_layout Plain Layout

  subtitle={Version Management for Research Projects},
\end_layout

\begin_layout Plain Layout

  leftlogo={images/jayhawk.pdf},
\end_layout

\begin_layout Plain Layout

  rightlogo={images/logo-vert.pdf},
\end_layout

\begin_layout Plain Layout

  number=31,
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
guidehdr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
use_makebox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\align center

\series bold
Cheat Sheet
\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
use_makebox 0
width "95text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Basic Usage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git clone
\end_layout

\end_inset

 - Copies a version-tracking repository, including all of its history.
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git init
\end_layout

\end_inset

 - Initiates a new version-tracking repository in current working directory.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull/push
\end_layout

\end_inset

 - Keep up to date with remote repository (retrieve/send).
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git add
\end_layout

\end_inset

 - Tell Git to begin monitoring a file.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit
\end_layout

\end_inset

 - Tell Git to take a 
\begin_inset Quotes eld
\end_inset

snapshot
\begin_inset Quotes erd
\end_inset

 of altered files.
 
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git status
\end_layout

\end_inset

 - Ask for report on files in project.
 Suggest 
\begin_inset Quotes eld
\end_inset

git status .
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git log
\end_layout

\end_inset

 - Ask for history report on project.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 1
use_makebox 0
width "95text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Intermediate Usage
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch
\end_layout

\end_inset

 - Lists branches
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch branchname
\end_layout

\end_inset

 - Creates a branch named 
\begin_inset Quotes eld
\end_inset

branchname
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout branchname
\end_layout

\end_inset

 - Opens the branch 
\begin_inset Quotes eld
\end_inset

branchname
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset

 - Downloads changes and stores them in the .git folder.
 Does not alter files in working directories
\end_layout

\begin_layout Plain Layout
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git merge branchname
\end_layout

\end_inset

 - Retrieve 
\begin_inset Quotes eld
\end_inset

branchname
\begin_inset Quotes erd
\end_inset

 and apply its changes to the currently checked out branch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
Git is 
\begin_inset Quotes eld
\end_inset

version tracking
\begin_inset Quotes erd
\end_inset

 software.
 It can be used to: 
\end_layout

\begin_layout Itemize
monitor changes in files over time
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

step back in time
\begin_inset Quotes erd
\end_inset

 to get old versions
\end_layout

\begin_layout Itemize
allow teams to coordinate contributions of many workers
\end_layout

\begin_layout Standard
Git is currently the most widely used version management system.
 Git is a free, cross-platform, and open source version control system that
 was invented by Linus Torvalds, the creator of the Linux kernel.
 Git has many powerful features that are designed for the harmonization
 of entries by 10s or 100s of workers.
 
\end_layout

\begin_layout Section
Advantages of Version Management
\end_layout

\begin_layout Standard
While we have written 1000's of words about it, the cartoon in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Why-Git-is"

\end_inset

 conveys the message entirely.
 
\end_layout

\begin_layout Standard
Git keeps track of all of your changes and allows you to grab any past version
 of a file.
 Further, Git allows teamwork – several people can edit the same set of
 files at once and the system tries to reconcile the changes.
 The system tracks who makes changes, it asks them to explain the changes
 they make, and it allows rollbacks.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Why Git is Necessary
\begin_inset CommandInset label
LatexCommand label
name "fig:Why-Git-is"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/phd101212s.gif
	height 6in

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We DO NOT want to fill up folders with versions of a single file.
 We want one file that benefits from version management.
 Any previous version can be retrieved.
 
\end_layout

\begin_layout Subsection*
Glossary: Absolutely vital terms everybody has to tolerate
\end_layout

\begin_layout Standard
There are quite a few 
\begin_inset Quotes eld
\end_inset

cheat sheets
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Git guides
\begin_inset Quotes erd
\end_inset

 (this document!).
 Please see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Git_Illustrated"

\end_inset

.
 Here are the essential terms:
\end_layout

\begin_layout Description
working
\begin_inset space ~
\end_inset

directory The directory inside the user's computer where files are edited.
\end_layout

\begin_layout Description
local
\begin_inset space ~
\end_inset

repository A hidden directory called 
\begin_inset Quotes eld
\end_inset

.git
\begin_inset Quotes erd
\end_inset

 where changes are tracked.
 It is 
\emph on
INSIDE
\emph default
 the working directory.
 It is a database, not a human-readable set of files.
\end_layout

\begin_layout Description
remote
\begin_inset space ~
\end_inset

repository A server from which revisions can be retrieved.
 For testing, we can create a 
\begin_inset Quotes eld
\end_inset

remote
\begin_inset Quotes erd
\end_inset

 on our own personal computers, but for real-life effort, we always have
 a remote server.
 Currently, we have a GitLab server.
\end_layout

\begin_layout Description
origin The nickname of primary Git remote repository.
 Many remotes may exist.
\end_layout

\begin_layout Description
branch A collection of files with a directory structure and historical records.
\end_layout

\begin_layout Description
master The default branch that all Git projects have.
\end_layout

\begin_layout Description
commit To enter the current version of a file in the history log (i.e., tell
 Git to take notice of your changes!).
\end_layout

\begin_layout Description
head The current position of the file set within the repository's history.
\end_layout

\begin_layout Description
tracked
\begin_inset space ~
\end_inset

files Files which have been added into a repository.
\end_layout

\begin_layout Description
\noindent
\align block
staging
\begin_inset space ~
\end_inset

area Tracked files that have been revised that are not yet committed.
 The staging area is essentially the same as the working directory in the
 ordinary use of that term.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Installing-Software"

\end_inset

Installing Git Software
\end_layout

\begin_layout Description
Windows Get the 
\emph on
real Git
\emph default
 from 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://git-scm.com/downloads
\end_layout

\end_inset

.
 It is delivered with 
\begin_inset Quotes eld
\end_inset

Git BASH
\begin_inset Quotes erd
\end_inset

, a Unix-style 
\begin_inset Quotes eld
\end_inset

terminal emulator
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
Macintosh Install either the Xcode tool set (the easiest approach), the
 individual components of a command line Git environment from 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://git-scm.com/downloads
\end_layout

\end_inset

, or Homebrew, a free-software delivery system for Macs.
\end_layout

\begin_layout Subsubsection*
Don't install other convenient Graphical User Interfaces (GUIs)
\end_layout

\begin_layout Standard
We emphasize using Git in the command line.
 There are graphical interfaces for using Git, but we avoid using them.
 We discourage our research assistants from becoming dependent on them.
 These things work correctly about 85 percent of the time.
 For the other 15 percent, the command line is truly necessary.
 To keep command line skills sharp, use it as often as possible.
\end_layout

\begin_layout Subsubsection*
Do use a programmer's file editor that can interact with Git
\end_layout

\begin_layout Standard
Use a programmer's file editor, such as Emacs, that can interact with files
 in a Git repository.
 Many IDEs will have have similar features.
 The main purpose here is that authors can ask Git to take snapshots as
 they work, without distracting themselves too much from the substance of
 their project.
\end_layout

\begin_layout Standard
Many editors will work best if the operating system supplies other helper
 functions that make it possible to compare files and isolate the sections
 that have been changed.
 Emacs will work best if the GNU program 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset

 is also installed (it compares text files).
 The executable 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset

 is generally installed in all Linux systems and is easily available on
 Macintosh.
 It is also available separately for Windows as a part of the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
diffutils
\end_layout

\end_inset

 package (see 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://crmda.ku.edu/setup
\end_layout

\end_inset

).
\end_layout

\begin_layout Section
Helpful Webpages
\end_layout

\begin_layout Itemize
The official Git guides: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://git-scm.com/doc
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Git Manual Page 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.kernel.org/pub/software/scm/git/docs/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Git Reference: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://gitref.org
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Git - the simple guide: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://rogerdudler.github.io/git-guide
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Become a git guru: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.atlassian.com/git/tutorials
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Git Cheat Sheets
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Git-tower website: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.git-tower.com/blog/git-cheat-sheet
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
GitHub Training: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Undo (Almost) Anything: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
KU CRMDA GitLab Guide: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.dept.ku.edu/guides/34.GitLab/34.gitlab.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Part
Basic Knowledge and Operations
\end_layout

\begin_layout Section
Three Scenarios for Git Use
\end_layout

\begin_layout Standard
We are trying to write down just enough so that Git beginners can participate
 effectively.
 There are three especially common scenarios.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Track a Remote Repository
\begin_inset Quotes erd
\end_inset

.
 This is not for a project contributor.
 It is for somebody who wants to monitor a project without contributing.
 The git 
\series bold
clone
\series default
 will be a snapshot of the project's entire history.
 The git 
\series bold
pull
\series default
 functional will download updates.
 This can be used to track course notes or software development on, for
 example, GitHub, GitLab, or BitBucket.
 Generally, authors of those projects will not allow contributions.
 Sharing revisions back to the author requires a somewhat tedious process
 known as 
\begin_inset Quotes eld
\end_inset

forking
\begin_inset Quotes erd
\end_inset

, which we do not discuss in these notes.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Track Your Own Project
\begin_inset Quotes erd
\end_inset

.
 This does not use a remote server.
 It is simply for personal record keeping.
 Authors add files and make notes on their revisions as they go.
 We expect all graduate research assistants who work our center will track
 their efforts on all projects, whether or not they are working alone and
 whether or not they are using a remote server.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Server Integration
\begin_inset Quotes erd
\end_inset

.
 Interacting with a remote server, usually in coordination with team mates.
 The efforts of many workers can be harmonized.
 Revisions are 
\series bold
pushed
\series default
 to the remote.
 Updates are 
\series bold
pulled
\series default
.
 Because the efforts of team members may conflict with each other, it is
 often necessary to handle 
\begin_inset Quotes eld
\end_inset

merge conflicts
\begin_inset Quotes erd
\end_inset

 and develop team rules about who is editing what.
 
\end_layout

\begin_layout Standard
We believe most readers of this document will probably never need to create
 their own remote 
\begin_inset Quotes eld
\end_inset

bare
\begin_inset Quotes erd
\end_inset

 repositories.
 The rise of convenient server-based Web tools, like GitHub and GitLab,
 has made it unnecessary.
 
\end_layout

\begin_layout Subsection
Use the Terminal to Interact with Git
\end_layout

\begin_layout Standard
How to start a Terminal? When installing Git for Windows, a terminal they
 call 
\begin_inset Quotes eld
\end_inset

Git BASH
\begin_inset Quotes erd
\end_inset

 is installed.
 It can be launched by navitating in the Windows Explorer to a desired directory
 and right clicking.
 Macintosh has a Terminal program in the Utilities folder, but there are
 plenty of other terminal programs.
 On Linux, of course, there is a seemingly endless supply of terminal emulators.
 It is not truly necessary to use BASH as the shell program, but it is fairly
 common at the current time.
\end_layout

\begin_layout Subsubsection*
Suggestion: Create a GIT directory
\end_layout

\begin_layout Standard
This is for personal organization.
 Create a folder where all Git repositories can be saved.
 This avoids the 
\begin_inset Quotes eld
\end_inset

where did I download that repository?
\begin_inset Quotes erd
\end_inset

 problem.
 
\end_layout

\begin_layout Subsection
Scenario 1: Track a remote repository
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scenario-1"

\end_inset


\end_layout

\begin_layout Standard
Professors or program authors make Git repositories available, but they
 don't expect us to revise them and contribute back to the project.
 We'll show how to download and stay up to date.
\end_layout

\begin_layout Standard
We will track one repository on GitHub.
 The Web interface for this is 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/pauljohn32/RHS
\end_layout

\end_inset

.
 It is a collection of exercises and course notes.
 
\end_layout

\begin_layout Standard

\series bold
\shape smallcaps
\size large
Make
\series default
\shape default
\size default
 sure you are in a terminal and the current working directory is 
\begin_inset Quotes eld
\end_inset

GIT
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The RHS repository can be cloned by running this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git clone https://github.com/pauljohn32/RHS.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's the response:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

Cloning into 'RHS'...
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 871, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (36/36), done.
\end_layout

\begin_layout Plain Layout

remote: Total 871 (delta 21), reused 37 (delta 11), pack-reused 824
\end_layout

\begin_layout Plain Layout

Receiving objects: 100% (871/871), 10.14 MiB | 7.81 MiB/s, done.
\end_layout

\begin_layout Plain Layout

Resolving deltas: 100% (353/353), done.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Caution: https versus ssh-based clones
\end_layout

\begin_layout Standard
GitHub allows either https or secure shell based downloads.
 That is apparent in their graphical interface, by the bright green buton:
 
\begin_inset Graphics
	filename images/GitHub-01-download.png

\end_inset

.
 We chose 
\begin_inset Quotes eld
\end_inset

Use HTTPS
\begin_inset Quotes erd
\end_inset

 and we found the required address in the panel:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/GitHub-01-CloneHTTPS.png

\end_inset


\end_layout

\begin_layout Standard
You could use SSH security instead.
 If you have a GitHub account, and your SSH key is registered with them,
 one could click 
\begin_inset Quotes eld
\end_inset

Use SSH
\begin_inset Quotes erd
\end_inset

 and the appropriate clone address would change to.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git clone git@github.com:pauljohn32/RHS.git
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
After the clone, inspect.
\end_layout

\begin_layout Standard
The top level directory 
\begin_inset Quotes eld
\end_inset

RHS
\begin_inset Quotes erd
\end_inset

 should exist, and it will have a 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 folder named 
\begin_inset Quotes eld
\end_inset

.git
\begin_inset Quotes erd
\end_inset

 along with the author's contents.
 In the terminal, change into the RHS directory and list the files with
 the 
\begin_inset Quotes eld
\end_inset

-lah
\begin_inset Quotes erd
\end_inset

 flags (
\begin_inset Quotes eld
\end_inset

l
\begin_inset Quotes erd
\end_inset

=include details, 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

=include dot files, and 
\begin_inset Quotes eld
\end_inset

h
\begin_inset Quotes erd
\end_inset

=human readable file size):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cd RHS
\end_layout

\begin_layout Plain Layout

$ ls -lah
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Routput"
inline false
status open

\begin_layout Plain Layout

total 32K
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  6 pauljohn32 pauljohn32 4.0K Feb 17 12:18 .
\end_layout

\begin_layout Plain Layout

drwxr-xr-x  3 pauljohn32 pauljohn32 4.0K Feb 17 12:18 ..
\end_layout

\begin_layout Plain Layout

drwxrwxr-x 43 pauljohn32 pauljohn32 4.0K Feb 17 12:18 exercises
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  8 pauljohn32 pauljohn32 4.0K Feb 17 12:18 .git
\end_layout

\begin_layout Plain Layout

-rw-rw-r--  1 pauljohn32 pauljohn32  242 Feb 17 12:18 .gitignore
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  6 pauljohn32 pauljohn32 4.0K Feb 17 12:18 guides
\end_layout

\begin_layout Plain Layout

drwxrwxr-x  4 pauljohn32 pauljohn32 4.0K Feb 17 12:18 notes
\end_layout

\begin_layout Plain Layout

-rw-rw-r--  1 pauljohn32 pauljohn32  810 Feb 17 12:18 README.md	
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the directory 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

, along with the other materials provided by the project.
\end_layout

\begin_layout Subsubsection*
Check the project history
\end_layout

\begin_layout Standard
To review the project history, run:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will show the project entries, one by one, in page-sized sections.
 The letter 
\begin_inset Quotes eld
\end_inset

q
\begin_inset Quotes erd
\end_inset

 can break out of a long listing display.
\end_layout

\begin_layout Paragraph*
Staying up to date
\end_layout

\begin_layout Standard
To stay up to date with the author's effort, open the RHS folder and run:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will succeed, almost always.
 
\end_layout

\begin_layout Subsubsection*
Caution: Don't edit the author's files
\end_layout

\begin_layout Standard
If you edit that author's files, then git will refuse to pull the updated
 versions.
 Git does not want to throw away your edits by putting the author's version
 on top.
 To fix that, one can restore the author's file to their original condition,
 as explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Recover-files"

\end_inset

.
 
\end_layout

\begin_layout Paragraph*
Caution: Don't edit or damage contents in the hidden folder 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The hidden directory named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

 includes all of the project's history.
 All commands, such as 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git add
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git log
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git status
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, and so forth, interact with material in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

 directory.
 Don't damage that folder.
\end_layout

\begin_layout Subsection
Scenario 2: Create a local 
\begin_inset Quotes eld
\end_inset

change tracking
\begin_inset Quotes erd
\end_inset

 repository
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scenario-2"

\end_inset


\end_layout

\begin_layout Standard
This local repo will be used to track some files.
 It does not link to a remote server.
 Use this to practice your Git skills.
 It keeps all of your records in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git 
\end_layout

\end_inset

directory, which will be in the top level folder.
\end_layout

\begin_layout Standard
We suggest you proceed as follows: 
\end_layout

\begin_layout Enumerate
Begin by opening a terminal.
 Navigate to the folder where you keep all of your GIT projects.
 Make a directory there.
 For example:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cd GIT
\end_layout

\begin_layout Plain Layout

$ mkdir smith_jones
\end_layout

\begin_layout Plain Layout

$ cd smith_jones
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Create a repository:
\end_layout

\begin_deeper
\begin_layout Standard
Run the following:
\begin_inset Foot
status open

\begin_layout Plain Layout
If you have teammates who might edit this repository in a networked file
 system, add the command line argument 
\begin_inset Quotes eld
\end_inset

–
\begin_inset space ~
\end_inset

-shared=group
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset

.
 
\begin_inset CommandInset label
LatexCommand label
name "git init"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git init
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Git should say
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Initialized empty Git repository in <location and name of your directory>
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Add Files 
\begin_inset CommandInset label
LatexCommand label
name "git add"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
We created a file named 
\begin_inset Quotes eld
\end_inset

basic.txt
\begin_inset Quotes erd
\end_inset

, and here we add this file to be tracked by git:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git add basic.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
Please note, adding the file does nothing
\end_layout

\end_inset

 except make Git aware that you plan to track that file.
 It is 
\begin_inset Quotes eld
\end_inset

staged
\begin_inset Quotes erd
\end_inset

 but not 
\begin_inset Quotes eld
\end_inset

committed
\begin_inset Quotes erd
\end_inset

 (the next step).
\end_layout

\begin_layout Standard
Any files that you have not added to the repository will NOT be included
 in the repository's history.
 They appear as 
\begin_inset Quotes eld
\end_inset

untracked files.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Commit that file
\begin_inset CommandInset label
LatexCommand label
name "git commit"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Lets keep this simple.
 Commit the file and insert the 
\begin_inset Quotes eld
\end_inset

commit message
\begin_inset Quotes erd
\end_inset

 with it in the command line
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit basic.txt -m 'basic.txt: initial file version'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If several files were edited, they can all be committed in one step by running
 the following
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit -a
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This triggers an editor to open and Git wants a message to describe the
 changes.
 See Caution 2 below about that process.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Caution 1: Only add files you truly need to track.
\end_layout

\begin_layout Standard
Add files one-by-one until you have some practice.
 Don't add whole directories, don't add password files, don't add backup
 files or trash files.
 
\end_layout

\begin_layout Standard
Please do not commit confidential data to Git.
 If clients send us some data with which to work, we generally DO NOT check
 that into Git because 
\end_layout

\begin_layout Enumerate
we don't want copies of the data traveling along with the Git repository,
\end_layout

\begin_layout Enumerate
we don't edit client data files, there is no need to track changes in them.
 
\end_layout

\begin_layout Standard
Usually, what we want researchers to do is 
\begin_inset Quotes eld
\end_inset

mount
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

symbolically link
\begin_inset Quotes erd
\end_inset

 the data folder into the project directory in order to access the data.
 
\end_layout

\begin_layout Subsubsection*
Caution 2: An editor will open if you do not include the 
\begin_inset Quotes eld
\end_inset

-m
\begin_inset Quotes erd
\end_inset

 argument
\end_layout

\begin_layout Standard
Git's default editor is Vi, but Git may be configured to interact with other
 editors.
 Windows users may prefer Notepad++.
 Two options are:
\end_layout

\begin_layout Standard

\series bold
Cancel the commit
\series default
: When the editor opens, the commit can be canceled by closing the file
 without saving it.
 
\end_layout

\begin_layout Standard

\series bold
Complete the commit
\series default
: edit the commit message, save the file and close the editor.
\end_layout

\begin_layout Standard

\series bold
About Vi
\series default
: If the default message editor in Git is Vi.
 Vi may be unfamiliar, but 
\emph on
don't panic
\emph default
.
 You are not alone.
 
\begin_inset Quotes eld
\end_inset

Editor Hell
\begin_inset Quotes erd
\end_inset

 is a nickname created by one of our young staffers who had never seen Vi
 before.
 Vi is a an editor from the days before computers had mice.
 It is completely keyboard driven.
 If you end up in Vi, here's what to do:
\end_layout

\begin_layout Itemize
Hit the letter 
\begin_inset Quotes eld
\end_inset

i
\begin_inset Quotes erd
\end_inset

 to enter 
\series bold
insert mode
\series default
.
 You will see 
\begin_inset Quotes eld
\end_inset

– INSERT –
\begin_inset Quotes erd
\end_inset

 on the bottom left.
\end_layout

\begin_layout Itemize
Cursor should be in line 1, column one.
 Type your message.
\end_layout

\begin_layout Itemize
Now save your message through this seemingly bizarre sequence of keys
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Hit the 
\series bold
Escape
\series default
 key (breaks out of insert mode)
\end_layout

\begin_layout Itemize
Hit the 
\series bold
colon
\series default
 key (should put the cursor at the bottom of the screen)
\end_layout

\begin_layout Itemize
Type 
\begin_inset Quotes eld
\end_inset


\series bold
wq
\series default

\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
write
\end_layout

\end_inset

 and 
\begin_inset Flex Emph
status collapsed

\begin_layout Plain Layout
quit
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Hit the 
\series bold
Enter
\series default
 key
\end_layout

\end_deeper
\begin_layout Standard
You could customize your computer's Git setup to use a more pleasant editor.
\end_layout

\begin_layout Subsubsection*
Caution 3: Combining 
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

-m
\begin_inset Quotes erd
\end_inset

 is dangerous
\end_layout

\begin_layout Standard
When users run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit -a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, the editor will open and display a list of files.
 If there were accidental edits, or if files were accidentally added to
 Git tracking, it will become apparent at that point.
 Canceling the edit session will cancel the commit.
 
\end_layout

\begin_layout Standard
Inserting a command line message in combination with 
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

 eliminates the editor phase, taking away the author's ability to review
 the files that are being committed.
 In short, we suggest users should not run with scissors and avoid typing
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit -a -m 
\begin_inset Quotes eld
\end_inset

my big mistake
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Scenario 3: This is the CRMDA Project Workflow: Participate in Projects
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scenario-3"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align block
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Description
\noindent
\align block
\begin_inset Graphics
	filename images/git-flowchart.png
	lyxscale 50
	height 9cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Git Illustrated
\begin_inset CommandInset label
LatexCommand label
name "fig:Git_Illustrated"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our workflow is similar to the 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "GitLab Flow"
target "https://docs.gitlab.com/ee/workflow/gitlab_flow.html"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 or the 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Stable Mainline"
target "http://www.bitsnbites.eu/a-stable-mainline-branching-model-for-git"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 branching model.
 The premise is that the master branch is the perfected, most up-to-date
 working version, and most (almost all) branches are short lived enhancements
 (
\begin_inset Quotes eld
\end_inset

feature branches
\begin_inset Quotes erd
\end_inset

) that will be finished, merged onto master, and deleted.
 Long-lived branches exist only in the rare (for us) case that a previous
 release version of a project must be corrected the revision does not fit
 within the long term master plan.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stable-Mainline"

\end_inset

, we have a copy of the drawing from the Stable Mainline webpage and this
 summarized the way we think about it rather well.
 In CRMDA, we'd almost never have retroactive repair branches like 
\begin_inset Quotes eld
\end_inset

release/v1.0
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Stable Mainline branching model (source: 
\begin_inset CommandInset href
LatexCommand href
name "Stable mainline"
target "http://www.bitsnbites.eu/a-stable-mainline-branching-model-for-git"
literal "false"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:Stable-Mainline"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/stable-mainline.png
	height 4in

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A project manager creates the Git repository on the server.
 Team members do not concern themselves with creating 
\begin_inset Quotes eld
\end_inset

bare repositories
\begin_inset Quotes erd
\end_inset

 or any of the security issues of regulating team participation.
 That's the manager's job.
 The manager will provide the address.
 In our case, we always use SSH keys for security.
\end_layout

\begin_layout Standard
The main issue is that it is difficult to manage teamwork.
 When several users are editing an inter-connected set of files, it is easy
 for the users to fall out of step with one another.
 There are some technical fixes for these problems, but the most important
 fixes are sociological and organizational.
 
\end_layout

\begin_layout Subsubsection*
GitLab at CRMDA
\end_layout

\begin_layout Standard
We use a GitLab server that is located at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://gitlab.crmda.ku.edu
\end_layout

\end_inset

.
 People who have KU online IDs can register for accounts there.
 The process is described in our 
\begin_inset CommandInset href
LatexCommand href
name "guide on using GitLab"
target "http://crmda.dept.ku.edu/guides/34.GitLab/34.gitlab.pdf"
literal "false"

\end_inset

 (CRMDA Guide #34).
 We require project participants to use SSH security.
 Contributors must register SSH keys with this server.
\end_layout

\begin_layout Standard
Our server will allow non-contributors to use HTTPS to pull a copy of a
 repository, but people who want to push changes back to the server must
 use SSH security.
 For example, one can retrieve a copy of our working examples for High Performan
ce Computing like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone git@gitlab.crmda.ku.edu:crmda/hpcexample.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In case you see these Warnings, they are harmless.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Warning: untrusted X11 forwarding setup failed: xauth key data not generated
\end_layout

\begin_layout Plain Layout

Warning: No xauth data; using fake authentication data for X11 forwarding.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Step 1.
 Clone the repository
\end_layout

\begin_layout Standard
Consider, for example, we clone a copy of a Web Scraping project:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

$ git clone git@gitlab.crmda.ku.edu:crmdaprojects/Ticket-790-Ukraine_web_scrape.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Cloning into 'Ticket-790-Ukraine_web_scrape'...
\end_layout

\begin_layout Plain Layout

X11 forwarding request failed on channel 0
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 270, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (77/77), done.
\end_layout

\begin_layout Plain Layout

remote: Total 270 (delta 220), reused 202 (delta 191)
\end_layout

\begin_layout Plain Layout

Receiving objects: 100% (270/270), 207.53 KiB | 7.69 MiB/s, done.
\end_layout

\begin_layout Plain Layout

Resolving deltas: 100% (220/220), done.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That will create the directory named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
Ticket-790-Ukraine_web_scrape
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 in the current working directory.
 
\end_layout

\begin_layout Standard
In case you already have a directory and you simply want to copy the project
 files into it, add a period at the end of the command.
 The period at the end represents the current working directory.
 This command is one line (even if it wraps in this document).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

$ git clone git@gitlab.crmda.ku.edu:crmdaprojects/Ticket-790-Ukraine_web_scrape.git
 .
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Step 2.
 Inspect your cloned repository
\end_layout

\begin_layout Standard
Run 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git log
\end_layout

\end_inset

, and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git status
\end_layout

\end_inset

, and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch
\end_layout

\end_inset

, as discussed below.
\end_layout

\begin_layout Subsubsection*
Step 3.
 Create your own branch
\end_layout

\begin_layout Standard
A branch can be created, and 
\begin_inset Quotes eld
\end_inset

checked out
\begin_inset Quotes erd
\end_inset

 in one shortcut step.
 This will create a branch named 
\begin_inset Quotes eld
\end_inset

pj-fix
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout -b pj-fix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See more about creating, naming, monitoring, and deleting branches in the
 following section.
 
\end_layout

\begin_layout Standard
In our projects, we want branches to have short names that use the initials
 of the author in the beginning.
 This makes it easier for us to understand what is what.
\end_layout

\begin_layout Subsubsection*
Step 4.
 Edit, add files, and commit the changes
\end_layout

\begin_layout Standard
Some teamwork will help avoid future problems.
 If two team members have branches that edit the same file, it is likely
 to be complicated to integrate their work later on.
 As a result, 
\emph on
unless it is necessary
\emph default
 to do otherwise, we suggest that only one team member should have responsibilit
y for editing each file.
 
\end_layout

\begin_layout Subsubsection*
Step 5.
 Make sure your branch is up to date with the master branch
\end_layout

\begin_layout Standard
We want workers to run the Standard Four Step Update Sequence early (Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Standard-Four-Step"

\end_inset

) and often.
 
\end_layout

\begin_layout Standard
Here's why.
 Work on your branch may be irrelevant or out of date.
 
\end_layout

\begin_layout Standard
See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Branch"

\end_inset

a.
 The branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 split from master, but master evolved.
 The other team members are busy making revisions and putting them on the
 master branch.
 The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 branch has grown and made changes as well.
 
\end_layout

\begin_layout Standard
When the work on 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 is done, the author intends for it to merge with the master branch.
 The eventual merge will fail, however.
 The branch fixes don't apply to master in its current state.
 Notice that in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Branch"

\end_inset

b, the merge up from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 to the master branch is trying to blend a branch from which master has
 wandered away.
 It is not likely that master–as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 remembers it–is compatible anymore.
\end_layout

\begin_layout Standard
The author of the branch has the duty to make sure that the branch is still
 beneficial for the larger project.
 The author should run the 
\begin_inset Quotes eld
\end_inset

Standard Four Step Branch Update Sequence
\begin_inset Quotes erd
\end_inset

 (Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Standard-Four-Step"

\end_inset

) to bring the branch up to date with the master branch.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Standard Four Step Branch Update Sequence
\begin_inset CommandInset label
LatexCommand label
name "tab:Standard-Four-Step"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

$ git checkout pj-fix
\end_layout

\begin_layout Plain Layout

$ git merge master
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Immediately after that merge, the author can fully understand the impact
 of the changes that the branch will have for the project.
 If there are merge conflicts, they must be attended to (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Fix-conflict"

\end_inset

).
 
\end_layout

\begin_layout Standard
The diagram in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-Branch"

\end_inset

c represents this new logic.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Team Member's Branch
\begin_inset CommandInset label
LatexCommand label
name "fig:A-Branch"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pj-git-merge-1.pdf
	width 4in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A branch named pj-fix
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Merge error likely
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pj-git-merge-2.pdf
	width 4in

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/pj-git-merge-3.pdf
	width 4in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Four step updated branch succeeds
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Step 6 Push changes back to main repository 
\begin_inset CommandInset label
LatexCommand label
name "git push"

\end_inset


\end_layout

\begin_layout Standard
When the author makes the first push to the server, it is necessary to tell
 the server (AKA 
\begin_inset Quotes eld
\end_inset

origin
\begin_inset Quotes erd
\end_inset

) that the current branch should be pushed to the remote server as a branch
 of the same name.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git push -u origin pj-fix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The flag 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-u
\end_layout

\end_inset

 is short for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-
\begin_inset space ~
\end_inset

-set-upstream
\end_layout

\end_inset

.
 In pushes after that, git will remember where the branch is intended to
 go, and it is sufficient to run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git push
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Caution: there are now local and remote versions of the branch
\end_layout

\begin_layout Standard
This is the point at which the branch flags 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-avv
\end_layout

\end_inset

 (
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

=show all, 
\begin_inset Quotes eld
\end_inset

-vv
\begin_inset Quotes erd
\end_inset

=very verbose) become especially helpful in understanding the separate branches.
 Once the branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 is pushed to the server 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin
\end_layout

\end_inset

, the user's branch list (output from 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch -avv
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

) will show 2 branches, one named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 and one named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/pj-fix
\end_layout

\end_inset

.
 If the author has 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 checked out and keeps editing, then the local 
\begin_inset Quotes eld
\end_inset

tracking branch
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 is now out of date with 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/pj-fix
\end_layout

\end_inset

.
 The next time the author runs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git push
\end_layout

\end_inset

, the two will be re-synchronized.
 
\end_layout

\begin_layout Subsubsection*
Step 7 Make a merge request
\end_layout

\begin_layout Standard
In GitLab, there is a graphical interface that can be used to notify the
 project manager that a branch is ready to be merged onto the master branch.
\end_layout

\begin_layout Subsubsection*
Pressure the manager to pay attention and do the merge
\end_layout

\begin_layout Standard
In our experience, there is one main concern.
 The author of the branch pushes it to the server and requests a merge.
 The project manager is not aware of the request (email gets lost, etc),
 and the branch is not merged and destroyed promptly.
 The master wanders away from the branch again and then the branch has to
 be re-updated.
 Team members who fear this should speak with the repository manager to
 make sure she/he is aware of the need to merge the branch promptly.
\end_layout

\begin_layout Subsubsection*
Be Prepared: your branch will disappear from the server
\end_layout

\begin_layout Standard
The project manager wants to keep the project clean by deleting branches
 wherever possible.
 Generally, the 
\begin_inset Quotes eld
\end_inset

remove merged branches
\begin_inset Quotes erd
\end_inset

 policy is in effect.
 
\end_layout

\begin_layout Standard
When the user runs 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
branch -avv
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, the branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/pj-fix
\end_layout

\end_inset

 will still seem to exist, even though the manager has in fact deleted it.
 Adding the 
\begin_inset Quotes eld
\end_inset

prune
\begin_inset Quotes erd
\end_inset

 option to a fetch command will delete 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/pj-fix
\end_layout

\end_inset

 from the list:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch -p
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fetch command is discussed in more detail below.
\end_layout

\begin_layout Section
Essential Git Tools
\end_layout

\begin_layout Standard
In this section, we will learn about common chores.
 Review your situation with 
\begin_inset Quotes eld
\end_inset

git log
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

git status
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

git diff
\begin_inset Quotes erd
\end_inset

.
 We have not discussed Git branches in detail yet, and though some of the
 output here does mention branches, we think users are going to benefit
 from these commands even if they don't yet fully understand them.
\end_layout

\begin_layout Subsection
git log (print project history)
\end_layout

\begin_layout Standard
Display the commit messages, one by one: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "git log"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

commit d64553e21c06dff97502a12a5cdfdb3a828385ef
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Fri Feb 13 15:11:05 2015 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    updates for version 1.8.92, EIS eliminate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 670ab2b24dc686a325d3b1c352f5b710e875cb31
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Fri Jan 23 10:54:29 2015 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Rework summary and print methds, insert code example to use
\end_layout

\begin_layout Plain Layout

    tables/tabular.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

commit 8fe813e5e040efd89870248da3812eac6f406657
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Mon Jan 19 19:19:03 2015 -0600
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    Updating pctable
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Those long commit numbers are unique identifiers known as SHA1 values.
 We can retrieve, for example, the full version corresponding to entry 
\begin_inset Quotes eld
\end_inset

8fe813e5e040efd89870248da3812eac6f406657
\begin_inset Quotes erd
\end_inset

.
 We don't need to specify the whole number, the first four to six letters
 will suffice: 
\begin_inset Quotes eld
\end_inset

8fe813
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Arguments to alter behavior of git log.
\end_layout

\begin_layout Standard
For more concise output, run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --oneline
\end_layout

\begin_layout Plain Layout

d64553e updates for version 1.8.92, EIS eliminate
\end_layout

\begin_layout Plain Layout

670ab2b Rework summary and print methds, insert code example to use tables/tabul
ar.
\end_layout

\begin_layout Plain Layout

8fe813e Updating pctable
\end_layout

\end_inset


\end_layout

\begin_layout Standard
By default, the Git log includes commits in the history leading up to the
 current file set (a branch).
\end_layout

\begin_layout Standard
To view all commits in the repo regardless of branch, run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --all
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to view both commits, their associated tags, and which commit HEAD,
 the remote branch(es), and the local branch(es) point to, run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --decorate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All these, or a number of the above, can be combined to produce very concise
 and efficient log outputs:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --all --decorate --oneline
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git status (check if files are committed or tracked)
\end_layout

\begin_layout Standard
Sometimes a programmer wonders, 
\begin_inset Quotes eld
\end_inset

are these files being tracked?
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Do these files need to be committed?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
If none of the tracked files were edited, this is the result from running
 
\begin_inset CommandInset label
LatexCommand label
name "git status"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

nothing to commit, working directory clean
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output will be more substantial if files have been edited.
 Here we have edited 
\begin_inset Quotes eld
\end_inset

newfile.txt
\begin_inset Quotes erd
\end_inset

, which was added to tracking and committed previously.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

Changes not staged for commit:
\end_layout

\begin_layout Plain Layout

  (use "git add <file>..." to update what will be committed)
\end_layout

\begin_layout Plain Layout

  (use "git checkout -- <file>..." to discard changes in working directory)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        modified:   newfile.txt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

no changes added to commit (use "git add" and/or "git commit -a")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The comment 
\begin_inset Quotes eld
\end_inset

Changes not staged for commit
\begin_inset Quotes erd
\end_inset

 means that tracked files were edited but not committed.
 Git notices the file is different from the version stored in the repository.
 
\end_layout

\begin_layout Standard
Repositories that are linked to remotes have more elaborate output.
 Here is example output from a working directory that holds the CRMDA workshop
 materials:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

Your branch is ahead of 'origin/master' by 2 commits.
\end_layout

\begin_layout Plain Layout

  (use "git push" to publish your local commits)
\end_layout

\begin_layout Plain Layout

Untracked files:
\end_layout

\begin_layout Plain Layout

  (use "git add <file>..." to include in what will be committed)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        data/els/R/.Rhistory
\end_layout

\begin_layout Plain Layout

        data/els/R/analysis-1.R
\end_layout

\begin_layout Plain Layout

        data/els/R/analysis-1.html
\end_layout

\end_inset


\end_layout

\begin_layout Description
Your
\begin_inset space ~
\end_inset

branch
\begin_inset space ~
\end_inset

is
\begin_inset space ~
\end_inset

ahead
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

origin/master means that we have already committed 2 changes, but they were
 not yet pushed to the server.
 We will try to explain the meaning of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset

 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Conceptual-Branches"

\end_inset

 below.
\end_layout

\begin_layout Description
Untracked
\begin_inset space ~
\end_inset

files means Git noticed that we have files that are not being tracked.
 
\end_layout

\begin_layout Standard
Because the remote server is involved, the output from 
\begin_inset Quotes eld
\end_inset

git status
\begin_inset Quotes erd
\end_inset

 will always be a little different.
 Here is what we see in an up-to-date working directory:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\begin_layout Plain Layout

On branch master 
\end_layout

\begin_layout Plain Layout

Your branch is up-to-date with 'origin/master'.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The complexity in the output of the status command follows from the fact
 that a file can be in states as far as Git is concerned.
\end_layout

\begin_layout Enumerate
File is not added to Git tracking.
\end_layout

\begin_layout Enumerate
File is added, but not committed.
\end_layout

\begin_layout Enumerate
File is added, and committed.
 
\end_layout

\begin_layout Enumerate
File was previously added and committed, but it has been edited since then.
\end_layout

\begin_layout Enumerate
The file was edited, committed, but not yet pushed to the remote server.
\end_layout

\begin_layout Subsection
git rebase (Combine commits to simplify history
\begin_inset CommandInset label
LatexCommand label
name "subsec:rebase"

\end_inset

)
\end_layout

\begin_layout Standard
We encourage code-writers to make frequent commits, so that they can compare
 the impact of edits.
 When work is done, there may be 30 commits that can be combined into one
 single 
\begin_inset Quotes eld
\end_inset

patch
\begin_inset Quotes erd
\end_inset

.
 This is especially true when a particular feature is being developed.
 There is no reason that the teammates–or history–should have to wade through
 30 commit messages like 
\begin_inset Quotes eld
\end_inset

trying method 1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

fixing error in method 1
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

method 1 nearly works
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The commits can be squashed into one commit.
 There is a nice writeup called 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Squashing commits with rebase"
target "http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 by Nick Quaranto.
 Our notes about this are similar, 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://crmda.dept.ku.edu/guides/31.git/31.git-squash.md
\end_layout

\end_inset

, but we have just a few additions from the school of hard knocks.
\end_layout

\begin_layout Standard
The basic idea is this.
 Look at the log:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --oneline
\end_layout

\begin_layout Plain Layout

6255521 (HEAD -> my-new-branch) method 1 works
\end_layout

\begin_layout Plain Layout

7549bd2 method 1 nearly works
\end_layout

\begin_layout Plain Layout

611ff1e fixing error in method 1
\end_layout

\begin_layout Plain Layout

46d6518 try method 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This shows we want to squash together the last 4 commits.
 Note we put the number 4 after the tilde:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rebase -i HEAD~4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That will open an editor with a display like the following
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pick 46d6518 try method 1
\end_layout

\begin_layout Plain Layout

pick 611ff1e fixing error in method 1
\end_layout

\begin_layout Plain Layout

pick 7549bd2 method 1 nearly works
\end_layout

\begin_layout Plain Layout

pick 6255521 method 1 works
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Rebase ea9df6f..6255521 onto ea9df6f (4 commands)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We change 
\begin_inset Quotes eld
\end_inset

pick
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

squash
\begin_inset Quotes erd
\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

s
\begin_inset Quotes erd
\end_inset

 for short) in lines 2-4
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pick 46d6518 try method 1
\end_layout

\begin_layout Plain Layout

s 611ff1e fixing error in method 1
\end_layout

\begin_layout Plain Layout

s 7549bd2 method 1 nearly works
\end_layout

\begin_layout Plain Layout

s 6255521 method 1 works
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the rebase editor closes, another git message editor will open.
 It will show all 4 commit messages in one section and we can edit this.
 We suggest a commit message like 
\begin_inset Quotes eld
\end_inset

method 1 worked as anticipated and on the very first try!
\begin_inset Quotes erd
\end_inset

 None of the teammates will ever know the difference.
 After that, history will be compressed.
 First, the 
\begin_inset Quotes eld
\end_inset

git log
\begin_inset Quotes erd
\end_inset

 will show just one element.
 
\end_layout

\begin_layout Standard
Why do we want this? To clean up history before pushing! 
\end_layout

\begin_layout Subsubsection*
Caution: Never do this after you have pushed to the remote.
 
\end_layout

\begin_layout Standard
Do this if you have a lot of small commits that you did not push yet.
 Do not do it after pushing to a server.
 If teammates have downloaded the revisions, then rebasing the history may
 leave them in a state of disorientation.
\end_layout

\begin_layout Subsubsection*
Caution: Do not delete lines from the first rebase editor window
\end_layout

\begin_layout Standard
Do not delete items from the 
\begin_inset Quotes eld
\end_inset

pick/squash
\begin_inset Quotes erd
\end_inset

 list of commit messages.
 If you delete an item, 
\emph on
it will delete that source code change
\emph default
.
 All items must be left either 
\begin_inset Quotes eld
\end_inset

pick
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

squash
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
git branch (Review branches)
\end_layout

\begin_layout Standard
The following indicates that there are two branches, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
master
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch
\end_layout

\begin_layout Plain Layout

  cx-41
\end_layout

\begin_layout Plain Layout

* master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

git branch
\begin_inset Quotes erd
\end_inset

 command will be discussed in greater detail in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Conceptual-Branches"

\end_inset

.
\end_layout

\begin_layout Subsection
git checkout (open files in a branch)
\end_layout

\begin_layout Standard
The effect of the 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 command is a little bit difficult to fathom.
 In essence, it copies the tracked files into the current working directory.
 Suppose we checkout 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout cx-41
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All of the changes that exist in that other branch will magically appear
 in the files of our current working directory.
 Untracked files will remain in the directory.
 If 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 does not have files that are in my current branch, those files will 
\emph on
seem to disappear
\emph default
.
 
\end_layout

\begin_layout Standard
Checking out a branch should not cause anything to be permanently lost.
 If I change back to the other branch, 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the files will reappear.
 
\end_layout

\begin_layout Subsubsection*
Caution: checkout can fail
\end_layout

\begin_layout Standard
A request for a Git checkout will often be refused if files that are being
 tracked have not been committed.
 The following is an example of that kind of error:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout cx-41
\end_layout

\begin_layout Plain Layout

error: Your local changes to the following files would be overwritten by
 checkout:
\end_layout

\begin_layout Plain Layout

        31.git/31.git.lyx
\end_layout

\begin_layout Plain Layout

Please commit your changes or stash them before you switch branches.
\end_layout

\begin_layout Plain Layout

Aborting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In that case, the instructions from Git are helpful.
 Save and commit the edits, or move them out of the way by stashing them
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:git-stash"

\end_inset

).
 If your branches are tracking different files, there may be problems when
 you alter a file that is tracked in one branch but is a locally untracked
 variable in the other.
\end_layout

\begin_layout Subsubsection*
Caution: Untracked files in the working directory
\end_layout

\begin_layout Standard
If there are files that are not added to Git tracking, they will be present
 in all branches.
 This can cause problems when we forget that programs in one branch might
 alter that untracked file.
 There will also be a conflict if the file is added on one branch, but not
 the others.
 The checkout will fail because changing to that branch would alter an untracked
 file.
 This is an easily solved problem (either rename the untracked file or add
 it to all of the branches), but it can be confusing.
\end_layout

\begin_layout Subsection
Create a Branch
\end_layout

\begin_layout Standard
There are two ways to do this.
 First, we demonstrate a two step process that creates the branch and then
 checks it out.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch jj-fix2
\end_layout

\begin_layout Plain Layout

$ git checkout jj-fix2
\end_layout

\begin_layout Plain Layout

Switched to branch 'jj-fix2'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: there is no return value (
\begin_inset Quotes eld
\end_inset

confirmation
\begin_inset Quotes erd
\end_inset

) from the first command.
 
\end_layout

\begin_layout Standard
The two-step method of creating and switching onto a branch can be replaced
 by a single step.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout -b jj-fix2
\end_layout

\begin_layout Plain Layout

Switched to a new branch 'jj-fix2'
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Delete a branch
\end_layout

\begin_layout Subsubsection
Delete a branch
\end_layout

\begin_layout Standard
Deleting a branch does not remove it from the project history.
 However, it removes it from the current view of active branches displayed
 by commands like 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git status -a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 Here we will delete the branch 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
jj-fix2
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 that was created in previous subsection.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -d jj-fix2
\end_layout

\begin_layout Plain Layout

Deleted branch jj-fix2 (was b6af81e).
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Caution: Branch Deletion can fail
\end_layout

\begin_layout Standard
If the branch is checked out, Git will refuse to delete it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout jj-fix2
\end_layout

\begin_layout Plain Layout

Switched to branch 'jj-fix2'
\end_layout

\begin_layout Plain Layout

pauljohn@delllap-16:RHS$ git branch -d jj-fix2
\end_layout

\begin_layout Plain Layout

error: Cannot delete branch 'jj-fix2' checked out at '/tmp/RHS'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fix is to check out another branch, say master.
\end_layout

\begin_layout Standard
Also, if the branch has changes that are not committed, Git will refuse
 to delete the branch.
 One should either commit the changes on the branch and push results to
 the remote (to finalize records on the project effort) or force the deletion
 by running 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch -D jj-fix2
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Delete the same branch from the remote repository
\end_layout

\begin_layout Standard
If your branch exists on the remote server, the easiest way to delete it
 is to run this command
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git push origin --delete jj-fix2
\end_layout

\begin_layout Plain Layout

To gitlab.crmda.ku.edu:crmda/guides.git
\end_layout

\begin_layout Plain Layout

 - [deleted]         jj-fix2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If your remote repo is running under GitHub or GitLab, then it is also possible
 to use their Web graphical interfaces to delete the branch.
 But, honestly, this is easier.
\end_layout

\begin_layout Subsection
Conceptual Framework: Local and remote Branches
\begin_inset CommandInset label
LatexCommand label
name "subsec:Conceptual-Branches"

\end_inset


\end_layout

\begin_layout Standard
List the branches:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch
\end_layout

\begin_layout Plain Layout

  cx-41
\end_layout

\begin_layout Plain Layout

* master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These are the branches that have been checked out at some point on this
 computer.
 
\end_layout

\begin_layout Standard
If there is a remote server involved, additional branches exist, both inside
 the local repository and, of course, on the remote.
 When we add the flag 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
-a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, we see additional branches that were found on the remotes.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -a
\end_layout

\begin_layout Plain Layout

  cx-41
\end_layout

\begin_layout Plain Layout

* master
\end_layout

\begin_layout Plain Layout

  remotes/origin/HEAD -> origin/master
\end_layout

\begin_layout Plain Layout

  remotes/origin/KH_Guide_34
\end_layout

\begin_layout Plain Layout

  remotes/origin/cx-41
\end_layout

\begin_layout Plain Layout

  remotes/origin/master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The branches prefixed with 
\begin_inset Quotes eld
\end_inset

remotes/
\begin_inset Quotes erd
\end_inset

 were found the last time we fetched.
 They were downloaded and the records were placed in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

.
 After adding 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-a
\end_layout

\end_inset

, we see clearly that the local branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 has a doppelganger on the server.
 
\end_layout

\begin_layout Standard
Also we see branch that we were not aware of before, named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

.
 It is, clearly, on the remote and now exists in our local file set.
 It is important to remember, then that the ones prefixed with 
\begin_inset Quotes eld
\end_inset

remotes
\begin_inset Quotes erd
\end_inset

 are only displayed if we add the 
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

 flag.
 They are there, however, in the local repository, all along.
\end_layout

\begin_layout Subsubsection*
First, consider the 
\begin_inset Quotes eld
\end_inset

local tracking branch
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The name 
\begin_inset Quotes eld
\end_inset

local tracking branch
\begin_inset Quotes erd
\end_inset

 refers to a checked-out version of a remote branch.
 A local tracking branch is 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

, while the remote snapshot of the same-named branch, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

, also exists.
 Here are some of the frequently asked questions.
\end_layout

\begin_layout Itemize
Question: Where did 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 come from? 
\end_layout

\begin_deeper
\begin_layout Itemize
Answer: There are two possible sources.
 
\end_layout

\begin_layout Enumerate
It was created by another user (or same user on another computer) and it
 was pushed to the remote.
 After the repository was fetched, and the user ran 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to open a local copy.
\end_layout

\begin_layout Enumerate
On the local system, the author created the branch, say 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout -b cx-41
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, and then made some edits/commits and then ran 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git push -u origin cx-41
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 The last command makes a copy of it in the 
\begin_inset Quotes eld
\end_inset

remotes
\begin_inset Quotes erd
\end_inset

 section that displays in 
\begin_inset Quotes eld
\end_inset

git branch -a
\begin_inset Quotes erd
\end_inset

 and puts it on the server.
\end_layout

\end_deeper
\begin_layout Itemize
Question: Are the two branches (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

) the same? 
\end_layout

\begin_deeper
\begin_layout Itemize
Answer: No, not necessarily.
\end_layout

\end_deeper
\begin_layout Itemize
Question: Should we try to make them the same? 
\end_layout

\begin_deeper
\begin_layout Itemize
Answer: Possibly.
\end_layout

\end_deeper
\begin_layout Standard
Here's why the last two answers are vague.
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 live in peace with each other, but the local and remote branches wander
 out of sync.
 We usually want to allow that, at least temporarily.
 As we experiment with new features in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

, there is some security in the knowledge that 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 is safe and undisturbed.
 We can restore from that point, easily (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsection:reset"

\end_inset

).
 
\end_layout

\begin_layout Standard
The version that exists on the remote 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin
\end_layout

\end_inset

 can also wander.
 If we go to another computer, checkout 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

, and push the changes back, then obviously the remote server's version
 will differ from what we have in this computer.
\end_layout

\begin_layout Standard
The fact that the remote 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 and the local 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 can diverge from each other, and that each can be different from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

, is a source of confusion.
 To the best of our knowledge, the following are correct:
\end_layout

\begin_layout Enumerate
If we run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, then all remote branch updates will be retrieved.
 The content from the remote for this branch will be stored in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

.
 That does not alter the local tracking branch, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

.
 Getting the changes from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 into 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 requires a separate merge step (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:fetch+merge"

\end_inset

).
\end_layout

\begin_layout Enumerate
The two step process is avoided if we run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 on this computer.
 Git checks the server for updates in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 and copies them into our 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 file collection, and then it merges those updates into the local branch
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

.
 This is the sense in which 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is equivalent to 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git merge
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Right after the 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, our copy of the remote, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

, the local tracking branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

, and the server's copy of the same are all perfectly aligned.
 Also, when we push from our local branch to the server, the two will be
 perfectly aligned.
 But that only lasts until 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 is edited.
\end_layout

\begin_layout Subsubsection*
Second, consider the remote branch
\end_layout

\begin_layout Standard
So far, the branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

 seems to exist only (over there) on the server.
 Actually, it exists in our 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

 directory.
 We see it in 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch -a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 The command 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 never actually talks to a server at all, it just inquires into the condition
 of our 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

 folder.
 The report from 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 is a snapshot of whatever was retrieved the last time that the repository
 was updated (either by a 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

).
 
\end_layout

\begin_layout Standard
But the files in our 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

's records on 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

 might as well be out of reach (over there) on the server because we cannot
 directly interact with 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

.
 To interact with those files, it is necessary to run 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
checkout
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
When we run a 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
checkout
\end_layout

\end_inset

, that remote branch 
\begin_inset Quotes eld
\end_inset

origin/KH_Guide_34
\begin_inset Quotes erd
\end_inset

 will be copied into a local tracking branch named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KH_Guide_34
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout KH_Guide_34
\end_layout

\begin_layout Plain Layout

$ git branch -a
\end_layout

\begin_layout Plain Layout

* KH_Guide_34
\end_layout

\begin_layout Plain Layout

  cx-41
\end_layout

\begin_layout Plain Layout

  master
\end_layout

\begin_layout Plain Layout

  remotes/origin/HEAD -> origin/master
\end_layout

\begin_layout Plain Layout

  remotes/origin/KH_Guide_34
\end_layout

\begin_layout Plain Layout

  remotes/origin/cx-41
\end_layout

\begin_layout Plain Layout

  remotes/origin/master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At that instant, the contents of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KH_Guide_34
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

 are perfectly synchronized.
 The branch that existed before only 
\begin_inset Quotes eld
\end_inset

on
\begin_inset Quotes erd
\end_inset

 the server (via our .
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git
\end_layout

\end_inset

 directory) now has a separate life of its own working directory.
 As we edit the files, the contents of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KH_Guide_34
\end_layout

\end_inset

 will gradually wander away from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

.
 And the contents stored on the server, of course, will wander away of the
 snapshot we have saved as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
How do the two become re-synchronized? We use 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
push
\end_layout

\end_inset

 to migrate changes from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KH_Guide_34
\end_layout

\end_inset

 to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

.
 If we have 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
KH_Guide_34
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 checked out and we run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git push -u origin KH_Guide_34
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then two effects occur.
 The changes are imposed on our local 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

's copy of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset

 and the changes are also uploaded to the server's copy of that branch.
 
\end_layout

\begin_layout Standard
If we go to another computer and clone the repository, the repository will
 show only one local branch, master, and it will show all of those branches
 that exist only (over there) on the remote server (and in our local .
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git
\end_layout

\end_inset

 folder's memory of it).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -a
\end_layout

\begin_layout Plain Layout

* master
\end_layout

\begin_layout Plain Layout

  remotes/origin/HEAD -> origin/master
\end_layout

\begin_layout Plain Layout

  remotes/origin/KH_Guide_34
\end_layout

\begin_layout Plain Layout

  remotes/origin/cx-41
\end_layout

\begin_layout Plain Layout

  remotes/origin/master
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git fetch
\begin_inset CommandInset label
LatexCommand label
name "git fetch"

\end_inset

(retrieve abranches)
\end_layout

\begin_layout Standard
Running 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 updates your repository's copies of the branches on the default remote
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin
\end_layout

\end_inset

.
 It does not alter files in your current working directory.
\end_layout

\begin_layout Standard
To update all local copies of remote branches, the ones that appear as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/branch
\end_layout

\end_inset

 in the output of 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch -avv
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 by running
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Git fetch does not alter files in any of your local tracking branches.
 It only updates the record keeping branches, our branches with names like
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/branch
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Git fetch can be selective.
 Retrieve the master branch as it exists on the remote origin:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch origin master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the syntax difference.
 Our local copy of that is referred to as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset

, like one long character string, while the branch that exists on the origin
 server is named master.
\end_layout

\begin_layout Standard
After fetch, then inspect! 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -avv
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This shows all of the branches and their most recent commit.
 It is a quick way to see if you are up to date.
\end_layout

\begin_layout Standard
Output of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git status
\end_layout

\end_inset

 draws our attention to the differences between our locally checked out
 copy of a branch and the one that was just fetched.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\begin_layout Plain Layout

  On branch cx-41
\end_layout

\begin_layout Plain Layout

  Your branch and 'origin/cx-41' have diverged,
\end_layout

\begin_layout Plain Layout

  and have 1 and 1 different commit each, respectively.
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  Unmerged paths:
\end_layout

\begin_layout Plain Layout

    (use "git add/rm <file>..." as appropriate to mark resolution)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

        both modified:      00-README.txt
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

no changes added to commit (use "git add" and/or "git commit -a")
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
fetch -
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
,
\end_layout

\end_inset

-prune (remove branches that no longer exist on remote)
\end_layout

\begin_layout Standard
A appears to exist in 3 places:
\end_layout

\begin_layout Enumerate
in the current working directory, it shows in 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

 folder's records of that branch, it shows as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
remotes/origin/cx-41
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
and on the server itself, which we never see directly, except by asking
 git to push or pull files to/from the server.
 
\end_layout

\begin_layout Standard
If a branch has been merged onto the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
master
\end_layout

\end_inset

, and we do not need it any more.
 To keep the current list of active branches as small as possible, the branch
 should be deleted.
 The tricky part, however, is that there are 3 variants that must be deleted.
 
\end_layout

\begin_layout Standard
When your merge request is handled in the GitLab server, the project manager
 may delete your branch on the remote (GitLab offers this as option).
 The branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 is thus deleted on the server.
 However, when your run 
\begin_inset Quotes eld
\end_inset

git branch -a
\begin_inset Quotes erd
\end_inset

, it will still show that there are branches named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

.
 So there's still some deletion to do.
\end_layout

\begin_layout Standard
Delete your local branch by running this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git branch -d cx-41
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then the local tracking branch will be deleted, but the output from 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git branch -a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 will still show 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

.
 We can't tell, actually, whether that branch still exists on the server.
 
\end_layout

\begin_layout Standard
If the project manager did not remove the branch on the server, it is possible
 for that to be handled in the command line.
 The manager can run a sequence like this to merge the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset

 branch with master and then it will delete the branch locally and remotely.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\begin_layout Plain Layout

$ git merge cx-41
\end_layout

\begin_layout Plain Layout

## Next: delete local copy of branch
\end_layout

\begin_layout Plain Layout

$ git branch -d cx-41
\end_layout

\begin_layout Plain Layout

## Tell remote server to remove its copy
\end_layout

\begin_layout Plain Layout

$ git push origin --delete cx-41
\end_layout

\begin_layout Plain Layout

To gitlab.crmda.ku.edu:crmda/guides.git
\end_layout

\begin_layout Plain Layout

 - [deleted]         cx-41
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset

 was deleted on the remote, we usually don't want to keep our local copy
 of it.
 We usually use the sledge hammer called 
\begin_inset Quotes eld
\end_inset

purge
\begin_inset Quotes erd
\end_inset

 to eliminate our local copies of all branches that no longer exist in the
 server.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch --prune
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or, the briefer version
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch -p
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git stash
\begin_inset CommandInset label
LatexCommand label
name "subsec:git-stash"

\end_inset


\end_layout

\begin_layout Standard
Git will often notice that you have unsaved edits and it will refuse to
 merge files until you either commit or stash your changes.
 We've discussed commit, but stashing the changes is an option.
 This 
\begin_inset Quotes eld
\end_inset

puts them out of the way
\begin_inset Quotes erd
\end_inset

.
 Do this if you are not sure you want to commit, but think your edits might
 be valuable.
 Start with
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git stash
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After that, the action you were trying to do, such as a pull or checkout,
 will be allowed.
 If you want to retrieve the stashed edits and merge them on top of the
 current directory, the command is 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git stash pop
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Here's an example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git stash
\end_layout

\begin_layout Plain Layout

Saved working directory and index state WIP on master: fdb2e35 Commit that
 was pushed first
\end_layout

\begin_layout Plain Layout

HEAD is now at fdb2e35 Commit that was pushed first
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

Updating fdb2e35..927c88f
\end_layout

\begin_layout Plain Layout

Fast-forward
\end_layout

\begin_layout Plain Layout

31.git/31.git.lyx | 2 +-
\end_layout

\begin_layout Plain Layout

1 file changes, 1 insertion(+), 1 deletion(-)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$ git stash pop
\end_layout

\begin_layout Plain Layout

Auto-merging 31.git/31.git.lyx
\end_layout

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

Your branch is up-to-date with 'origin/master'.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the revisions apply cleanly, then all is well and the problem is solved.
 If the revisions do not apply, then you have some work to do.
 It is necessary to figure out what the changes were in your stashed files
 and then reapply them.
 We leave the details as an exercise for a future version of this guide.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO INSERT details on inspecting the stashed files and figuring out what
 changes they have, how to apply them file-by-file.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git diff (compare versions)
\end_layout

\begin_layout Standard
We'd like to compare the current situation with the recently downloaded
 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 archive.
 A comprehensive report of all changes between our branch master and the
 version we just fetched with this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git diff origin/master master
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To see all changes between a working directory in branch 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
cx-41
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 and the remote 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/cx-41
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, replace 
\begin_inset Quotes eld
\end_inset

master
\begin_inset Quotes erd
\end_inset

 with the name of the branch:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git diff origin/branch_name local_branch_name
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The difficult part to understand is that your system never directly compares
 against the remote server.
\end_layout

\begin_layout Subsubsection
Is my current working directory up to date with the remote repository?
\end_layout

\begin_layout Standard
Because there is no way to directly compare your file against the remote,
 this question needs to be understood differently.
 We need to ask git to update its records by downloading a fresh copy of
 the branches from the server by fetching
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And after that, tools like 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
branch
\end_layout

\end_inset

 can compare the working directory (the checked out branch) to the records
 that exist in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
.git
\end_layout

\end_inset

 folder that reflect the most recent snapshot from the server.
 We might run, for example, 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status
\end_layout

\begin_layout Plain Layout

$ git branch -avv
\end_layout

\begin_layout Plain Layout

$ git diff origin/branch_name branch_name
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One way to view commits that are on the local master branch that are not
 yet on the remote master branch (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset

), run:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log origin/master..master
\end_layout

\begin_layout Plain Layout

commit ab5a11fd6c3e450cfbb95dd64456ae92be4bd5a7
\end_layout

\begin_layout Plain Layout

Author: Paul E.
 Johnson <pauljohn@ku.edu>
\end_layout

\begin_layout Plain Layout

Date:   Thu Jul 9 16:02:08 2015 -0500
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    test
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An empty return indicates that the remote and local branches are up-to-date
 (the most recent remote commit is present on the local branch).
\end_layout

\begin_layout Subsubsection
Experiment with gitk
\end_layout

\begin_layout Standard
Git uses the Unix diff command to compare files.
 The output from diff may be difficult to understand.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Get a more interesting example, with a picture
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Git distribution on all major platforms now includes a graphical tool
 named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
gitk
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 This can be used to view the branches and compare files.
 Run:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ gitk <<file name>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A new window will appear displaying information on changes between present
 files and previous commits, as well as additional information, such as
 a diagram of the commits made in the repository.
\end_layout

\begin_layout Standard
Running 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ gitk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
launches a more general overview of the project history and its branches.
\end_layout

\begin_layout Subsection
git mv (move, rename)
\end_layout

\begin_layout Standard
This works for files and directories.
 To change a file's name from 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git mv x y
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 A file can be moved into a directory named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 by 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git mv x z/y
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 It is allowed to move directories by renaming them.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git mv basic.txt anewfilename.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git mv
\end_layout

\end_inset

 command, it is also necessary to run a commit.
 One is tempted to run either 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit basic.txt
\end_layout

\end_inset

 or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit anewfilename.txt
\end_layout

\end_inset

, but as it turns out, neither seems to capture the renaming effect of this
 command.
 Rather, we find this case is especially suitable for the 
\begin_inset Quotes eld
\end_inset

-a
\begin_inset Quotes erd
\end_inset

 flag.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit -a
\end_layout

\end_inset


\end_layout

\begin_layout Standard
after which the editor opens saying:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Please enter the commit message for your changes.
 Lines starting
\end_layout

\begin_layout Plain Layout

# with '#' will be ignored, and an empty message aborts the commit.
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# On branch master
\end_layout

\begin_layout Plain Layout

# Your branch is ahead of 'origin/master' by 1 commit.
\end_layout

\begin_layout Plain Layout

#   (use "git push" to publish your local commits)
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Changes to be committed:
\end_layout

\begin_layout Plain Layout

#	renamed:    basic.txt -> anewfilename.txt
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git rm (remove files)
\end_layout

\begin_layout Standard
It is easy, perhaps too easy, to delete files from a Git project.
 This is one of the differences between Git and other version managers.
 If the author deletes a file–by whatever means–then the next run of 
\begin_inset Quotes eld
\end_inset

git commit -a
\begin_inset Quotes erd
\end_inset

 will notice the deleted files and it will remove those files from the tracking
 system.
 This does not delete the file from history, it can be retrieved if needed.
\end_layout

\begin_layout Standard
Those deletions may be accidental, however, and there is a way to more clearly
 keep records and remove files from a project.
\end_layout

\begin_layout Standard
Run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git rm filename
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 A commit is also necessary.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rm basic.txt
\end_layout

\begin_layout Plain Layout

$ git commit -a
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Caution: Directory deletion requires a flag
\end_layout

\begin_layout Standard
Git 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rm
\end_layout

\end_inset

 will refuse to delete a directory.
 Here we try to remove a directory named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
notes
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rm notes 
\end_layout

\begin_layout Plain Layout

fatal: not removing 'notes' recursively without -r
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead, one should insert the 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
-r
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

r
\begin_inset Quotes erd
\end_inset

=recursive) flag, and all of the deleted files will be listed by name.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rm -r notes
\end_layout

\begin_layout Plain Layout

rm 'notes/README.md'
\end_layout

\begin_layout Plain Layout

rm 'notes/RHS-notes-Ch-01.lyx'
\end_layout

\begin_layout Plain Layout

rm 'notes/RHS-notes-Ch-01.pdf'
\end_layout

\begin_layout Plain Layout

rm 'notes/RHS-notes-Ch-02.lyx'
\end_layout

\begin_layout Plain Layout

rm 'notes/RHS-notes-Ch-02.pdf'
\end_layout

\begin_layout Plain Layout

$ git commit
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git merge
\begin_inset CommandInset label
LatexCommand label
name "subsec:git merge"

\end_inset


\end_layout

\begin_layout Standard
Go onto the target branch, the one into which we want the material to be
 inserted.
 Then apply the revisions from the source branch onto the target branch.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout target
\end_layout

\begin_layout Plain Layout

$ git merge source
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That will apply edits from target to source.
 Frequently, there will be merge conflicts that must be manually resolved.
 See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Fix-conflict"

\end_inset

.
\end_layout

\begin_layout Standard
If you use 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to both retrieve remote branches and then bring the current working directory
 up to date, it will not be necessary to run a merge command.
 However, if you use 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to retrieve the remotes, then it is necessary to update the local tracking
 branch explicitly.
 
\end_layout

\begin_layout Subsubsection*
After git fetch, use merge to update a local tracking branch
\begin_inset CommandInset label
LatexCommand label
name "subsec:fetch+merge"

\end_inset


\end_layout

\begin_layout Standard
Consider, for example, we want to work in our local branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KH_Guide_34
\end_layout

\end_inset

 but only after updating against the remote version, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/KH_Guide_34
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git fetch
\end_layout

\begin_layout Plain Layout

$ git checkout KH_Guide_34
\end_layout

\begin_layout Plain Layout

$ git merge origin/KH_Guide_34
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is equivalent to running 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 after checking out KH_Guide_34.
\end_layout

\begin_layout Subsection
git show (recover previous versions)
\begin_inset CommandInset label
LatexCommand label
name "subsec:oldcopynewfile"

\end_inset


\end_layout

\begin_layout Standard
This is easy to do in an editor like Emacs, where the menu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools
\end_layout

\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
->
\end_layout

\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Version Control
\end_layout

\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
->
\end_layout

\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Show Other Version
\end_layout

\end_inset

 will allow the user to see an old version in a separate windows.
 That is discussed in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Emacs"

\end_inset

.
 
\end_layout

\begin_layout Standard
In the Git command line interface, it can be done with 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git show
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 Suppose the current directory has:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls
\end_layout

\begin_layout Plain Layout

test.xls
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The commit history shows 5 commits:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git log --oneline
\end_layout

\begin_layout Plain Layout

6bc9d2c Fix final paragraph in test.xls
\end_layout

\begin_layout Plain Layout

c93cfe1 Found typo in second paragraph test.xls
\end_layout

\begin_layout Plain Layout

4276f2e Inserted third paragraph test.xls
\end_layout

\begin_layout Plain Layout

5647285 Created first 2 paragraphs in test.xls
\end_layout

\begin_layout Plain Layout

6e043c7 Added test.xls
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Create a file that is a copy of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
test.xls
\end_layout

\end_inset

 as it existed during the second commit:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git show 5647:test.xls > test-5647285.xls
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The SHA1 of the desired commit is referenced (5647), the name of the file
 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
test.xls
\end_layout

\end_inset

), and the name of the new file to be created (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
test-5647285.xls
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
The file list now shows
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ls
\end_layout

\begin_layout Plain Layout

test-5647285.xls  test.xls
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
git tag (labels for important commits)
\end_layout

\begin_layout Standard
A tag can be used as a handle for the current state of everything in a branch.
 Create a tag:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git tag -a YourTagNameHere -m 'YourTagMessageHere'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
-a
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 switch is not required, but we recommend it.
 It creates an annotated tag.
 Annotated tags include creation date, the tagger name and email, and a
 tagging message.
 
\end_layout

\begin_layout Standard
View all tag names and the first 2 lines of the tag messages that went with
 them
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git tag -n2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To see more information about a particular tag, use
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git show YourTagNameHere
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The most important purpose of a tag is to recover a project in a previous
 state.
 Suppose, for example, we know that there was a tag named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
version1
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, after which we have a lot of commits.
 We can check out the files as they were at that time by running:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout version1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Git, tags are not so vital as in other version managers.
 A tag is not actually needed to recover an old project.
 One can do the same by checking out the specific commit.
\end_layout

\begin_layout Section
Troubleshooting Pull Fails, Push Fails
\end_layout

\begin_layout Standard
The problem usually starts when you have edited some files, committed them,
 and you want to push them back to a remote server.
 Git will refuse if your copy of the remote is not up-to-date (you were
 revising out of date files).
 The push fail leads off into a sequence of problems that we now explore.
\end_layout

\begin_layout Subsection
Push Fail: out-of-date local repository
\end_layout

\begin_layout Standard
A user has copies of the same repository on 2 computers.
 She edits files on one and pushes the branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
sj-fix
\end_layout

\end_inset

 to the server.
 Later, she edits the repository on a different computer.
 She has forgotten that she made edits on the other machine.
 When she tries to push the branch, the following error happens:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git push
\end_layout

\begin_layout Plain Layout

To git@gitlab.crmda.ku.edu:software/kutils.git
\end_layout

\begin_layout Plain Layout

 ! [rejected]        sj-fix -> sj-fix (fetch first)
\end_layout

\begin_layout Plain Layout

error: failed to push some refs to 'git@gitlab.crmda.ku.edu:software/kutils.git'
\end_layout

\begin_layout Plain Layout

hint: Updates were rejected because the remote contains work that 
\end_layout

\begin_layout Plain Layout

hint: you do not have locally.
 This is usually caused by another 
\end_layout

\begin_layout Plain Layout

hint: repository pushing to the same ref.
 You may want to first 
\end_layout

\begin_layout Plain Layout

hint: integrate the remote changes (e.g., 'git pull ...') 
\end_layout

\begin_layout Plain Layout

hint: before pushing again.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The way to avoid this is to always stay up to date with the server.
 The Standard 4 Step sequence (Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Standard-Four-Step"

\end_inset

) should be followed.
\end_layout

\begin_layout Subsection
Pull Fail: A Fortunate Outcome May Occur
\end_layout

\begin_layout Standard
This happens if 2 people are working on the same branch.
 Or if one user has 2 computers with copies of the repository.
 Suppose an update for 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
00-README.txt
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 has been pushed to the remote from one repository.
 In another repository, it seems like 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset

 should 
\begin_inset Quotes eld
\end_inset

just work.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Git is willing to pull, but it stops in the middle and asks for a commit
 message.
 The editor opens:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Merge branch 'sj-fix' of gitlab.crmda.ku.edu:crmdaprojects/Ticket-666-Client
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Please enter a commit message to explain why this merge is necessary,
\end_layout

\begin_layout Plain Layout

# especially if it merges an updated upstream into a topic branch.
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Lines starting with '#' will be ignored, and an empty message aborts
\end_layout

\begin_layout Plain Layout

# the commit.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The bothersome part is that 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset

 does not tell us which files are to be merged.
 In exasperation, we enter a commit message like 
\begin_inset Quotes eld
\end_inset

I have no idea what these changes are
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is why some people urge us to never use git pull, but rather a two
 step fetch/merge process.
 That brings with it other complications that we do not want to impose on
 most of our users.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
When the pull merge succeeds, there will be a message explaining which files
 were altered.
 Generally, the resulting message is harmless, indicating that the file
 was updated.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

X11 forwarding request failed on channel 0
\end_layout

\begin_layout Plain Layout

Merge made by the 'recursive' strategy.
\end_layout

\begin_layout Plain Layout

 R/00-README.txt                           |   84 ++
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
A pull merge might be dangerous
\end_layout

\begin_layout Standard
Sometimes we find out the pull brings in a lot of files that we do not want.
 If another user made a lot of changes on the branch, look what we get.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

X11 forwarding request failed on channel 0
\end_layout

\begin_layout Plain Layout

Removing R/correctOutcomes.R
\end_layout

\begin_layout Plain Layout

Merge made by the 'recursive' strategy.
\end_layout

\begin_layout Plain Layout

 R/00-README.txt                           |   84 ++
\end_layout

\begin_layout Plain Layout

 R/accdbImport.R                           |   27 +
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/airDataMerge.R            |    0
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/codeChecking.R            |    0
\end_layout

\begin_layout Plain Layout

 R/archive/correctOutcomes.R               |  112 +++
\end_layout

\begin_layout Plain Layout

 R/archive/datadictionary.csv              |    1 +
\end_layout

\begin_layout Plain Layout

 R/archive/fullDataDictionary.csv          |  488 ++++++++++++
\end_layout

\begin_layout Plain Layout

 R/archive/fullDataDictionary_handEdit.csv |    1 +
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/import-2.R                |    0
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/import.r                  |    0
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/keyMaker.R                |    0
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/mergeCheck.R              |    0
\end_layout

\begin_layout Plain Layout

 R/archive/saveRdsAsDta.R                  |  106 +++
\end_layout

\begin_layout Plain Layout

 R/{ => archive}/zipCheck.R                |    0
\end_layout

\begin_layout Plain Layout

 R/correctOutcomes.R                       |  170 ----
\end_layout

\begin_layout Plain Layout

 R/import_2009-2015.R                      |  233 ++++++
\end_layout

\begin_layout Plain Layout

 R/mergeAllHealth.R                        |  174 +++++
\end_layout

\begin_layout Plain Layout

 R/metData.R                               |  113 +++
\end_layout

\begin_layout Plain Layout

 R/newAir.R                                |  233 ++++++
\end_layout

\begin_layout Plain Layout

 data/key.xlsx                             |  Bin 6755 -> 10660 bytes
\end_layout

\begin_layout Plain Layout

 writeup/FreqTable_20160426.lyx            |  408 ++++++++++
\end_layout

\begin_layout Plain Layout

 writeup/finalReport.lyx                   | 1201 +++++++++++++++++++++++++++++
\end_layout

\begin_layout Plain Layout

 writeup/freqTable.lyx                     |  392 ++++++++++
\end_layout

\begin_layout Plain Layout

 writeup/table2.tex                        |   32 +
\end_layout

\begin_layout Plain Layout

 24 files changed, 3605 insertions(+), 170 deletions(-)
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/00-README.txt
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/accdbImport.R
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/airDataMerge.R (100%)
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/codeChecking.R (100%)
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/archive/correctOutcomes.R
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/archive/datadictionary.csv
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/archive/fullDataDictionary.csv
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/archive/fullDataDictionary_handEdit.csv
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/import-2.R (100%)
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/import.r (100%)
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/keyMaker.R (100%)
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/mergeCheck.R (100%)
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/archive/saveRdsAsDta.R
\end_layout

\begin_layout Plain Layout

 rename R/{ => archive}/zipCheck.R (100%)
\end_layout

\begin_layout Plain Layout

 delete mode 100644 R/correctOutcomes.R
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/import_2009-2015.R
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/mergeAllHealth.R
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/metData.R
\end_layout

\begin_layout Plain Layout

 create mode 100644 R/newAir.R
\end_layout

\begin_layout Plain Layout

 create mode 100644 writeup/FreqTable_20160426.lyx
\end_layout

\begin_layout Plain Layout

 create mode 100644 writeup/finalReport.lyx
\end_layout

\begin_layout Plain Layout

 create mode 100644 writeup/freqTable.lyx
\end_layout

\begin_layout Plain Layout

 create mode 100644 writeup/table2.tex
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We accepted a lot of changes that we did not want or expect.
 
\end_layout

\begin_layout Standard
The most cautious Git users, the inhabitants of 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

stackoverflow.com
\end_layout

\end_inset

, will often recommend that we protect ourselves.
 Git users should avoid 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pull
\end_layout

\end_inset

, and use a conservative two-step strategy, 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git fetch
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git merge
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 See, for example, blog posts like 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "GIT: Fetch and Merge, Don't Pull"
target "https://longair.net/blog/2009/04/16/git-fetch-and-merge"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

 If one has the patience, the changes that will result can be inspected
 before they are applied.
 
\end_layout

\begin_layout Standard
On the other hand, we may want the remote changes to come into our local
 folder.
 However, we want the remote changes to stay chronologically separate from
 our local revisions.
 By adding the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
,
\end_layout

\end_inset

-rebase
\end_layout

\end_inset

 argument, the project history may stay clean.
 Run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull --rebase
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That does the following:
\end_layout

\begin_layout Enumerate
Separate your revisions of the file set and put them aside.
\end_layout

\begin_layout Enumerate
Fetch and apply remote changes to bring the local branch into line with
 the remote.
\end_layout

\begin_layout Enumerate
Your changes are 
\emph on
layered
\emph default
 back onto the up-to-date file set.
 
\end_layout

\begin_layout Standard
The files that result may be similar to a git merge, but the history will
 be different.
 The history of the commits will make it look as though your branch was
 up to date before you started editing.
 Git does not usually ask for a commit message when you do this, unless
 it detects some trouble re-merging your edits.
\end_layout

\begin_layout Subsection
Git pull causes merge conflict
\end_layout

\begin_layout Standard
Git tracks file changes.
 It uses a format known as 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 which create 
\begin_inset Quotes eld
\end_inset

patches
\begin_inset Quotes erd
\end_inset

 to represent changes from one version to another.
 When you pull from the remote, the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
diff
\end_layout

\end_inset

 may not apply cleanly.
 The merge does not fail, but it leaves some litter.
 Here is an example.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[pauljohn@login2 myGitPractice]$ git pull
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 5, done.
\end_layout

\begin_layout Plain Layout

remote: Total 3 (delta 0), reused 0 (delta 0)
\end_layout

\begin_layout Plain Layout

Unpacking objects: 100% (3/3), done.
\end_layout

\begin_layout Plain Layout

From /crmda/users/pauljohn/myGitPractice
\end_layout

\begin_layout Plain Layout

   ee9ee25..9e6cf8a  master     -> origin/master
\end_layout

\begin_layout Plain Layout

Auto-merging 00-README.txt
\end_layout

\begin_layout Plain Layout

CONFLICT (content): Merge conflict in 00-README.txt
\end_layout

\begin_layout Plain Layout

Automatic merge failed; fix conflicts and then commit the result.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case, the file 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
00-README.txt
\end_layout

\end_inset

 is conflicted.
 Below, in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Fix-conflict"

\end_inset

, we have commentary about what to do when this happens.
 
\end_layout

\begin_layout Subsection
Git pull refused: locally untracked files
\end_layout

\begin_layout Standard
The local directory may have files that are not tracked.
 If a file with the same name has been added to the repository from another
 computer, then 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 will fail.
 Git refuses to obliterate a locally untracked file by placing a tracked
 file on top of it.
 Look for the file name 
\begin_inset Quotes eld
\end_inset

accdbImport.R
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

X11 forwarding request failed on channel 0
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 280, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (118/118), done.
\end_layout

\begin_layout Plain Layout

remote: Total 280 (delta 190), reused 233 (delta 161)
\end_layout

\begin_layout Plain Layout

Receiving objects: 100% (280/280), 69.25 KiB | 0 bytes/s, done.
\end_layout

\begin_layout Plain Layout

Resolving deltas: 100% (190/190), done.
\end_layout

\begin_layout Plain Layout

From gitlab.crmda.ku.edu:crmdaprojects/Ticket-673-Ahmed
\end_layout

\begin_layout Plain Layout

   af6cff3..3852a11  master     -> origin/master
\end_layout

\begin_layout Plain Layout

error: The following untracked working tree files would be overwritten by
 merge:
\end_layout

\begin_layout Plain Layout

        R/accdbImport.R
\end_layout

\begin_layout Plain Layout

Please move or remove them before you can merge.
\end_layout

\begin_layout Plain Layout

Aborting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The obvious fix is to move 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
accdbImport.R
\end_layout

\end_inset

 to another file name, then re-run 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset

.
 Then figure out if the version of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
accdbImport.R
\end_layout

\end_inset

 that was pulled is better or worse than the one that you copied to another
 file name.
\end_layout

\begin_layout Subsection
Git pull refused: uncommitted local revisions
\end_layout

\begin_layout Standard
In this case, 00-README.txt is a file under Git tracking.
 We have edited it.
 A 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 failure results because our change was not yet committed.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

X11 forwarding request failed on channel 0
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 3, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (3/3), done.
\end_layout

\begin_layout Plain Layout

remote: Total 3 (delta 2), reused 0 (delta 0)
\end_layout

\begin_layout Plain Layout

Unpacking objects: 100% (3/3), done.
\end_layout

\begin_layout Plain Layout

From gitlab.crmda.ku.edu:crmdaprojects/Ticket-666-Client
\end_layout

\begin_layout Plain Layout

   21392f1..38b0bb0  master     -> origin/master
\end_layout

\begin_layout Plain Layout

Updating 21392f1..38b0bb0
\end_layout

\begin_layout Plain Layout

error: Your local changes to the following files would be overwritten by
 merge:
\end_layout

\begin_layout Plain Layout

        00-README.txt
\end_layout

\begin_layout Plain Layout

Please, commit your changes or stash them before you can merge.
\end_layout

\begin_layout Plain Layout

Aborting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's not as bad as it looks.
 
\emph on
Git did nothing! 
\emph default
Git's error message suggests either committing your edits or stashing them.
 Both of those will work.
 
\end_layout

\begin_layout Standard
When does this work? If local changes are not too radical and don't contradict
 changes from the remote, then stashing the changes and re-applying them
 will probably succeed.
 
\end_layout

\begin_layout Standard
When can this cause trouble? If local changes do not apply to the pulled
 file set, then Git will enter a 
\begin_inset Quotes eld
\end_inset

rebase correction cycle.
\begin_inset Quotes erd
\end_inset

 Conflicting changes to the files must be corrected, as discussed in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Fix-conflict"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Fix-conflict"

\end_inset

Manually fixing merge conflicts
\end_layout

\begin_layout Standard
When the version manager tries to apply a set of changes to a file, and
 the changes do not fit together with the old file, then we have 
\begin_inset Quotes eld
\end_inset

rejected hunks
\begin_inset Quotes erd
\end_inset

 of edits.
 If there are rejected hunks, then the version tracker inserts markers.
 The conflicting sections are enclosed in brackets like 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
<<<
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
>>>
\end_layout

\end_inset

.
 This part of the file will look like this: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<<<<<<< This was entered during the first push 
\end_layout

\begin_layout Plain Layout

========== This was entered as your commit, and could not be pushed due
 to the merge conflict >>>>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A good deal of the Git framework is dedicated to avoiding those conflicted
 sections.
 But conflicts do happen.
\end_layout

\begin_layout Standard
When there are files with those conflict markers, they must be corrected.
 You will not be allowed to push changes to the remote server as long as
 git thinks files are still in conflict.
 It is necessary to 
\end_layout

\begin_layout Itemize
Edit the files in which there are conflicts (make them correct).
 Editing these files can be frustrating.
 Between the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
<<<
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
>>>
\end_layout

\end_inset

, the two conflicting committed edits are separated by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
=====
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git add filename
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to let git know that you have corrected those problems.
 
\end_layout

\begin_layout Itemize
Then 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git push
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
In a perfect world, that will go easily and the work is done.
 We recently had an example where it seemed not so easy, so here is a record
 of the incident.
 As you can see, when we ran 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git pull
\end_layout

\end_inset

, the merge found a conflict and we were instructed to fix the file 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
variableKey.R
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git pull
\end_layout

\begin_layout Plain Layout

X11 forwarding request failed on channel 0
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 12, done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (12/12), done.
\end_layout

\begin_layout Plain Layout

remote: Total 12 (delta 10), reused 0 (delta 0)
\end_layout

\begin_layout Plain Layout

Unpacking objects: 100% (12/12), done.
\end_layout

\begin_layout Plain Layout

From gitlab.crmda.ku.edu:software/kutils
\end_layout

\begin_layout Plain Layout

   4940bc0..2af20f6  master     -> origin/master
\end_layout

\begin_layout Plain Layout

Auto-merging package/kutils/R/variableKey.R
\end_layout

\begin_layout Plain Layout

CONFLICT (content): Merge conflict in package/kutils/R/variableKey.R
\end_layout

\begin_layout Plain Layout

Automatic merge failed; fix conflicts and then commit the result.
\end_layout

\begin_layout Plain Layout

[1]+  Done                    emacs variableKey.R
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After editing the file (we removed  
\begin_inset Flex Code
status open

\begin_layout Plain Layout
<<< >>>
\end_layout

\end_inset

 and cleared up parts between), the effort to commit that file was rejected:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git add variableKey.R
\end_layout

\begin_layout Plain Layout

$ git commit
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Caution: Run 
\begin_inset Quotes eld
\end_inset

git commit
\begin_inset Quotes erd
\end_inset

, not 
\begin_inset Quotes eld
\end_inset

git commit -a
\begin_inset Quotes erd
\end_inset

 or similar
\end_layout

\begin_layout Standard
In the above, one is supposed to run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git commit
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 with no options or arguments.
 If one makes the mistake of giving a file name, then some errors arise.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Here is the mistake
\end_layout

\begin_layout Plain Layout

$ git commit variableKey.R
\end_layout

\begin_layout Plain Layout

fatal: cannot do a partial commit during a merge.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The status output looked like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git status .
\end_layout

\begin_layout Plain Layout

On branch master
\end_layout

\begin_layout Plain Layout

Your branch and 'origin/master' have diverged,
\end_layout

\begin_layout Plain Layout

and have 1 and 2 different commits each, respectively.
\end_layout

\begin_layout Plain Layout

  (use "git pull" to merge the remote branch into yours)
\end_layout

\begin_layout Plain Layout

All conflicts fixed but you are still merging.
\end_layout

\begin_layout Plain Layout

  (use "git commit" to conclude merge)
\end_layout

\begin_layout Plain Layout

Changes to be committed:
\end_layout

\begin_layout Plain Layout

        modified:   variableKey.R
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After checking about, we guessed the right solution was
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git commit
\end_layout

\end_inset

In the editor window, this was the message:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Merge branch 'master' of gitlab.crmda.ku.edu:software/kutils
\end_layout

\begin_layout Plain Layout

# Conflicts:
\end_layout

\begin_layout Plain Layout

#       package/kutils/R/variableKey.R
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# It looks like you may be committing a merge.
\end_layout

\begin_layout Plain Layout

# If this is not correct, please remove the file
\end_layout

\begin_layout Plain Layout

#       .git/MERGE_HEAD
\end_layout

\begin_layout Plain Layout

# and try again.
\end_layout

\begin_layout Plain Layout

# Please enter the commit message for your changes.
 Lines starting
\end_layout

\begin_layout Plain Layout

# with '#' will be ignored, and an empty message aborts the commit.
\end_layout

\begin_layout Plain Layout

# On branch master
\end_layout

\begin_layout Plain Layout

# Your branch and 'origin/master' have diverged,
\end_layout

\begin_layout Plain Layout

# and have 1 and 2 different commits each, respectively.
\end_layout

\begin_layout Plain Layout

#   (use "git pull" to merge the remote branch into yours)
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# All conflicts fixed but you are still merging.
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Changes to be committed:
\end_layout

\begin_layout Plain Layout

#       modified:   variableKey.R
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We added a commit message and exited.
 After that, all was well.
\end_layout

\begin_layout Subsubsection*
Complicated merge problems
\end_layout

\begin_layout Standard
Suppose the Git merge creates a file with a huge number of sections.
 There may be hundreds of conflicts and resolving them manually will take
 too much time.
\end_layout

\begin_layout Standard
In our experience, it is often necessary to take the low road and avoid
 the Git merge problem altogether.
 Terminate the merge (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:undo_merge"

\end_inset

) and look at the substance of the problem.
 
\end_layout

\begin_layout Enumerate
Get a copy of the old version.
 This is the last 
\begin_inset Quotes eld
\end_inset

good one
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
Get a copy of new revised version.
\end_layout

\begin_layout Enumerate
Edit the 2 file side by side.
 The programming file editor Emacs has a 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools
\end_layout

\end_inset

 -> 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Compare
\end_layout

\end_inset

 buffers option that can make it easier to see where the changes are.
 
\end_layout

\begin_layout Section
User Conveniences (Graphical Interfaces)
\begin_inset CommandInset label
LatexCommand label
name "sec:GUI"

\end_inset


\end_layout

\begin_layout Standard
We have avoided graphical user interfaces because 1) they don't always get
 everything correct every time, and 2) users who rely on them experience
 
\begin_inset Quotes eld
\end_inset

skill decay
\begin_inset Quotes erd
\end_inset

 so that they are incapable of fixing things that go wrong.
 There are some commercial Git GUIs that we have not used, but we have tested
 several others.
\end_layout

\begin_layout Standard
We have success using addons for programming file editors like Emacs.
 We also have experimented with Tortoise for Windows, which is a file manager
 addon.
 
\end_layout

\begin_layout Subsection
Windows Explorer Tortoise
\end_layout

\begin_layout Standard
Tortoise (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://code.google.com/p/tortoisegit/
\end_layout

\end_inset

) offers a Windows File Explorer plugin for Git.
 
\end_layout

\begin_layout Subsubsection*
Caution: Danger of accidentally adding files.
 
\end_layout

\begin_layout Standard
The biggest danger with TortoiseGit is that users chronically add way too
 many files with it.
 If a folder has 20 files, but the user wants to track only 1, it is a very
 common error to add all 20 files.
 This is a user error, of course, but the error is encouraged by the GUI.
 
\end_layout

\begin_layout Subsubsection*
Again, Cautiously, we proceed
\end_layout

\begin_layout Enumerate
File icons in Windows Explorer
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename images/AddedFile.png

\end_inset

 A file that has been added to be tracked
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/DiffVers.png

\end_inset

 A tracked file has changed
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/SameVers.png

\end_inset

 An tracked file that has not changed
\end_layout

\begin_layout Standard
No icon indicates the file is not being tracked by git.
\end_layout

\end_deeper
\begin_layout Enumerate
Create a Repository
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Right-click the directory that has files you want to track with Git (do
 not open it).
\end_layout

\begin_layout Itemize
Select 
\begin_inset Quotes eld
\end_inset

Create Git repository here
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Do not choose 
\begin_inset Quotes eld
\end_inset

Make it Bare
\begin_inset Quotes erd
\end_inset

.
 This is strictly for local tracking.
 If a remote server repo becomes available, we can reconfigure to push/pull
 from it.
\end_layout

\end_deeper
\begin_layout Enumerate
Adding files to a repository.
 Open the directory in the file manager.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Right click on a file, select 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
TortosieGit
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

, then select 
\begin_inset Quotes eld
\end_inset

Add...
\begin_inset Quotes erd
\end_inset

, OK, Commit, etc.
\end_layout

\begin_layout Itemize
Editor will open, asking for a commit message.
\end_layout

\begin_layout Itemize
We suggest that you also check the 
\begin_inset Quotes eld
\end_inset

Set commit date
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Set author
\begin_inset Quotes erd
\end_inset

 boxes.
\end_layout

\begin_layout Itemize
If all goes well, the check mark 
\begin_inset Graphics
	filename images/SameVers.png

\end_inset

 appears.
\end_layout

\end_deeper
\begin_layout Enumerate
Reviewing the Git log.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Right click in the directory
\end_layout

\begin_layout Itemize
Select 
\begin_inset Quotes eld
\end_inset

TortoiseGit
\begin_inset Quotes erd
\end_inset

, then select 
\begin_inset Quotes eld
\end_inset

Show log
\begin_inset Quotes erd
\end_inset

.
 This brings up the Log Messages window.
\end_layout

\end_deeper
\begin_layout Enumerate
Retrieve an old version of one file.
\end_layout

\begin_deeper
\begin_layout Itemize
In the log, click on any entry that interests you.
\end_layout

\begin_layout Itemize
The file version for the entry will be apparent.
\end_layout

\begin_layout Itemize
To retrieve a previous version, right-click on the file and select 
\begin_inset Quotes eld
\end_inset

Save revision to...
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Subsubsection
Tortoise interacts with branches 
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tortoise-views-branches"

\end_inset


\end_layout

\begin_layout Standard
Tortoise is aware of branches.
 The File Manager only shows the files of the current branch, just as we
 expect.
 In the terminal, for example, suppose we check out a branch:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout kk-baseball
\end_layout

\begin_layout Plain Layout

Switched to branch 'kk-baseball'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now the files from that branch are evident in Windows Explorer
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/Baseballbranch.png
	width 9cm

\end_inset


\end_layout

\begin_layout Subsection
Emacs
\begin_inset CommandInset label
LatexCommand label
name "subsec:Emacs"

\end_inset


\end_layout

\begin_layout Standard
The text editor Emacs includes a Version Management interface that can interact
 with Git and Subversion.
 Look under the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools
\end_layout

\end_inset

 menu, find 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Version Control
\end_layout

\end_inset

.
 This is a general purpose editor tool that can interact with various version
 management systems.
 It is not Git specific, but it does understand Git.
\end_layout

\begin_layout Standard
Emacs has very convenient tools to commit edits (it can interact with the
 Emacs ChangeLog) and retrieve old versions of files.
\end_layout

\begin_layout Standard
In Emacs documentation, we refer to the Control key as 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 and the Meta key (usually the Alt key) as 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

.
 For example, 
\begin_inset Quotes eld
\end_inset

M-w
\begin_inset Quotes erd
\end_inset

 (Alt-w) means to copy the highlighted region and 
\begin_inset Quotes eld
\end_inset

C-y
\begin_inset Quotes erd
\end_inset

 means paste (Control-y).
\end_layout

\begin_layout Subsubsection
Commit via Emacs
\end_layout

\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools 
\end_layout

\end_inset

-> 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Version Control
\end_layout

\end_inset

 -> 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Check In/Out
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
This is the equivalent of 
\begin_inset Quotes eld
\end_inset

commit
\begin_inset Quotes erd
\end_inset

.
 It will add a file to Git if it is not currently being tracked.
\end_layout

\begin_layout Standard
When you choose Check In/Out, Emacs throws open a buffer where you type
 your explanation of what you changed.
 Many people would paste in the last bit of the ChangeLog file for the project.
 Some people just make a note to remember what this checkin represents.
\end_layout

\begin_layout Standard
To get out of that buffer, use the key strokes 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
C-c C-c
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (C for control).
 DO NOT close the buffer with menus, that will erase the checkin.
\end_layout

\begin_layout Subsubsection
Retrieve an old file (interacting with history)
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools
\end_layout

\end_inset

 
\family typewriter
->
\family default
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Version Control
\end_layout

\end_inset

 -> 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Show History
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Highlight and copy (M-w) the first 5 or 6 characters of that SHA1 for the
 commit that we want to retrieve.
 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools
\end_layout

\end_inset

 
\family typewriter
->
\family default
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Version Control
\end_layout

\end_inset

 
\family typewriter
->
\family default
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Show Other Version
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The minibuffer (bottom of frame) asks for the SHA1.
 Paste that in (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
C-y
\end_layout

\end_inset

).
 Hit enter.
 The previous version of the file will appear in the current directory.
\end_layout

\end_deeper
\begin_layout Subsubsection
Integrate with Emacs ChangeLog
\end_layout

\begin_layout Standard
Emacs has a built-in change log framework.
 To open a ChangeLog file, run 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{M-x add-change-log-entry}
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 followed by the Return key.
 Emacs will ask what file will be used for the change log (Default: 
\begin_inset Quotes eld
\end_inset

ChangeLog
\begin_inset Quotes erd
\end_inset

 in current working directory).
 After inserting the message, then run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
C-c C-c
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 This records the entry and then puts the editor back in the file that was
 being edited.
 The next time Emacs is asked to commit changes (Menu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tools 
\end_layout

\end_inset

-> 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Version Control
\end_layout

\end_inset

 -> 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Check In/Out
\end_layout

\end_inset

), Emacs will know that there was a ChangeLog entry.
 It will retrieve that message and propose it as the Git commit message.
\end_layout

\begin_layout Section
We use Git-LFS for binary files
\end_layout

\begin_layout Standard
We have a GitLab server that is LFS enabled.
 This section is a place holder that will be created.
 The current notes on this are available in 
\begin_inset CommandInset href
LatexCommand href
name "Git LFS notes"
target "http://crmda.dept.ku.edu/guides/31.git/31.git-lfs.md"
literal "false"

\end_inset

.
\end_layout

\begin_layout Part
Advanced Knowledge and Operations
\end_layout

\begin_layout Section
Getting Particular Things Done
\end_layout

\begin_layout Standard
This section outlines solutions to particular problems that we have encountered.
 When we find one good answer for something, we are recording it here.
 These suggestions generally assume an understanding of Git basics we have
 outlined in previous sections.
\end_layout

\begin_layout Subsection
Recover lost files (or re-set accidentally edited files)
\begin_inset CommandInset label
LatexCommand label
name "subsec:Recover-files"

\end_inset


\end_layout

\begin_layout Standard
There is a nice discussion of this in 
\begin_inset CommandInset href
LatexCommand href
name "Restore a deleted folder in a Git repo"
target "https://stackoverflow.com/a/30875442/1086346"
literal "false"

\end_inset


\end_layout

\begin_layout Subsubsection
Uncommitted revisions: restore individual files/folders
\end_layout

\begin_layout Standard
If you did not yet commit changes, do the following to undo your edits (to
 recover last committed version of the file), do this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout -- <file>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this will erase the current version of the file.
 If there are edits in the file you want to save, copy it somewhere else.
\end_layout

\begin_layout Standard
If you have committed changes to your file, and want to look at the previous
 commits, then the checkout will not work.
 Instead, we suggest the method detailed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:oldcopynewfile"

\end_inset

.
\end_layout

\begin_layout Standard
It is often asserted that one can 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout
\end_layout

\end_inset

 to restore a directory, the deletion of which has occurred (say, in a file
 manager) but this was not yet committed:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout -- path/to/folder
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However in testing, we have not been able to confirm that!
\end_layout

\begin_layout Subsubsection
Remove all uncommitted changes (not just particular files/folders)
\end_layout

\begin_layout Standard
Would somebody tell us the difference in these two approaches?
\end_layout

\begin_layout Standard
Our notes indicate that one can restore all files by using a period as the
 argument for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The expert advice is to use this command to restore an entire project:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git reset --hard HEAD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that destroys all edits in files and it applies throughout the repository,
 not just in a directory.
 It is a sledge hammer, in other words.
 See below section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:reset-hard-soft-mixed"

\end_inset

 for comparison of reset with 
\begin_inset Quotes eld
\end_inset

hard
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

mixed
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

soft
\begin_inset Quotes erd
\end_inset

 variants.
\end_layout

\begin_layout Subsubsection
Committed revisions: retrieve one file that was removed
\end_layout

\begin_layout Standard
In the past, you deleted a file and committed that deletion.
 Now you want that file back.
 Because the file was deleted, it is not possible to open it in Emacs and
 ask for a previous version.
\end_layout

\begin_layout Standard
You don't want the entire project restored to the old state.
 You just want one file.
 
\end_layout

\begin_layout Standard
There is good guidance in a Stack Overflow post 
\begin_inset CommandInset href
LatexCommand href
name "Find and Rstore a deleted file"
target "https://stackoverflow.com/a/1113140/1086346"
literal "false"

\end_inset

.
 We have tested that suggestion and it worked.
 The use case concerns our guide 43, the KU Thesis guide, in which we inadverten
tly deleted 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KU-thesis-20170413.zip
\end_layout

\end_inset

.
 We did not realize that until several commits later.
 
\end_layout

\begin_layout Standard
Step 1.
 Find the commit that deleted the file, then get the name of the commit
 that was one before the deletion occurred:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rev-list -n 1 HEAD -- KU-thesis-20170413.zip
\end_layout

\begin_layout Plain Layout

d7659613779433e35d8b5b1a5e342f8593271eb3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Step 2.
 Retrieve the required file from that commit:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout d7659^ -- KU-thesis-20170413.zip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After that, there is no return value (silence means success!) and the file
 is found in the working directory.
\end_layout

\begin_layout Standard
In this example, we used only the first 5 symbols in the commit name, but
 it is allowed (does work) to include the full long name:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout d7659613779433e35d8b5b1a5e342f8593271eb3^ -- KU-thesis-20170413.zi
p
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
git reset –
\begin_inset space \thinspace{}
\end_inset

-hard to restore files in a project 
\begin_inset CommandInset label
LatexCommand label
name "subsec:reset-hard-soft-mixed"

\end_inset


\end_layout

\begin_layout Standard
The questions are 
\begin_inset Quotes eld
\end_inset

where do you want to restore from?
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

what have you done so far?
\begin_inset Quotes erd
\end_inset

.
 If you did not make any commits yet, this will put files back the way they
 were.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git reset --hard HEAD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We need to fill in details later.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
A 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
--hard
\end_layout

\end_inset

 reset will destroy (remove) edits.
 
\end_layout

\begin_layout Standard
A 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
--soft
\end_layout

\end_inset

 reset will restore files, but attempt to retain edits.
\end_layout

\begin_layout Standard
The symbol 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD
\end_layout

\end_inset

 indicates the state to which you intend to return (possibly with edits).
 It means the most recent commit.
 Note the difference between 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD~1
\end_layout

\end_inset

 here.
 The former simply undoes edits but it does not alter anything that was
 committed.
 On the other hand, the latter will 
\begin_inset Quotes eld
\end_inset

peal off
\begin_inset Quotes erd
\end_inset

 one commit from history.
 See next subsection.
\end_layout

\begin_layout Subsubsection
git reset –
\begin_inset space \thinspace{}
\end_inset

-soft to undo a commit, but leave files unchanged
\end_layout

\begin_layout Standard
If you have committed the changes, but decide you want to undo the commit,
 but leave your edits in the files, then do
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git reset --soft HEAD~
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD~
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

the commit before the most recent one
\begin_inset Quotes erd
\end_inset

.
 It means the same thing as 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD~
\end_layout

\end_inset

1
\begin_inset Quotes erd
\end_inset

 and, so far as we can tell,
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD^
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (depending on the OS or git version, we have seen all of these notations).
 This soft reset does not remove your edits, it just uncommits them, so
 you can continue to revise before committing.
\end_layout

\begin_layout Standard
Scenarios for this: your previous commit accidentally deleted some files
 that you want to restore.
 But it also has valuable edits that you do not want to re-type.
 This commit leaves your revisions, but restores deleted files and the logs
 of the project will not show any records on the accidental deletion and
 restoration.
\end_layout

\begin_layout Subsection
Copy one file from a branch
\end_layout

\begin_layout Standard
If you need a file that exists on a different branch, but you don't want
 to merge the whole branch onto the current branch, the individual file
 can be retrieved.
 The syntax is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout SourceBranch -- filename1 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will replace 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
filename1
\end_layout

\end_inset

 in the current directory, so make a safe copy of the file before doing
 this.
\end_layout

\begin_layout Standard
First, check out the target branch, which in this case is 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
master
\end_layout

\end_inset

:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout master
\end_layout

\begin_layout Plain Layout

Switched to branch 'master'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bring the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Dugout.txt
\end_layout

\end_inset

 file from the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kk-baseball
\end_layout

\end_inset

 branch to the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
master
\end_layout

\end_inset

 branch.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout kk-baseball -- Dugout.txt
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Reverse accidental edits on the wrong branch.
\begin_inset CommandInset label
LatexCommand label
name "subsection:reset"

\end_inset


\end_layout

\begin_layout Standard
A usual scenario is that you wanted to work on a branch named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

 but you accidentally edited on the master branch.
 You want to
\end_layout

\begin_layout Enumerate
Save your edits
\end_layout

\begin_layout Enumerate
Restore accidentally revised local master
\end_layout

\begin_layout Standard
The easy approach, which we describe here, assumes that there is a remote.
 
\emph on
Assume you did not push yet
\emph default
.
 But you pulled recently.
 This means 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset

 is a 
\emph on
reasonable fallback position
\emph default
.
 This approach is one of the many suggested answers in Stack Overflow, 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "How to fix committing to the wrong Git branch?"
target "https://stackoverflow.com/questions/2941517/how-to-fix-committing-to-the-wrong-git-branch/21605987?sgp=2#21605987"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
Recover from origin/master
\end_layout

\begin_layout Standard
The local copy of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
origin/master
\end_layout

\end_inset

 will be used to set the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
master
\end_layout

\end_inset

 branch where it ought to be.
 When we are done, a temporary branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-temp
\end_layout

\end_inset

 will have the edits from the current working directory.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git stash                   # skip if all changes are committed
\end_layout

\begin_layout Plain Layout

$ git branch pj-temp
\end_layout

\begin_layout Plain Layout

$ git reset --hard origin/master
\end_layout

\begin_layout Plain Layout

$ git checkout pj-temp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We put our non-committed edits out of the way with 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git stash
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:git-stash"

\end_inset

).
 We put the master branch where it needed to be, but we shift into the file
 set of the branch we intended to edit from the beginning.
 The reset put the files back where they were to start with.
 We have a new branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-temp
\end_layout

\end_inset

.
 We check that out, and we can begin editing again, but we might save some
 work by re-applying the stashed edits.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git stash pop               # skip if all changes were committed
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The history of the commits will make it look as though your branch was up
 to date before you started editing.
\end_layout

\begin_layout Standard
Master will be reset to the state it had at the last time it was pulled
 or pushed from the remote.
 
\end_layout

\begin_layout Standard
This creates a new branch 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-temp
\end_layout

\end_inset

, of course.
 If you want to go back and put the work on 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

, the approach is obvious.
 Commit changes on 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-temp
\end_layout

\end_inset

, then checkout 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pj-fix
\end_layout

\end_inset

, and run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git merge pj-temp
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
If the aim is to restore a branch that is not being tracked remotely, then
 some 
\begin_inset Quotes eld
\end_inset

roll up your sleeves
\begin_inset Quotes erd
\end_inset

 effort is needed.
 Rather than trying to write out all of the possible answers, we'll wait
 until these problems actually happen and keep good notes on the fixes,
 to add here later.
\end_layout

\begin_layout Subsection
Undo Merge
\begin_inset CommandInset label
LatexCommand label
name "subsec:undo_merge"

\end_inset


\end_layout

\begin_layout Standard
Suppose you run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git merge lemon
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 and you instead wanted to run 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git merge orange
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 If the merge causes a lot of peculiar changes in your files, you want to
 reverse the merge and pretend it never happened.
 
\end_layout

\begin_layout Standard
The right answer depends on whether you notice this right away, or only
 after making some additional edits and commits, or if you have already
 pushed this to a remote.
 If you have already pushed an erroneous merge to the remote, the situation
 is very serious because other team members might already have updated against
 your error.
 
\end_layout

\begin_layout Standard
If the simple strategies we suggest here fail, it may be necessary to wade
 into some very long threads on Stack Overflow, such as 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Undo a Git merge that hasn't been pushed yet"
target "https://stackoverflow.com/questions/2389361/undo-a-git-merge-that-hasnt-been-pushed-yet"
literal "false"

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection*
If there are merge conflicts:
\end_layout

\begin_layout Standard
If Git tries to combine the files and fails, there will be a message that
 the conflicts need to be resolved before proceeding.
 This is the best case scenario, because the merge was not finished and
 so it is relatively easy to undo it.
 If your Git version is recent, try
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git merge --abort
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The syntax in previous versions of Git for same was 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git reset -
\begin_inset space ~
\end_inset

-merge
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection*
If there are no merge conflicts:
\end_layout

\begin_layout Standard
If there are no merge conflicts, then Git thinks the merge went well, but
 you still don't want it.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git reset --merge HEAD^
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This peals off one commit, which was your merge commit (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD^
\end_layout

\end_inset

 is same as identical to 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
HEAD~1
\end_layout

\end_inset

.).
 It is possible to step back in time to any previous commit SHA1 value,
 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git reset --merge SHA
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
-
\begin_inset space \thinspace{}
\end_inset

-merge
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 argument is a special adaption for this situation, it is often suggested
 to use the general purpose 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
-
\begin_inset space \thinspace{}
\end_inset

-hard
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to step back in time by throwing away commits.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git reset --hard HEAD^
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
If other files were edited after the merge:
\end_layout

\begin_layout Standard
Running 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
git reset -
\begin_inset space \thinspace{}
\end_inset

-hard commit_SHA
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 will move the current project back to the commit_SHA that you designate.
 It will obliterate other edits that you have made since then in other files
 that are not linked to the merged changes.
 
\end_layout

\begin_layout Standard
The following is likely to preserve the edits that occurred since the merge
 (
\emph on
hopefully
\emph default
).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git reset --merge ORIG_HEAD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset Quotes eld
\end_inset

ORIG_HEAD
\begin_inset Quotes erd
\end_inset

 is a literal string, not a name of a SHA to find.
\end_layout

\begin_layout Subsubsection*
If you committed and pushed the merge:
\end_layout

\begin_layout Standard
This is a somewhat dire situation.
 If teammates have not pulled yet, then this seems to be the suggested answer:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git revert -m 1 commit_SHA
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset Quotes eld
\end_inset

commit_SHA
\begin_inset Quotes erd
\end_inset

 is the SHA of the revision.
\end_layout

\begin_layout Subsection
Re-sequence edits 
\begin_inset Quotes eld
\end_inset

on top
\begin_inset Quotes erd
\end_inset

 of master (rebase)
\end_layout

\begin_layout Standard
This has happened more than once.
 
\end_layout

\begin_layout Enumerate
User forgets to run 
\begin_inset Quotes eld
\end_inset

git pull
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Enumerate
User makes branch from (old/outdated) master.
\end_layout

\begin_layout Enumerate
User later runs the standard four-step sequence (Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Standard-Four-Step"

\end_inset

) to update a branch against master.
 
\end_layout

\begin_layout Standard
The commit histories will be blended chronologically.
 A review of the log may make the sequence seem incoherent.
 The author on the master branch has a message saying 
\begin_inset Quotes eld
\end_inset

deleted feature 123
\begin_inset Quotes erd
\end_inset

 and then right after that a branch message says 
\begin_inset Quotes eld
\end_inset

fixed feature 123
\begin_inset Quotes erd
\end_inset

.
 The chaotic history from the merge is usually not a serious source of concern
 for our projects.
 
\end_layout

\begin_layout Standard
Fixing the content of the edits is our main concern and we need to rescue
 whatever fixes we can get from the branch and put them to use in the future.
 If the Git merge fails, then there maybe be 100s of conflict sections in
 the merge files.
 It may be next to impossible to figure out what should be done.
 
\end_layout

\begin_layout Standard
In all honesty, we might not use Git to fix this.
 In many of our real life research situations, we do not bother to go down
 in the Git weeds.
 We make a brand new branch from an up-to-date master, and then hand-edit
 files to integrate the changes that were worked out in the branch that
 we are trying to recover.
 In terms of programmer time, the author of the code in the new branch is
 most likely to be able to tell which edits are useful and need to be integrated.
\end_layout

\begin_layout Standard
However, it may be easier to do this with Git if you understand some benefits
 of re-organizing the information.
 Here is a good plan when a git merge has conflicts and the edits are too
 complicated.
 First, abort the merge, as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:undo_merge"

\end_inset

.
 Second, rebase the branch.
 The effect is as follows.
 Peel off all of the edits on the branch, put a fully up-to-date master
 branch in place, and then try to apply the revisions of the current branch.
 The premise behind this is that the master branch is always correct and
 a user's branch is a proposed improvement in a feature of the master branch.
 The author of the branch should update against master, then start re-applying
 the changes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout my_local_branch
\end_layout

\begin_layout Plain Layout

$ git rebase master my_local_branch
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The conflicted files must be 
\emph on
edite
\emph default
d, one by one, 
\emph on
manually
\emph default
.
 Each one must be added.
 In this context, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
add
\end_layout

\end_inset

 means to notify git that the file is now corrected.
 This must be done for each and every conflicted file.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git add name_of_conflicted_file
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then finish integrating the project.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git rebase --continue
\end_layout

\end_inset

The benefit of doing it the Git way is that the project history–the output
 of 
\begin_inset Quotes eld
\end_inset

git log
\begin_inset Quotes erd
\end_inset

–might be more meaningful.
 If one takes our simpler method of having a programmer put the changes
 into a new branch, we'll come out of it with one commit that summarizes
 the changes, but not much history.
 
\end_layout

\begin_layout Subsection
Interactively merge revisions
\end_layout

\begin_layout Standard
The Git merge function described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:git merge"

\end_inset

 is a bit blunt.
 It is an all-or-nothing decision.
 All of the changes are accepted.
 Or none.
 Git uses text merging algorithms to combine all of the edits from one branch.
 It may not guess correctly what should be merged.
 
\end_layout

\begin_layout Standard
There are more subtle methods.
 One is the interactive merge.
\end_layout

\begin_layout Standard
Suppose 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
X.R
\end_layout

\end_inset

 exists on the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
soccer
\end_layout

\end_inset

 branch.
 Adding 
\begin_inset Quotes eld
\end_inset

-p
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
git checkout
\end_layout

\end_inset

 offers an interactive patch-importer that will pull over the file X.R and
 merge it with the one in our current branch:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git checkout -p soccer -- X.R
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It launches an interactive chooser.
 Git shows differences and asks
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Apply this hunk to index and worktree [y,n,q,a,d,/,e,?]?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Entering 
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

 will return an explanation of the given options:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

y - apply this hunk to index and worktree
\end_layout

\begin_layout Plain Layout

n - do not apply this hunk to index and worktree
\end_layout

\begin_layout Plain Layout

e - manually edit the current hunk
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Entering 
\begin_inset Quotes eld
\end_inset

e
\begin_inset Quotes erd
\end_inset

 will open the editor for you to enter an message.
 Lines beginning with 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 will be deleted, and lines beginning with 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

 will be added.
 In order to prevent lines from being added, delete the lines in question.
 In order to prevent lines from being deleted, delete the 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 sign.
 Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-Oh no! This line will be deleted! Let's save it!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
becomes
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 Oh no! This line will be deleted! Let's save it!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
which will now remain in the document after editing.
 If the editor is Vi, exit with the usual 
\begin_inset Quotes eld
\end_inset

Escape : wq
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Section
Concluding Advice
\end_layout

\begin_layout Subsection
Don't Get Carried Away by Russian Teenagers
\end_layout

\begin_layout Standard
There are people who spend all of their time using Git and dealing with
 its nuances.
 If you dip your toes into Stack Overflow, you will find unbelievably diverse
 opinions about how to to even the most basic things.
 
\end_layout

\begin_layout Standard
For example, suppose you want to merge changes selectively from one branch
 into another.
 Even this simple objective can set off a firestorm of differing opinions
 in Stack Overflow:
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "How to merge specific files from Git branches"
target "http://stackoverflow.com/questions/18115411/how-to-merge-specific-files-from-git-branches"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "How do you merge selective files with git-merge?"
target "http://stackoverflow.com/questions/449541/how-do-you-merge-selective-files-with-git-merge"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "How do I merge changes to a single file, rather than merging commits?"
target "http://stackoverflow.com/questions/10784523/how-do-i-merge-changes-to-a-single-file-rather-than-merging-commits"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
The main dilemma is we don't know how long it will take to have the fancy
 solution or be sure it works correctly.
\end_layout

\begin_layout Standard
We are a research unit and we do not want researchers to spend more time
 with version management than necessary.
 This guide is not a comprehensive of everything possible in Git.
 It is a listing of the things that we are pretty sure will work.
 
\end_layout

\begin_layout Subsection
Let us Know What You Find Out (We'll Let You Know What We Find Out)
\end_layout

\begin_layout Standard
From time-to-time, we have problems and, in those cases, somebody has to
 
\end_layout

\begin_layout Enumerate
dig deep in the details and figure out the simplest, least error-prone-method.
\end_layout

\begin_layout Enumerate
write out the answer for insertion in the previous section.
\end_layout

\begin_layout Standard
We only write out answers for problems we have actually encountered.
\end_layout

\begin_layout Standard
If you think you learn something, send us a note.
 We'll try to verify and insert it.
\end_layout

\begin_layout Subsection
Things to Not Do
\end_layout

\begin_layout Standard
We don't have a comprehensive list.
 But here's a start.
\end_layout

\begin_layout Itemize
Avoid running commands you don't fully understand.
 
\end_layout

\begin_layout Itemize
Avoid running that have the word 
\begin_inset Quotes eld
\end_inset

force
\begin_inset Quotes erd
\end_inset

 in them, even if you think you do understand them.
\end_layout

\begin_layout Itemize
Avoid doing things that will confuse teammates, such as rebasing a branch
 after pushing it to a server.
\end_layout

\begin_layout Subsection
Things to Do
\end_layout

\begin_layout Enumerate
Make small test cases.
\end_layout

\begin_deeper
\begin_layout Standard
When in doubt, follow the instructions for Scenario #2 (in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scenario-2"

\end_inset

).
 Make a small example of the problem you think you have.
 Then copy that folder entirely, even zip it so you can be sure you can
 recover it.
 Then try the changes on the minimal example project.
 If your fix fails, delete the copy and unzip the original.
 
\end_layout

\begin_layout Standard
If you don't find a solution, ask in the Git section of  
\begin_inset CommandInset href
LatexCommand href
name "Stack Overflow"
target "https://stackoverflow.com/questions/tagged/git"
literal "false"

\end_inset

.
 If you can give commands to create your troublesome small example, people
 will be more than happy to help.
 They won't help if you just ask a vague question about something that does
 not work.
\end_layout

\begin_layout Standard
It is possible to even make a fake remote server that is a bare repository
 you create in a folder on your computer.
 But we aren't going to write out how to do that.
\end_layout

\end_deeper
\begin_layout Enumerate
Keep verbatim records of what you are doing in the command line.
 If you hit trouble, copy/paste as much of the history as you can into a
 flat text file.
 Don't bother taking a picture of the screen, that's what novices do.
 
\end_layout

\begin_deeper
\begin_layout Standard
While you are still a beginner, find a way to save transcripts of sessions
 when you are typing Git commands.
 We don't know for sure if there is a perfect, universal way to accomplish
 this.
 We are eager to hear from users who have advice.
 We have recommended Emacs shell (or eshell) for this at some points, but
 users on Macintosh systems report some peculiarities.
 
\end_layout

\end_deeper
\begin_layout Enumerate
Try to keep your Git repository clean.
 Delete branches after work on them is finished and merged into the master
 branch.
\end_layout

\end_body
\end_document
