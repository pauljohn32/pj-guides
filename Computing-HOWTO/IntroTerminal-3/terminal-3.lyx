#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble

\usepackage{dcolumn}
\usepackage{booktabs}

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}
\newcommand{\vn}[1]{\mbox{{\it #1}}}\newcommand{\vb}{\vspace{\baselineskip}}\newcommand{\vh}{\vspace{.5\baselineskip}}\newcommand{\vf}{\vspace{\fill}}\newcommand{\splus}{\textsf{S-PLUS}}\newcommand{\R}{\textsf{R}}


\usepackage{graphicx}
\usepackage{listings}

\mode<presentation>
{
  \usetheme{KU}
  \usecolortheme{dolphin} %dark blues
}

\usepackage{fancyvrb}
% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}



\providecommand{\Rcolor}{\color[rgb]{0, 0.5, 0.5}}
\providecommand{\Routcolor}{\color[rgb]{0.461, 0.039, 0.102}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.043, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}


\lstdefinestyle{Rstyle}{fancyvrb=false,escapechar=`,language=R,%
                        basicstyle={\Rcolor\Sweavesize},%
                        backgroundcolor=\Rbackground,%
                        showstringspaces=false,%
                        keywordstyle=\Rcolor,%
                        commentstyle={\Rcommentcolor\ttfamily\itshape},%
                        literate={<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$^{\scriptstyle\wedge}$}}1,%
                        alsoother={$},%
                        alsoletter={.<-},%
                        otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                        escapeinside={(*}{*)}}%
% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routstyle}{fancyvrb=false,literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
 frame=single,framerule=0.2pt,framesep=1pt,basicstyle=\Routcolor\Sweavesize,%
 backgroundcolor=\Routbackground}


\lstnewenvironment{Sinput}{\lstset{style=Rstyle}}{}
\lstnewenvironment{Scode}{\lstset{style=Rstyle}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routstyle}}{}


\lstset{tabsize=2, breaklines=true,style=Rstyle}
%\usetheme{Warsaw}
% or ...

%\setbeamercovered{transparent}
% or whatever (possibly just delete it)



%%not for article, but for presentation
\mode<presentation>
%\newcommand\makebeamertitle{\frame{\maketitle}}

\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}


\expandafter\def\expandafter\insertshorttitle\expandafter{%
 \insertshorttitle\hfill\insertframenumber\,/\,\inserttotalframenumber}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\is_math_indent 0
\math_numbering_side default
\quotes_style swedish
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title (Plain Frame)
Managing & Compiling Software
\end_layout

\begin_layout Subtitle
Terminal Intro (Vol 3)
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Terminal 3
\end_layout

\end_inset


\end_layout

\begin_layout Author
Paul E.
 Johnson
\begin_inset Newline newline
\end_inset

Prof., Political Science
\begin_inset Newline newline
\end_inset

Center for Research Methods and Data Analysis
\end_layout

\begin_layout Institute
University of Kansas
\end_layout

\begin_layout Date
2018
\begin_inset Argument 1
status open

\begin_layout Plain Layout
2018
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Software Orientation
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Ideas about Programming
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What are the simplest things that uninformed smart people want to know about
 software development?
\end_layout

\begin_layout Standard
Here are my guesses
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
1.
 What does 
\begin_inset Quotes eld
\end_inset

compiled
\begin_inset Quotes erd
\end_inset

 mean?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Answer: Programs are written in words, which then get translated into executable
 
\begin_inset Quotes eld
\end_inset

code
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
Compiled: means 
\begin_inset Quotes eld
\end_inset

digested
\begin_inset Quotes erd
\end_inset

 into 
\begin_inset Quotes eld
\end_inset

low level machine code,
\begin_inset Quotes erd
\end_inset

 it is something the system can 
\begin_inset Quotes eld
\end_inset

run
\begin_inset Quotes erd
\end_inset

 directly using the language of the Operating System.
 
\end_layout

\begin_layout Description
Executable: A program that is compiled is saved in a 
\begin_inset Quotes eld
\end_inset

binary
\begin_inset Quotes erd
\end_inset

 (non-human-readable) format and the computer ran execute the commands in
 the file.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Problem: Compiled = Machine Dependent
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Compiled code cannot be translated from one operating system to another
 (Mac programs don't run on Windows, etc).
\end_layout

\begin_layout Itemize
Translation of code for one type of machine to another may be 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
tedious
\end_layout

\begin_layout Itemize
expensive
\end_layout

\begin_layout Itemize
impossible
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Quest for Fast, Platform Independent Code
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Compiled languages search for cross-platform 
\begin_inset Quotes eld
\end_inset

toolkits
\begin_inset Quotes erd
\end_inset

 to reduce need for customization when moving across platforms (widget sets
 and GUI interface frameworks like GTK and QT).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
If the toolkit writer deals with the cross-platform problems, then our user
 oriented software is more easily converted
\end_layout

\begin_layout Itemize
Avoid writing programs that depend on a library that exists only on one
 platform
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Partially Compiled Alternatives
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Java is an alternative strategy.
 Re-think compilation into a 3 state process.
\end_layout

\begin_layout Enumerate
compile into a nearly-runable, machine independent format (Java byte code)
\end_layout

\begin_layout Enumerate
create devices for each type of computer that can receive output from step
 1
\end_layout

\begin_layout Enumerate
run the program 
\begin_inset Quotes eld
\end_inset

within
\begin_inset Quotes erd
\end_inset

 the 
\begin_inset Quotes eld
\end_inset

runtime
\begin_inset Quotes erd
\end_inset

 layer (Java virtual machine).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
allowframebreaks
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
2.
 What does 
\begin_inset Quotes eld
\end_inset

interpreted
\begin_inset Quotes erd
\end_inset

 mean?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Think of the BASH shell.
 Commands you can run one-by-one can be collected into a text file, which
 can be run.
 
\end_layout

\begin_layout Itemize
It runs 
\emph on
as if
\emph default
 you were typing the instructions, one by one.
\end_layout

\begin_layout Itemize
Many programs have 
\begin_inset Quotes eld
\end_inset

interpreters
\begin_inset Quotes erd
\end_inset

, that can accept instructions one by one
\end_layout

\begin_deeper
\begin_layout Itemize
Examples: SAS, SPSS, Stata, R, Perl, Python.
 
\end_layout

\end_deeper
\begin_layout Itemize
We invoke the R interpreter to scan through the commands and do what we
 want, line by line.
\end_layout

\begin_deeper
\begin_layout Itemize
Your code is interpreted by a program that is running.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
There is a 
\begin_inset Quotes eld
\end_inset

gray area
\begin_inset Quotes erd
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

interpreted languages,
\begin_inset Quotes erd
\end_inset

 authors try to find speedups with 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

byte-compiling
\begin_inset Quotes erd
\end_inset

 of particular parts of a script
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

just in time compiling
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{"Run" a Script = Tell a Program To Interpret It}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Save a text file, name it anything you want.
\end_layout

\begin_layout Itemize
Many interpreters will receive a file name as a command line argument
\end_layout

\begin_layout Itemize
Details vary about how they want us to provide the command line arguments
 (I've complained to you before about some programs want 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
--arg=fname
\end_layout

\end_inset

 while others want 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
--arg fname
\end_layout

\end_inset

 and another wants 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-arg fname
\end_layout

\end_inset

, etc
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
framebreak
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Examples:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

$ R -f myRfile.R
\end_layout

\begin_layout Plain Layout

$ R -f myRfile.R > myRfile.Rout 2>&1
\end_layout

\begin_layout Plain Layout

$ R CMD BATCH myRfile.R
\end_layout

\begin_layout Plain Layout

$ perl somePerlFile.pl
\end_layout

\begin_layout Plain Layout

$ sas mySAScode.sas
\end_layout

\begin_layout Plain Layout

$ bash myBashScript.sh
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Note 1: Explicitly names the interpreter as 1st argument
\end_layout

\begin_layout Itemize
Note 2: The file is found in the current working directory (no 
\begin_inset Quotes eld
\end_inset

./
\begin_inset Quotes erd
\end_inset

 needed, but would be allowed)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Reminder: an executable program}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A script that is executable will have 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

 in the 
\begin_inset Quotes eld
\end_inset

rwx
\begin_inset Quotes erd
\end_inset

 output from 
\begin_inset Quotes eld
\end_inset

ls -la
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
If a script is executable, then to run from current directory we need to
 add 
\begin_inset Quotes eld
\end_inset

./
\begin_inset Quotes erd
\end_inset

 with its name in order to run it:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./a_script_name.sh
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To make a script executable, run
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ chmod u+x a_script_name.sh
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
applies only for user.
 
\end_layout

\begin_layout Itemize
can also allow execution by users in same group by 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ chmod ug+x a_script_name.sh
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If a script is not marked executable, it can still be run by giving the
 name of the interpreter program, as shown on previous slide
\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

./
\begin_inset Quotes erd
\end_inset

 trick only works if the script has a 
\begin_inset Quotes eld
\end_inset

shebang
\begin_inset Quotes erd
\end_inset

 in line 1 (see next)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Shortcut to run Scripts: The 
\backslash
#! shebang line}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The 
\begin_inset Quotes eld
\end_inset

shebang
\begin_inset Quotes erd
\end_inset

 line is always line 1
\end_layout

\begin_layout Itemize
That line tells the OS what interpreter should be used to run the script.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

#!/usr/bin/Rscript --vanilla
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

#!/usr/local/bin/perl
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Make a general purpose script}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
So far, it seems necessary to copy 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
a_script_name.sh
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to each new folder when you want to run it.
 
\end_layout

\begin_layout Itemize
However, that is not necessary if you copy the executable script somewhere
 into the system PATH.
\end_layout

\begin_deeper
\begin_layout Itemize
recall 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
echo $PATH
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 to see path.
\end_layout

\end_deeper
\begin_layout Itemize
Usual locations for user-written scripts are
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
$HOME/bin
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
/usr/local/bin
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
After that, it can be run anywhere.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

$ a_script_name.sh some_file_you_want
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If it is not in the path, then tedious options remain:
\end_layout

\begin_deeper
\begin_layout Itemize
Copy the script every time you want to use it
\end_layout

\begin_layout Itemize
Write out the full path on the command line
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Sinput}
\end_layout

\begin_layout Plain Layout

$ /home/pauljohn/somefolder/version1/myRFile.R
\end_layout

\begin_layout Plain Layout


\backslash
end{Sinput}	
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Sometimes I have trouble making Rscript work right, but here's an example
 of one time it worked with a file called 
\begin_inset Quotes eld
\end_inset

plot-xsplines.R
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ chmod +x plot-xspline.R
\end_layout

\begin_layout Plain Layout

$ ./plot-xspline.R 
\end_layout

\begin_layout Plain Layout

[1] 0.4292893 0.5707107 
\end_layout

\begin_layout Plain Layout

attr(,"bisector") 
\end_layout

\begin_layout Plain Layout

function (x) (A2 * z[2] - B2 * z[1])/A2 + (B2/A2) * x
\end_layout

\begin_layout Plain Layout

<environment: 0x393c828>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Disadvantage of Interpreted Code
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Interpretation happens in real time, and is usually much slower than a compiled
 program doing same work
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Advantages of Interpreted Code
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
human readability.
\end_layout

\begin_layout Enumerate
ease of transport between different Operating Systems.
 (Its Just text.
 Except for character encoding, this is trouble-free)
\end_layout

\begin_layout Enumerate
R-2.14 introduced byte-compiling for functions 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
R can access libraries of compiled code
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Routines requiring high performance are written in C, C++, Objective-C,
 Java, etc.
\end_layout

\begin_layout Itemize
R has a foreign function interface to allow the R system to exchange data
 with compiled code.
\end_layout

\begin_layout Itemize
Many R packages include both R code and an 
\begin_inset Quotes eld
\end_inset

src
\begin_inset Quotes erd
\end_inset

 (code!) folder that needs to be compiled.
\end_layout

\begin_layout Itemize
Look in the R code for access points (Search for symbols like 
\begin_inset Quotes eld
\end_inset

.C
\begin_inset Quotes erd
\end_inset

 which accesses a C library).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
3.
 What is a Shared Object Library?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Library: a collection of functions that has been compiled into a file.
\end_layout

\begin_layout Itemize
In Windows: dynamic link libraries have the extension 
\begin_inset Quotes eld
\end_inset

dll
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Linux, Mac: these have extension 
\begin_inset Quotes eld
\end_inset

.so
\begin_inset Quotes erd
\end_inset

 and are called 
\begin_inset Quotes eld
\end_inset

Shared Object
\begin_inset Quotes erd
\end_inset

 files.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not Sharing is Bad
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Statically
\begin_inset space \space{}
\end_inset

Compiled
\begin_inset space \space{}
\end_inset

Program.
 Everything the program uses is 
\begin_inset Quotes eld
\end_inset

compiled into it
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Consequence: if 10 people run that program, then 10xRAM is being used because
 each instance is completely separate.
\end_layout

\begin_layout Description
Shared
\begin_inset space ~
\end_inset

Library: In RAM once, can be used by many programs by many users
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Want to See your Shared Libraries?}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In Linux, try this command:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Plain Layout

$ /sbin/ldconfig -p | more
\end_layout

\begin_layout Plain Layout

2480 libs found in cache '/etc/ld.so.cache'
\end_layout

\begin_layout Plain Layout

        libzzipwrap-0.so.13 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzzipwra
p-0.so.13
\end_layout

\begin_layout Plain Layout

        libzzipmmapped-0.so.13 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzzip
mmapped-0.so.13
\end_layout

\begin_layout Plain Layout

        libzzipfseeko-0.so.13 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzzipf
seeko-0.so.13
\end_layout

\begin_layout Plain Layout

        libzzip-0.so.13 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzzip-0.so.13
\end_layout

\begin_layout Plain Layout

        libzvbi.so.0 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzvbi.so.0
\end_layout

\begin_layout Plain Layout

        libzvbi-chains.so.0 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzvbi-ch
ains.so.0
\end_layout

\begin_layout Plain Layout

        libzstd.so.1 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzstd.so.1
\end_layout

\begin_layout Plain Layout

        libzmq.so.5 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzmq.so.5
\end_layout

\begin_layout Plain Layout

        libzip.so.4 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzip.so.4
\end_layout

\begin_layout Plain Layout

        libzephyr.so.4 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzephyr.so.4
\end_layout

\begin_layout Plain Layout

        libzeitgeist-2.0.so.0 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzeitge
ist-2.0.so.0
\end_layout

\begin_layout Plain Layout

        libzbar.so.0 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libzbar.so.0
\end_layout

\begin_layout Plain Layout

        libz.so.1 (libc6,x86-64) => /lib/x86_64-linux-gnu/libz.so.1
\end_layout

\begin_layout Plain Layout

        libz.so.1 (libc6) => /lib/i386-linux-gnu/libz.so.1
\end_layout

\begin_layout Plain Layout

        libz.so (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libz.so
\end_layout

\begin_layout Plain Layout

        libyelp.so.0 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libyelp.so.0
\end_layout

\begin_layout Plain Layout

        libyaml-0.so.2 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libyaml-0.so.2
\end_layout

\begin_layout Plain Layout

        libyaml-cpp.so.0.5 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libyaml-cpp.s
o.0.5
\end_layout

\begin_layout Plain Layout

        libyajl.so.2 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libyajl.so.2
\end_layout

\begin_layout Plain Layout

        libx265.so.146 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libx265.so.146
\end_layout

\begin_layout Plain Layout

        libx264.so.152 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libx264.so.152
\end_layout

\begin_layout Plain Layout

        libx86.so.1 (libc6,x86-64) => /lib/x86_64-linux-gnu/libx86.so.1
\end_layout

\begin_layout Plain Layout

        libxvidcore.so.4 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libxvidcore.so.
4
\end_layout

\begin_layout Plain Layout

        libxtables.so.12 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libxtables.so.1
2
\end_layout

\begin_layout Plain Layout

        libxslt.so.1 (libc6,x86-64) => /usr/lib/x86_64-linux-gnu/libxslt.so.1
\end_layout

\begin_layout Plain Layout

        libxslt.so.1 (libc6) => /usr/lib/i386-linux-gnu/libxslt.so.1
\end_layout

\begin_layout Plain Layout

[snip]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
On my system, the files in 
\begin_inset Quotes eld
\end_inset

/etc/ld.so.conf.d
\begin_inset Quotes erd
\end_inset

 include a list of directories that are scanned by ldconfig:
\end_layout

\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ cat /etc/ld.so.conf.d/*
\end_layout

\begin_layout Plain Layout

/usr/lib/x86_64-linux-gnu/libfakeroot
\end_layout

\begin_layout Plain Layout

# Multiarch support
\end_layout

\begin_layout Plain Layout

/usr/local/lib/i386-linux-gnu
\end_layout

\begin_layout Plain Layout

/lib/i386-linux-gnu
\end_layout

\begin_layout Plain Layout

/usr/lib/i386-linux-gnu
\end_layout

\begin_layout Plain Layout

/usr/local/lib/i686-linux-gnu
\end_layout

\begin_layout Plain Layout

/lib/i686-linux-gnu
\end_layout

\begin_layout Plain Layout

/usr/lib/i686-linux-gnu
\end_layout

\begin_layout Plain Layout

# libc default configuration
\end_layout

\begin_layout Plain Layout

/usr/local/lib
\end_layout

\begin_layout Plain Layout

# Multiarch support
\end_layout

\begin_layout Plain Layout

/usr/local/lib/x86_64-linux-gnu
\end_layout

\begin_layout Plain Layout

/lib/x86_64-linux-gnu
\end_layout

\begin_layout Plain Layout

/usr/lib/x86_64-linux-gnu
\end_layout

\begin_layout Plain Layout

# Legacy biarch compatibility support
\end_layout

\begin_layout Plain Layout

/lib32
\end_layout

\begin_layout Plain Layout

/usr/lib32
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
4.
 What is a 
\begin_inset Quotes eld
\end_inset

Compiler
\begin_inset Quotes erd
\end_inset

?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A 
\begin_inset Quotes eld
\end_inset

compiler
\begin_inset Quotes erd
\end_inset

 is a program
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
That compiles other programs
\end_layout

\end_deeper
\begin_layout Itemize
The GNU Compiler Collection (GCC) is a leading open source/free compiler.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
command
\begin_inset space ~
\end_inset

line
\begin_inset space ~
\end_inset

invocation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gcc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
g++
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fortran 77
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
gfortran
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
5.
 What is Optimization?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Human readable code may run slowly
\end_layout

\begin_layout Itemize
Compiler settings can dial up optimization, at the expense of making the
 executable
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
larger
\end_layout

\begin_layout Itemize
less stable
\end_layout

\begin_layout Itemize
more difficult to debug
\end_layout

\end_deeper
\begin_layout Itemize
Best advice: Write a program that is understandable, then 
\begin_inset Quotes eld
\end_inset

profile
\begin_inset Quotes erd
\end_inset

 it to see where the 
\begin_inset Quotes eld
\end_inset

bottlenecks
\begin_inset Quotes erd
\end_inset

 are.
 Then rewrite code to use clever algorithms.
\end_layout

\begin_layout Itemize
Experience is required, only practice and experimentation will teach good
 coding style.
\end_layout

\end_deeper
\begin_layout Section
R Package Compilation
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{In Linux, Installation of R Packages Requires A Compiler}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Packages for Linux are not 
\begin_inset Quotes eld
\end_inset

pre-compiled
\begin_inset Quotes erd
\end_inset

, it is necessary to have compilers and support libraries installed.
 
\end_layout

\begin_layout Itemize
Packages may have Fortran, C, C++, Objective-C, or Java code.
\end_layout

\begin_layout Itemize
Consider, for example, the package 
\begin_inset Quotes eld
\end_inset

rgeos
\begin_inset Quotes erd
\end_inset

.
 Download the source code from a CRAN mirror (example: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://rweb.quant.ku.edu/cran/web/packages/index.html
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
I downloaded rgeos_0.3-28.tar.gz.
 
\emph on
Untar
\emph default
 that! what did I get:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

$ tar xzvf rgeos_0.3-28.tar.gz
\end_layout

\begin_layout Plain Layout

rgeos/
\end_layout

\begin_layout Plain Layout

rgeos/inst/
\end_layout

\begin_layout Plain Layout

[snip]
\end_layout

\begin_layout Plain Layout

rgeos/configure.ac
\end_layout

\begin_layout Plain Layout

rgeos/tests/
\end_layout

\begin_layout Plain Layout

rgeos/tests/testthat/
\end_layout

\begin_layout Plain Layout

[snip]
\end_layout

\begin_layout Plain Layout

rgeos/tests/test-all.R
\end_layout

\begin_layout Plain Layout

rgeos/src/
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_R2geosMP.c
\end_layout

\begin_layout Plain Layout

rgeos/src/local_stubs.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_linearref.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_topology.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_geos2R.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_predicate_unary.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_wkt.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_predicate_binary.c
\end_layout

\begin_layout Plain Layout

rgeos/src/dummy.cc
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_buffer.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_bbox.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_coord.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_misc.c
\end_layout

\begin_layout Plain Layout

rgeos/src/Makevars.in
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos.h
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_topology_binary.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_validate.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_R2geos.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos.c
\end_layout

\begin_layout Plain Layout

rgeos/src/rgeos_poly2nb.c
\end_layout

\begin_layout Plain Layout

rgeos/src/Makevars.win
\end_layout

\begin_layout Plain Layout

rgeos/src/init.c
\end_layout

\begin_layout Plain Layout

rgeos/NAMESPACE
\end_layout

\begin_layout Plain Layout

rgeos/R/
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_linearref.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_misc.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_predicate_unary.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_topology_binary.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_topology.R
\end_layout

\begin_layout Plain Layout

rgeos/R/labelpt.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_util.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_spExtensions_Classes.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_buffer.R
\end_layout

\begin_layout Plain Layout

rgeos/R/Rgpc_funcs.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_spExtensions_Methods.R
\end_layout

\begin_layout Plain Layout

rgeos/R/bbox2SP.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_predicate_binary.R
\end_layout

\begin_layout Plain Layout

rgeos/R/rgeos_wkt.R
\end_layout

\begin_layout Plain Layout

rgeos/R/gpc_geos.R
\end_layout

\begin_layout Plain Layout

rgeos/R/AAA.R
\end_layout

\begin_layout Plain Layout

rgeos/R/over.R
\end_layout

\begin_layout Plain Layout

rgeos/MD5
\end_layout

\begin_layout Plain Layout

rgeos/DESCRIPTION
\end_layout

\begin_layout Plain Layout

rgeos/LICENSE.note
\end_layout

\begin_layout Plain Layout

rgeos/configure
\end_layout

\begin_layout Plain Layout

rgeos/ChangeLog
\end_layout

\begin_layout Plain Layout

rgeos/man/
\end_layout

\begin_layout Plain Layout

[snip]
\end_layout

\begin_layout Plain Layout

rgeos/cleanup
\end_layout

\begin_layout Plain Layout

rgeos/tools/
\end_layout

\begin_layout Plain Layout

rgeos/tools/winlibs.R
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Inside 
\begin_inset Quotes eld
\end_inset

src
\begin_inset Quotes erd
\end_inset

, look at all of the c file!
\end_layout

\begin_layout Itemize
Brief itemization
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
files ending in 
\begin_inset Quotes eld
\end_inset

.h
\begin_inset Quotes erd
\end_inset

: C 
\begin_inset Quotes eld
\end_inset

header files
\begin_inset Quotes erd
\end_inset

.
 (functions are promised)
\end_layout

\begin_layout Itemize
files ending in 
\begin_inset Quotes eld
\end_inset

.c
\begin_inset Quotes erd
\end_inset

: C code implementation files.
 (functions are created)
\end_layout

\begin_layout Itemize
Makevars: the 
\begin_inset Quotes eld
\end_inset

makefile
\begin_inset Quotes erd
\end_inset

 tells the compiler what to do
\end_layout

\begin_layout Itemize
dummy.cc: a C++ code file (but is empty, I don't know/care why).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Compiling a Package Requires System Libraries}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Install a package from the command line
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ R CMD INSTALL rgeos_0.3-28.tar.gz
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the compile succeeds, it looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ R CMD INSTALL rgeos_0.3-28.tar.gz
\end_layout

\begin_layout Plain Layout

* installing to library '/home/pauljohn/R/x86_64-pc-linux-gnu-library/3.5'
\end_layout

\begin_layout Plain Layout

* installing *source* package 'rgeos' ...
\end_layout

\begin_layout Plain Layout

** package 'rgeos' successfully unpacked and MD5 sums checked
\end_layout

\begin_layout Plain Layout

configure: CC: gcc -std=gnu99
\end_layout

\begin_layout Plain Layout

configure: CXX: g++
\end_layout

\begin_layout Plain Layout

configure: rgeos: 0.3-28
\end_layout

\begin_layout Plain Layout

checking for /usr/bin/svnversion...
 yes
\end_layout

\begin_layout Plain Layout

configure: svn revision: 572
\end_layout

\begin_layout Plain Layout

checking for geos-config...
 /usr/bin/geos-config
\end_layout

\begin_layout Plain Layout

checking geos-config usability...
 yes
\end_layout

\begin_layout Plain Layout

configure: GEOS version: 3.6.2
\end_layout

\begin_layout Plain Layout

checking geos version at least 3.2.0...
 yes
\end_layout

\begin_layout Plain Layout

checking geos-config clibs...
 yes
\end_layout

\begin_layout Plain Layout

checking geos_c.h  presence and usability...
 yes
\end_layout

\begin_layout Plain Layout

checking geos: linking with libgeos_c...
 yes
\end_layout

\begin_layout Plain Layout

configure: PKG_CPPFLAGS:  -I/usr/include
\end_layout

\begin_layout Plain Layout

configure: PKG_LIBS:  -L/usr/lib/x86_64-linux-gnu -lgeos-3.6.2 -L/usr/lib/x86_64-l
inux-gnu -lgeos_c
\end_layout

\begin_layout Plain Layout

configure: creating ./config.status
\end_layout

\begin_layout Plain Layout

config.status: creating src/Makevars
\end_layout

\begin_layout Plain Layout

** libs
\end_layout

\begin_layout Plain Layout

g++  -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/lib/R/site-l
ibrary/sp/include"    -fpic  -O3 -mtune=native -march=native -Wno-unused-variabl
e -Wno-unused-function -flto -ffat-lto-objects  -Wno-unused-local-typedefs
 -Wno-ignored-attributes -Wno-deprecated-declarations -c dummy.cc -o dummy.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c init.c -o init.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c local_stubs.c -o local_stubs.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos.c -o rgeos.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_R2geos.c -o rgeos_R2geos.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_R2geosMP.c -o rgeos_R2geosMP.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_bbox.c -o rgeos_bbox.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_buffer.c -o rgeos_buffer.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_coord.c -o rgeos_coord.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_geos2R.c -o rgeos_geos2R.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_linearref.c -o rgeos_linearref.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_misc.c -o rgeos_misc.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_poly2nb.c -o rgeos_poly2nb.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_predicate_binary.c -o rgeos_predicate_binary.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_predicate_unary.c -o rgeos_predicate_unary.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_topology.c -o rgeos_topology.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_topology_binary.c -o rgeos_topology_binary.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_validate.c -o rgeos_validate.o
\end_layout

\begin_layout Plain Layout

gcc -std=gnu99 -I"/usr/share/R/include" -DNDEBUG -I/usr/include -I"/usr/local/li
b/R/site-library/sp/include"    -fpic  -g -O2 -fdebug-prefix-map=/build/r-base-o
Ncpyf/r-base-3.5.1=.
 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIF
Y_SOURCE=2 -g  -c rgeos_wkt.c -o rgeos_wkt.o
\end_layout

\begin_layout Plain Layout

g++ -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o rgeos.so
 dummy.o init.o local_stubs.o rgeos.o rgeos_R2geos.o rgeos_R2geosMP.o rgeos_bbox.o
 rgeos_buffer.o rgeos_coord.o rgeos_geos2R.o rgeos_linearref.o rgeos_misc.o rgeos_pol
y2nb.o rgeos_predicate_binary.o rgeos_predicate_unary.o rgeos_topology.o rgeos_topol
ogy_binary.o rgeos_validate.o rgeos_wkt.o -L/usr/lib/x86_64-linux-gnu -lgeos-3.6.2
 -L/usr/lib/x86_64-linux-gnu -lgeos_c -L/usr/lib/R/lib -lR
\end_layout

\begin_layout Plain Layout

installing to /home/pauljohn/R/x86_64-pc-linux-gnu-library/3.5/rgeos/libs
\end_layout

\begin_layout Plain Layout

** R
\end_layout

\begin_layout Plain Layout

** inst
\end_layout

\begin_layout Plain Layout

** byte-compile and prepare package for lazy loading
\end_layout

\begin_layout Plain Layout

** help
\end_layout

\begin_layout Plain Layout

*** installing help indices
\end_layout

\begin_layout Plain Layout

** building package indices
\end_layout

\begin_layout Plain Layout

** testing if installed package can be loaded
\end_layout

\begin_layout Plain Layout

* DONE (rgeos)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
However, in order to make that work I see a sequence of error messages,
 indicating that 
\begin_inset Quotes eld
\end_inset

gcc
\begin_inset Quotes erd
\end_inset

 is not found, or that 
\begin_inset Quotes eld
\end_inset

geos-config
\begin_inset Quotes erd
\end_inset

 is not found, or that some headers from a GIS library are not found.
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\begin_inset Quotes eld
\end_inset

geos-config
\begin_inset Quotes erd
\end_inset

 .
 
\end_layout

\begin_layout Itemize
That's from the GEOS project for GIS (Mr.
 Google told me).
\end_layout

\begin_layout Itemize
If I am the system admin, I install the separate packages 
\begin_inset Quotes eld
\end_inset

libgeoss-3.3.3, libgeos-c1, libgeos-dev, and libgeos++-dev
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
If I am not the system-admin, I may need to compile the GEOS project packages
 in my user account before proceeding (see 
\begin_inset CommandInset href
LatexCommand href
name "http://pj.freefaculty.org/blog/?p=315"
target "Building R-devel on RedHat Linux 6"
literal "false"

\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize
Common novice mistake: install only 
\begin_inset Quotes eld
\end_inset

libgeoss
\begin_inset Quotes erd
\end_inset

 and not the -dev packages.
\end_layout

\begin_layout Itemize
Look back and notice the install goes through 3 phases
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

configure
\begin_inset Quotes erd
\end_inset

: scan the system for required tools
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

make
\begin_inset Quotes erd
\end_inset

: Use gcc and g++ (2 compilers) to create the machine-language code
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

make install
\begin_inset Quotes erd
\end_inset

: puts the pieces into the desired location
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim, allowframebreaks]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{The desired location and .libPaths()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is an important R thing that I don't want to forget to mention it.
\end_layout

\begin_layout Itemize
R allows a system to hold several collections of compiled R packages.
 Those are called 
\begin_inset Quotes eld
\end_inset

libraries
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
What paths are searched on your system? Run 
\begin_inset Quotes eld
\end_inset

.libPaths()
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
On my laptop, the .libPaths() output is:
\begin_inset Quotes srd
\end_inset


\begin_inset Quotes srd
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> .libPaths()
\end_layout

\begin_layout Plain Layout

[1] "/home/pauljohn/R/x86_64-pc-linux-gnu-library/3.5"
\end_layout

\begin_layout Plain Layout

[2] "/usr/local/lib/R/site-library"
\end_layout

\begin_layout Plain Layout

[3] "/usr/lib/R/site-library"
\end_layout

\begin_layout Plain Layout

[4] "/usr/lib/R/library"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
On a compute node in the cluster, I just noticed my libPaths() output is
 bizarre!:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> .libPaths()
\end_layout

\begin_layout Plain Layout

[1] "/panfs/pfs.local/work/crmda/tools/mro/3.4/site-library"
\end_layout

\begin_layout Plain Layout

[2] "/panfs/pfs.local/software/install/MRO/3.4.0/microsoft-r/3.4/lib64/R/library"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
That's a shock to me because
\end_layout

\begin_deeper
\begin_layout Itemize
each user should have a personal package directory, such as
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
$HOME/R/x86_64-pc-linux-gnu-library/3.4
\end_layout

\end_inset

.
 (I'll have to check that)
\end_layout

\end_deeper
\begin_layout Itemize
Individual user can append additional path elements to their path:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small}"
inline false
status open

\begin_layout Plain Layout

> .libPaths(c(.libPaths(), "/tools/lib64/R/bioconductor"))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
So the following scenario SHOULD play out, if everything is working properly.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
User logs into a compute node and runs R
\end_layout

\begin_layout Itemize
User runs a command such as 
\begin_inset Quotes eld
\end_inset

install.packages(
\begin_inset Quotes eld
\end_inset

lme4
\begin_inset Quotes erd
\end_inset

)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
If the user is an administrator, the package is installed into the common
 library folders
\end_layout

\begin_layout Itemize
If the user is not an administrator, then R says something like 
\begin_inset Quotes eld
\end_inset

you don't have permission to write in /usr/lib/R/library, would you like
 to create your own R library for your personal usage in $HOME/R/x86_64...
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Create Windows Packages: Rtools 
\backslash
& Win-builder}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In Windows, most R packages are pre-compiled 
\begin_inset Quotes eld
\end_inset

at the factory
\begin_inset Quotes erd
\end_inset

 to save you the trouble.
\end_layout

\begin_layout Itemize
However, some packages may not be available.
 You may have to compile them.
\end_layout

\begin_layout Itemize
Rtools (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://cran.r-project.org/bin/windows/Rtools
\end_layout

\end_inset

): a suite of Windows programs, including GCC and related tools.
\end_layout

\begin_layout Itemize
Win-builder website: upload package to 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://win-builder.r-project.org
\end_layout

\end_inset

 and it will compile a Windows package for you.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Compile Software
\end_layout

\begin_layout Subsection
gcc is the GNU C Compiler
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
command line: gcc
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
See my 
\begin_inset Quotes eld
\end_inset

C
\begin_inset Quotes erd
\end_inset

 examples, basic use of gcc
\end_layout

\begin_layout Itemize
Step 1.
 get a C code file
\end_layout

\begin_layout Itemize
Step 2.
 type 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
$ gcc example.c 
\end_layout

\begin_layout Itemize
That creates a program names 
\begin_inset Quotes eld
\end_inset

a.out
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To run the program, type
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
$ ./a.out
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Some gcc options
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
To mention just a few
\end_layout

\begin_layout Enumerate
-o name: the executable file to be created:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
$ gcc -o whatever example.c 
\end_layout

\begin_layout Standard
creates program called 
\begin_inset Quotes eld
\end_inset

whatever
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
-Wall: list all warnings
\end_layout

\begin_layout Enumerate
-Werror: treat warnings as errors that stop the compilation
\end_layout

\begin_layout Enumerate
-O2 (or -O3) sets the optimization level (O2 more save, more common, O3
 is aggressive, less commonly used)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{Emacs Local Variables}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Notice in the bottom of my C example programs, eg 
\begin_inset Quotes eld
\end_inset

example-6_math.c
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

Local Variables:
\end_layout

\begin_layout Plain Layout

compile-command: "gcc -o whatever -Wall example-6_math.c -lm "
\end_layout

\begin_layout Plain Layout

End:
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The file 
\begin_inset Quotes eld
\end_inset

example-6_math.c
\begin_inset Quotes erd
\end_inset

 will be compiled when the Emacs Tools->Compile function is activated.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What a Stupid Programmer Does}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ gcc -g -o runme --no-warnings cast_test.c
\end_layout

\begin_layout Plain Layout

$ ./runme
\end_layout

\begin_layout Plain Layout

Segmentation fault
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What a Smart Programmer Does }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Observe Warnings, fix code
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ gcc -g -Wall -o runme cast_test.c
\end_layout

\begin_layout Plain Layout

cast_test.c: In function 'main':
\end_layout

\begin_layout Plain Layout

cast_test.c:13: warning: multi-character character constant
\end_layout

\begin_layout Plain Layout

cast_test.c:17: warning: format '%x' expects type 'unsigned int', but argument
 3 has type 'long unsigned int'
\end_layout

\begin_layout Plain Layout

cast_test.c:10: warning: 'intptr' is used uninitialized in this function
\end_layout

\begin_layout Plain Layout

$ ./runme
\end_layout

\begin_layout Plain Layout

Segmentation fault
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\end_layout

\begin_layout Plain Layout


\backslash
frametitle{What Virtuous Programmers Do}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Don't let it compile a program for you until all warnings have been eliminated
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ gcc -g -Werror -o runme cast_test.c
\end_layout

\begin_layout Plain Layout

cc1: warnings being treated as errors
\end_layout

\begin_layout Plain Layout

cast_test.c: In function 'main':
\end_layout

\begin_layout Plain Layout

cast_test.c:13: error: multi-character character constant
\end_layout

\begin_layout Plain Layout

cast_test.c:17: error: format '%x' expects type 'unsigned int', but argument
 3 has type 'long unsigned int' 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Does not create executable.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
gcc allows many more command line flags
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
-g Keeps 
\begin_inset Quotes eld
\end_inset

debugging symbols
\begin_inset Quotes erd
\end_inset

 for future inspection of this program with 
\begin_inset Quotes eld
\end_inset

gdb
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
-pg Includes 
\begin_inset Quotes eld
\end_inset

profiling information
\begin_inset Quotes erd
\end_inset

 in a program, so a program like 
\begin_inset Quotes eld
\end_inset

gprof
\begin_inset Quotes erd
\end_inset

 can later inspect it.
\end_layout

\end_deeper
\begin_layout Subsection
The GNU build framework
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
GNU Software System
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Simple Standardized process to distribute re-buildable programs
\end_layout

\begin_layout Enumerate
Download a source code archive & 
\begin_inset Quotes eld
\end_inset

untar
\begin_inset Quotes erd
\end_inset

 it
\end_layout

\begin_layout Enumerate
Inspect 
\begin_inset Quotes eld
\end_inset

README
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

INSTALL
\begin_inset Quotes erd
\end_inset

 files.
 Usually we are instructed to follow this generic process.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
./configure –whatever_options_you_need
\end_layout

\begin_layout Itemize
make #uses the 
\begin_inset Quotes eld
\end_inset

make
\begin_inset Quotes erd
\end_inset

 program, which reads Makefile, does required work
\end_layout

\begin_layout Itemize
make install #uses 
\begin_inset Quotes eld
\end_inset

install
\begin_inset Quotes erd
\end_inset

 program to copy files into place in system
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
configure –prefix means...
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The configure statement allows many many options
\end_layout

\begin_layout Itemize
The most common option is 
\begin_inset Quotes eld
\end_inset

prefix
\begin_inset Quotes erd
\end_inset

, the 
\begin_inset Quotes eld
\end_inset

top level directory
\begin_inset Quotes erd
\end_inset

 into which the program is being installed.
\end_layout

\begin_layout Itemize
Most programs built by the system administrator are built with 
\begin_inset Quotes eld
\end_inset

./configure –prefix=/usr
\begin_inset Quotes erd
\end_inset

 so that the program's parts are nested under /usr.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Common Subfolders With the Install Directory
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Installs put parts of the program into subdirectories inside the 
\begin_inset Quotes eld
\end_inset

prefix
\begin_inset Quotes erd
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
bin # 
\begin_inset Quotes eld
\end_inset

executable
\begin_inset Quotes erd
\end_inset

 programs and scripts
\end_layout

\begin_layout Itemize
lib # 
\begin_inset Quotes eld
\end_inset

shared
\begin_inset Quotes erd
\end_inset

 (*.so) or 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 (*.a) libraries 
\end_layout

\begin_layout Itemize
include # 
\begin_inset Quotes eld
\end_inset

header files
\begin_inset Quotes erd
\end_inset

 (*.h)
\end_layout

\begin_layout Itemize
share # for 
\begin_inset Quotes eld
\end_inset

data
\begin_inset Quotes erd
\end_inset

 used by the program, such as icons, menus
\end_layout

\begin_layout Itemize
etc # system-wide configuration information, defaults
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Suppose 
\begin_inset Quotes eld
\end_inset

prefix
\begin_inset Quotes erd
\end_inset

 is /usr
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Install will place files into
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
/usr/bin
\end_layout

\begin_layout Itemize
/usr/share
\end_layout

\begin_layout Itemize
/usr/lib
\end_layout

\begin_layout Itemize
/usr/include
\end_layout

\begin_layout Itemize
/etc
\end_layout

\end_deeper
\begin_layout Itemize
The installed files 
\begin_inset Quotes eld
\end_inset

know how to find each other
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Manually moving files after installation will generally break the program
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Check Installed Packages in a Linux System
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
On a RedHat-based system, such as hpc.quant.ku.edu, the packages use the 
\begin_inset Quotes eld
\end_inset

rpm
\begin_inset Quotes erd
\end_inset

 format and they can be queried by the nonprivileged user
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Run 
\begin_inset Quotes eld
\end_inset

rpm -qa
\begin_inset Quotes erd
\end_inset

 to list all installed RPM packages
\end_layout

\begin_layout Itemize
Run 
\begin_inset Quotes eld
\end_inset

rpm -qil package-name
\begin_inset Quotes erd
\end_inset

 to see full list of installed files
\end_layout

\end_deeper
\begin_layout Itemize
On a Debian-based system, such as freefaculty.org, the packages are provided
 in the 
\begin_inset Quotes eld
\end_inset

deb
\begin_inset Quotes erd
\end_inset

 and they can be queried:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Run 
\begin_inset Quotes eld
\end_inset

dpkg -l
\begin_inset Quotes erd
\end_inset

 to list all installed packages
\end_layout

\begin_layout Itemize
Run 
\begin_inset Quotes eld
\end_inset

dpkg -L package-name
\begin_inset Quotes erd
\end_inset

 to see list of installed files
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Nonprivileged Users can Compile & Install Software Within their own space
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
System administrator refuses to install something?
\end_layout

\begin_layout Itemize
No problem
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Get the source
\end_layout

\begin_layout Itemize
Set the configure's –prefix option to be a place INSIDE your home folder,
 such as $HOME/packages.
\end_layout

\begin_layout Itemize
The install will create folders it needs, such as
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
$HOME/packages/bin
\end_layout

\begin_layout Standard
$HOME/packages/lib
\end_layout

\begin_layout Standard
$HOME/packages/share
\end_layout

\end_deeper
\begin_layout Itemize
Add $HOME/packages/bin to your PATH variable,
\end_layout

\begin_layout Itemize
Add $HOME/packages/lib to LD_LIBRARY_PATH
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[containsverbatim]
\backslash
frametitle{Example: Build newer vim for yourself}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
hpc (2011-02-07) offers vim version 7.0
\end_layout

\begin_layout Itemize
newest version is 7.3 (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.vim.org
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
Want that? Install for yourself in $HOME
\end_layout

\begin_layout Itemize
Full text of download & build session is online:
\end_layout

\begin_layout Itemize
http://pj.freefaculty.org/ps909/vim-build-73.txt
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
allowframebreaks,containsverbatim
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
Wrinkles for building on cluster:
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
avoid compiling on network file server, use local node disk if possible
\end_layout

\begin_layout Itemize
mv sourcecode to /tmp/vim for build b/c 
\begin_inset Quotes eld
\end_inset

local disk
\begin_inset Quotes erd
\end_inset

 on compute node much faster than NFS share for writing lots of files
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset listings
inline false
status open

\begin_layout LyX-Code

./configure --prefix=$HOME/packages
\end_layout

\begin_layout LyX-Code

make
\end_layout

\begin_layout LyX-Code

make install
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Temporarily new bin folder to PATH (for testing)
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
$ export $PATH=$HOME/packages/bin:$PATH
\end_layout

\end_deeper
\begin_layout Itemize
Add lib path to the dynamic loader's path
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ export $LD_LIBRARY_PATH=$HOME/packages/lib:$LD_LIBRARY_PATH
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Explain Use of 
\begin_inset Quotes eld
\end_inset

export
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
export is a BASH shell command
\end_layout

\begin_layout Itemize
Something like 
\begin_inset Quotes eld
\end_inset

send this command out into my environment
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Effect limited to current shell.
 Change terminals–have to re-do it.
\end_layout

\begin_layout Itemize
Can make permanent by editing ~/.bashrc or ~/.bash_profile
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame

\end_layout

\end_body
\end_document
